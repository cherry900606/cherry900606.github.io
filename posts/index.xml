<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on CC&#39;s blog</title>
		<link>https://cherry900606.github.io/posts/</link>
		<description>Recent content in Posts on CC&#39;s blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-tw</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Mon, 23 Aug 2021 14:56:12 +0800</lastBuildDate>
		<atom:link href="https://cherry900606.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Pytorch MNIST 筆記</title>
			<link>https://cherry900606.github.io/posts/pytorch_cnn/</link>
			<pubDate>Mon, 23 Aug 2021 14:56:12 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/pytorch_cnn/</guid>
			<description>流程 load library read data and pre-processing(set parameters, create dataloader) define network structure(set model, set loss function, set optimizer) training gradient 歸零 predict 計算loss backward 更新step testing 程式 import torch import torch.nn as nn import torch.nn.functional as F import torch.optim as optim from torchvision import datasets, transforms import torch.utils.data as data %matplotlib inline import matplotlib.pyplot as plt</description>
			<content type="html"><![CDATA[<h2 id="流程">流程</h2>
<ol>
<li>load library</li>
<li>read data and pre-processing(set parameters, create dataloader)</li>
<li>define network structure(set model, set loss function, set optimizer)</li>
<li>training
<ul>
<li>gradient 歸零</li>
<li>predict</li>
<li>計算loss</li>
<li>backward</li>
<li>更新step</li>
</ul>
</li>
<li>testing</li>
</ol>
<h2 id="程式">程式</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">torch</span>
<span class="kn">import</span> <span class="nn">torch.nn</span> <span class="kn">as</span> <span class="nn">nn</span>
<span class="kn">import</span> <span class="nn">torch.nn.functional</span> <span class="kn">as</span> <span class="nn">F</span>
<span class="kn">import</span> <span class="nn">torch.optim</span> <span class="kn">as</span> <span class="nn">optim</span>
<span class="kn">from</span> <span class="nn">torchvision</span> <span class="kn">import</span> <span class="n">datasets</span><span class="p">,</span> <span class="n">transforms</span>
<span class="kn">import</span> <span class="nn">torch.utils.data</span> <span class="kn">as</span> <span class="nn">data</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>

<span class="c1"># setting &amp; preprocceing data</span>
<span class="n">BATCH_SIZE</span> <span class="o">=</span> <span class="mi">64</span>
<span class="n">EPOCHS</span> <span class="o">=</span> <span class="mi">1</span>

<span class="n">transform</span> <span class="o">=</span> <span class="n">transforms</span><span class="o">.</span><span class="n">Compose</span><span class="p">([</span>
    <span class="n">transforms</span><span class="o">.</span><span class="n">ToTensor</span><span class="p">(),</span>
<span class="p">])</span>

<span class="n">train_dataset</span> <span class="o">=</span> <span class="n">datasets</span><span class="o">.</span><span class="n">MNIST</span><span class="p">(</span><span class="n">root</span><span class="o">=</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="n">train</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">transform</span><span class="o">=</span><span class="n">transform</span><span class="p">,</span> <span class="n">download</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">test_dataset</span> <span class="o">=</span> <span class="n">datasets</span><span class="o">.</span><span class="n">MNIST</span><span class="p">(</span><span class="n">root</span><span class="o">=</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="n">train</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">transform</span><span class="o">=</span><span class="n">transform</span><span class="p">,</span> <span class="n">download</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="n">train_loader</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">DataLoader</span><span class="p">(</span><span class="n">train_dataset</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">BATCH_SIZE</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">test_loader</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">DataLoader</span><span class="p">(</span><span class="n">test_dataset</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">BATCH_SIZE</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># define network structure</span>
<span class="k">class</span> <span class="nc">Net</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">Net</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">cnn</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">BatchNorm2d</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">MaxPool2d</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">fc</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">32</span><span class="o">*</span><span class="mi">13</span><span class="o">*</span><span class="mi">13</span><span class="p">,</span> <span class="mi">1024</span><span class="p">),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">1024</span><span class="p">,</span> <span class="mi">256</span><span class="p">),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
        <span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">cnn</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">flatten</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span> <span class="n">fc</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">output</span> <span class="o">=</span> <span class="n">F</span><span class="o">.</span><span class="n">log_softmax</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">output</span>
    
<span class="n">model</span> <span class="o">=</span> <span class="n">Net</span><span class="p">()</span>
<span class="n">loss</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">CrossEntropyLoss</span><span class="p">()</span>
<span class="n">optimizer</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">optim</span><span class="o">.</span><span class="n">Adam</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">parameters</span><span class="p">())</span>

<span class="c1"># train</span>
<span class="n">train_loss</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">EPOCHS</span><span class="p">):</span>
    <span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">train_loader</span><span class="p">):</span>
        <span class="n">optimizer</span><span class="o">.</span><span class="n">zero_grad</span><span class="p">()</span>
        <span class="n">train_pred</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">batch_loss</span> <span class="o">=</span> <span class="n">loss</span><span class="p">(</span><span class="n">train_pred</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
        <span class="n">batch_loss</span><span class="o">.</span><span class="n">backward</span><span class="p">()</span>
        <span class="n">optimizer</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>
                   
        <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s2">&#34;loss: {:.6f} [{}/{}]&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">batch_loss</span><span class="o">.</span><span class="n">item</span><span class="p">(),</span> 
                                            <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span>
                                            <span class="nb">len</span><span class="p">(</span><span class="n">train_loader</span><span class="o">.</span><span class="n">dataset</span><span class="p">)))</span>
            <span class="n">train_loss</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">batch_loss</span><span class="o">.</span><span class="n">item</span><span class="p">())</span>

    
<span class="c1"># test</span>
<span class="n">test_loss</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">test_acc</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
<span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">data</span><span class="p">,</span> <span class="n">target</span> <span class="ow">in</span> <span class="n">test_loader</span><span class="p">:</span>
        <span class="n">test_pred</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">test_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="p">(</span><span class="n">test_pred</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
        
        <span class="n">pred</span> <span class="o">=</span> <span class="n">test_pred</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">keepdim</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">test_acc</span> <span class="o">+=</span> <span class="p">(</span><span class="n">pred</span> <span class="o">==</span> <span class="n">target</span><span class="o">.</span><span class="n">view_as</span><span class="p">(</span><span class="n">pred</span><span class="p">))</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
        
    <span class="n">test_loss</span> <span class="o">/=</span> <span class="nb">len</span><span class="p">(</span><span class="n">test_loader</span><span class="o">.</span><span class="n">dataset</span><span class="p">)</span>

    <span class="c1"># Log testing info</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
        <span class="n">test_loss</span><span class="p">,</span> <span class="n">test_acc</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">test_loader</span><span class="o">.</span><span class="n">dataset</span><span class="p">),</span>
        <span class="mf">100.</span> <span class="o">*</span> <span class="n">test_acc</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">test_loader</span><span class="o">.</span><span class="n">dataset</span><span class="p">)))</span>
</code></pre></div><h2 id="學習資源">學習資源</h2>
<p><a href="https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html">PyTorch官方Tutorials Quickstart</a></p>
<p><a href="https://ithelp.ithome.com.tw/articles/10243145">Day 9 / PyTorch 簡介 / PyTorch 入門（二） —— MNIST 手寫數字辨識</a></p>
]]></content>
		</item>
		
		<item>
			<title>李宏毅機器學習2020_hw2</title>
			<link>https://cherry900606.github.io/posts/ml_hw2/</link>
			<pubDate>Mon, 16 Aug 2021 14:01:22 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/ml_hw2/</guid>
			<description>範例code preparing data X_train_fpath = &amp;#39;./data/X_train&amp;#39; Y_train_fpath = &amp;#39;./data/Y_train&amp;#39; X_test_fpath = &amp;#39;./data/X_test&amp;#39; output_fpath = &amp;#39;./output_{}.csv&amp;#39; # Parse csv files to numpy array with open(X_train_fpath) as f: next(f) X_train = np.array([line.strip(&amp;#39;\n&amp;#39;).split(&amp;#39;,&amp;#39;)[1:] for line in f], dtype = float) with open(Y_train_fpath) as f: next(f) Y_train = np.array([line.strip(&amp;#39;\n&amp;#39;).split(&amp;#39;,&amp;#39;)[1] for line in f], dtype = float) with open(X_test_fpath) as f: next(f) X_test = np.array([line.strip(&amp;#39;\n&amp;#39;).split(&amp;#39;,&amp;#39;)[1:] for line in f], dtype</description>
			<content type="html"><![CDATA[<h2 id="範例code">範例code</h2>
<h3 id="preparing-data">preparing data</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">X_train_fpath</span> <span class="o">=</span> <span class="s1">&#39;./data/X_train&#39;</span>
<span class="n">Y_train_fpath</span> <span class="o">=</span> <span class="s1">&#39;./data/Y_train&#39;</span>
<span class="n">X_test_fpath</span> <span class="o">=</span> <span class="s1">&#39;./data/X_test&#39;</span>
<span class="n">output_fpath</span> <span class="o">=</span> <span class="s1">&#39;./output_{}.csv&#39;</span>

<span class="c1"># Parse csv files to numpy array</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">X_train_fpath</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="nb">next</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">X_train</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">:]</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">],</span> <span class="n">dtype</span> <span class="o">=</span> <span class="nb">float</span><span class="p">)</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">Y_train_fpath</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="nb">next</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">Y_train</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">],</span> <span class="n">dtype</span> <span class="o">=</span> <span class="nb">float</span><span class="p">)</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">X_test_fpath</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="nb">next</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">X_test</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">:]</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">],</span> <span class="n">dtype</span> <span class="o">=</span> <span class="nb">float</span><span class="p">)</span>
</code></pre></div><blockquote>
<p>strip(): 除去開頭跟尾端的特定字元。</p>
</blockquote>
<blockquote>
<p>split(): 用特定字元切割字串。</p>
</blockquote>
<blockquote>
<p>[line.strip('\n').split(',')[1:] for line in f]: list comprehension</p>
<p>遍歷file中每一行line，處理過的line變成一個list。</p>
</blockquote>
<h3 id="some-useful-functions">some useful functions</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">_gradient</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y_label</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="c1"># This function computes the gradient of cross entropy loss with respect to weight w and bias b.</span>
    <span class="n">y_pred</span> <span class="o">=</span> <span class="n">_f</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
    <span class="n">pred_error</span> <span class="o">=</span> <span class="n">Y_label</span> <span class="o">-</span> <span class="n">y_pred</span>
    <span class="n">w_grad</span> <span class="o">=</span> <span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">pred_error</span> <span class="o">*</span> <span class="n">X</span><span class="o">.</span><span class="n">T</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">b_grad</span> <span class="o">=</span> <span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">pred_error</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">w_grad</span><span class="p">,</span> <span class="n">b_grad</span>
</code></pre></div><p><img src="https://i.imgur.com/5Caf7Ug.png" alt=""></p>
<p>課程中我們找到最佳的w跟b，是找到讓-lnL(w,b)越小越好。要達到目標，就要分別以w跟b對該function微分。最後會得到下面的式子，而b也是同理。</p>
<p><img src="https://i.imgur.com/7YL8sOA.png" alt=""></p>
<h3 id="train">train</h3>
<p>這裡的training是用stochastic gradient descent。</p>
<h2 id="自我練習">自我練習</h2>
<h3 id="流程">流程</h3>
<ul>
<li>load data</li>
<li>normalization</li>
<li>train
<ul>
<li>參數設定</li>
<li>giradient descent</li>
</ul>
</li>
<li>計算 loss</li>
<li>predict</li>
<li>save file</li>
</ul>
<h3 id="程式">程式</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">110</span><span class="p">)</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;./data/X_train&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="nb">next</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">X_train</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">:]</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">float</span><span class="p">)</span>
    
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;./data/Y_train&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="nb">next</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">Y_train</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">float</span><span class="p">)</span>
    
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;./data/X_test&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="nb">next</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">X_test</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">:]</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">float</span><span class="p">)</span>

<span class="n">parameter_size</span> <span class="o">=</span> <span class="n">X_train</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">train_size</span> <span class="o">=</span> <span class="n">X_train</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">test_size</span> <span class="o">=</span> <span class="n">X_test</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

<span class="c1"># normalize</span>
<span class="n">x_mean</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">x_std</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">std</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">train_size</span><span class="p">):</span>
    <span class="n">X_train</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">X_train</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">x_mean</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">x_std</span> <span class="o">+</span> <span class="mf">1e-8</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">test_size</span><span class="p">):</span>
    <span class="n">X_test</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">X_test</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">x_mean</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">x_std</span> <span class="o">+</span> <span class="mf">1e-8</span><span class="p">)</span>
    
<span class="c1"># split into train set &amp; dev set</span>
<span class="n">dev_ratio</span> <span class="o">=</span> <span class="mf">0.3</span>
<span class="n">train_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">X_train</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">dev_ratio</span><span class="p">))</span>

<span class="n">X_dev</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">[</span><span class="n">train_size</span><span class="p">:,</span> <span class="p">:]</span>
<span class="n">Y_dev</span> <span class="o">=</span> <span class="n">Y_train</span><span class="p">[</span><span class="n">train_size</span><span class="p">:]</span>
<span class="n">X_train</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">[:</span><span class="n">train_size</span><span class="p">,</span> <span class="p">:]</span>
<span class="n">Y_train</span> <span class="o">=</span> <span class="n">Y_train</span><span class="p">[:</span><span class="n">train_size</span><span class="p">]</span>

<span class="k">print</span><span class="p">(</span><span class="n">X_dev</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">Y_dev</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">X_train</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">Y_train</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>

<span class="c1"># training</span>
<span class="n">learning_rate</span> <span class="o">=</span> <span class="mf">0.05</span>
<span class="n">iter_time</span> <span class="o">=</span> <span class="mi">100</span>
<span class="n">step</span> <span class="o">=</span> <span class="mi">1</span>

<span class="n">w</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">parameter_size</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
<span class="n">b</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">iter_time</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;iter {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
    
    <span class="c1"># shuffle</span>
    <span class="n">index</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">train_size</span><span class="p">)</span>
    <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
    <span class="n">X_train</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
    <span class="n">Y_train</span> <span class="o">=</span> <span class="n">Y_train</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
    
    <span class="c1">#sgd</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">train_size</span><span class="p">):</span>
        <span class="n">X</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">Y</span> <span class="o">=</span> <span class="n">Y_train</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
        <span class="n">z</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span> <span class="o">+</span> <span class="n">b</span>
        
        <span class="n">y_pred</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">z</span><span class="p">))</span>
        <span class="n">pred_error</span> <span class="o">=</span> <span class="o">-</span> <span class="p">(</span><span class="n">Y</span> <span class="o">-</span> <span class="n">y_pred</span><span class="p">)</span>
        <span class="n">w_grad</span> <span class="o">=</span> <span class="n">pred_error</span> <span class="o">*</span> <span class="n">X</span><span class="o">.</span><span class="n">T</span>
        <span class="n">b_grad</span> <span class="o">=</span> <span class="n">pred_error</span>
        
        <span class="n">w</span> <span class="o">=</span> <span class="n">w</span> <span class="o">-</span> <span class="n">learning_rate</span> <span class="o">*</span> <span class="n">w_grad</span> <span class="o">/</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">step</span><span class="p">)</span>
        <span class="n">b</span> <span class="o">=</span> <span class="n">b</span> <span class="o">-</span> <span class="n">learning_rate</span> <span class="o">*</span> <span class="n">b_grad</span> <span class="o">/</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">step</span><span class="p">)</span>
        
        <span class="n">step</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="c1"># calculate train loss</span>
<span class="n">train_loss</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">train_size</span><span class="p">):</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="n">Y</span> <span class="o">=</span> <span class="n">Y_train</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="n">z</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span> <span class="o">+</span> <span class="n">b</span>
    <span class="n">y_pred</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">z</span><span class="p">))</span>
    
    <span class="k">if</span> <span class="n">Y</span> <span class="o">!=</span> <span class="n">np</span><span class="o">.</span><span class="n">round</span><span class="p">(</span><span class="n">y_pred</span><span class="p">):</span>
        <span class="n">train_loss</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">print</span><span class="p">(</span><span class="s1">&#39;train loss: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">train_loss</span><span class="o">/</span><span class="n">train_size</span><span class="p">))</span>

<span class="c1"># calculate dev loss</span>
<span class="n">dev_loss</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">X_dev</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">X_dev</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="n">Y</span> <span class="o">=</span> <span class="n">Y_dev</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="n">z</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span> <span class="o">+</span> <span class="n">b</span>
    <span class="n">y_pred</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">z</span><span class="p">))</span>
    
    <span class="k">if</span> <span class="n">Y</span> <span class="o">!=</span> <span class="n">np</span><span class="o">.</span><span class="n">round</span><span class="p">(</span><span class="n">y_pred</span><span class="p">):</span>
        <span class="n">dev_loss</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">print</span><span class="p">(</span><span class="s1">&#39;dev loss: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">dev_loss</span><span class="o">/</span><span class="n">X_dev</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>

<span class="n">ans_y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">X_test</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">X_test</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">X_test</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="n">z</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span> <span class="o">+</span> <span class="n">b</span>
    <span class="n">Y_pred</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">round</span><span class="p">(</span><span class="mi">1</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">z</span><span class="p">)))</span>
    <span class="n">ans_y</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">Y_pred</span><span class="p">)</span>

<span class="kn">import</span> <span class="nn">csv</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;submit_myself.csv&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">writer</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">writer</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">header</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span><span class="p">]</span>
    <span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">header</span><span class="p">)</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">ans_y</span><span class="p">)):</span>
        <span class="n">row</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">ans_y</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span>
        <span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</code></pre></div><h3 id="總結">總結</h3>
<p>課程提供的範例有一點困擾我很久: 在處理多維度的資料時，為了效率與方便，會用內建函式處理。</p>
<p>像是normalize是這樣寫的:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">_normalize</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">train</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">X_mean</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">X_std</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">train</span><span class="p">:</span>
        <span class="n">X_mean</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">X_std</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">std</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">X</span> <span class="o">=</span> <span class="p">(</span><span class="n">X</span> <span class="o">-</span> <span class="n">X_mean</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">X_std</span> <span class="o">+</span> <span class="mf">1e-8</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">X</span><span class="p">,</span> <span class="n">X_mean</span><span class="p">,</span> <span class="n">X_std</span>
</code></pre></div><p>這樣做是因為np.mean()後得到的numpy array shape 需要調整過，再經由broadcast 把整個X_train直接正規化，寫起來相當直觀易懂，只是真的寫下去卻被背後的邏輯卡很久。</p>
<p>又或者是gradient的部分:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">_gradient</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="n">y_pred</span> <span class="o">=</span> <span class="n">_f</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
    <span class="n">pred_error</span> <span class="o">=</span> <span class="n">Y</span> <span class="o">-</span> <span class="n">y_pred</span>
    
    <span class="n">w_grad</span> <span class="o">=</span> <span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">pred_error</span> <span class="o">*</span> <span class="n">X</span><span class="o">.</span><span class="n">T</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">b_grad</span> <span class="o">=</span> <span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">pred_error</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">w_grad</span><span class="p">,</span> <span class="n">b_grad</span>
</code></pre></div><p>w_grad 跟 b_grad 為什麼這樣寫也不是很好懂，哪怕照著微分後得到的公式去理解也仍然相當頭痛。 像我就相當困惑為何 X 要 transpose? 還有為什麼計算sigmoid時範例用np.matmul，有些人用np.dot? 又或者為何是 np.dot(X, w) ，而不是 np.dot(w, X)呢?</p>
<p>所以我自己嘗試手刻時盡量避免這些雖簡潔卻大有深意的語法，改以寫起來稍嫌複雜，但沒那麼多門道的方法。</p>
<p>normalize的寫法跟作業一一樣。切割訓練集則與範例程式相同，只是沒寫成函式。shuffle的部分也沒寫成函式。</p>
<p>訓練的部分可能沒很符合sgd的精神，等同於把batch_size設為1。</p>
<p>計算loss不是用範例程式裡面的cross entropy loss。</p>
<p>kaggle scores:</p>
<ul>
<li>private score: 0.88943</li>
<li>public score: 0.88914</li>
</ul>
<p>分數還算不錯，跟用範例程式調參數的結果沒差太多，只是訓練的速度稍慢。</p>
]]></content>
		</item>
		
		<item>
			<title>NISRA Enlightened 2021</title>
			<link>https://cherry900606.github.io/posts/nisra/</link>
			<pubDate>Fri, 13 Aug 2021 18:06:52 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/nisra/</guid>
			<description>前言 幾個月前在Hitcon的臉書粉專看到活動宣傳，想著暑假沒事做，這個營隊也沒有程度限制，一時心血來潮就報名了。 以前也不是沒有對CTF產生好</description>
			<content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>幾個月前在Hitcon的臉書粉專看到活動宣傳，想著暑假沒事做，這個營隊也沒有程度限制，一時心血來潮就報名了。</p>
<p>以前也不是沒有對CTF產生好奇，也有到處找過入門資料，但總是沒有找到能讓我看下去的文章(也可能我花的時間還是太少)，簡而言之就是三分鐘熱度。</p>
<p>營隊開始前一周收到行前通知，才想到當初報名了這個活動，但誰想到暑假的我已經進實驗室開始專題訓練了，不像當初設想的那樣空閒，加上虛擬機的環境一直架不起來，就想說加減聽聽算了。</p>
<p>於是乎五天的活動，每一天都是十點才進入會議室，而且真正認真聽的只有CTF Intro。其他課程都是有興趣才停下手邊的事專心聽，不然都是一邊滑手機或者弄專題訓練，不然就是嘗試超前進度完成Lab。</p>
<h2 id="課程">課程</h2>
<h3 id="info-leakage">Info Leakage</h3>
<p>其實我雖然後半段有跟著課程，但上完還是不確定這個主題想表達什麼。</p>
<p>猜測是介紹因為各種原因造成的資訊洩漏吧?</p>
<h3 id="隱寫術">隱寫術</h3>
<p>第一次接觸這個主題，好酷。</p>
<p>資訊會隱藏在看似普通的表象之下，經過編碼修改、編輯header，或是對圖片做各種處理，有機會提取背後的訊息。</p>
<p>雖然Lab介紹了很多的工具，但不是很懂背後的原理，也沒有建立系統性的架構，感覺東碰西碰的接觸不少東西，但無法透徹理解為何這麼做，也不懂實際上要怎麼分析用哪種方法處理。</p>
<h3 id="網頁三兄弟">網頁三兄弟</h3>
<p>沒認真上，感覺就是介紹HTML、CSS跟JS的基礎。</p>
<h3 id="reverse">Reverse</h3>
<p>覺得是五天下來最難的部分，但我的環境沒弄好，沒辦法跟著嘗試逆向工程。</p>
<h3 id="os">OS</h3>
<p>太晚起床所以錯過前面的課程，所以也不知道是我匯入OVA檔的過程出錯還是怎麼樣，虛擬機跑出來的是全新的，而非是預先裝好東西的環境，所以我也沒認真聽這堂課。</p>
<p>不過看共筆也只是介紹基本的linux操作而已，總感覺把這門課叫OS有點怪。</p>
<h3 id="crypto">Crypto</h3>
<p>就&hellip;&hellip;各式各樣的加密法。我承認我沒有認真聽，不用想都知道會很無聊，直接在午休slide先放出來的時候把flag丟上去。</p>
<p>大部分的加密不是實際操作過就是略有耳聞，這些應該都是資工系學生的common sense吧?</p>
<p>後來才知道有一題lab有問題，直接從slide偷flag的我不小心變成通靈大師了，我都不敢自首。怕.jpg。</p>
<h3 id="ctf-intro">CTF Intro</h3>
<p>可以說是這次活動最精彩的部分，也是五天下來最認真上課的一次。</p>
<p>整體來說像是把前幾天上過的主題活用，也有教網頁方面的攻擊，上課到一半有人把admin權限偷走真是笑死我了。</p>
<h3 id="疫情-ikigai--資安和學習">疫情 IKIGAI : 資安和學習</h3>
<p>沒認真聽，大概是輔大系上的老師們來演講。</p>
<p>如果之後有把slide放上來，再稍微瞄下幾個有興趣的連結。</p>
<p>話說聽到他們學校推廣自學，在coursera自修完成一門課學生能拿五千覺得好羨慕，這樣我起碼能拿個一萬五吧。</p>
<h3 id="final-ctf">Final CTF</h3>
<p>最後的重頭戲。</p>
<p>每個主題我解出來的比例都差不多，除了reverse，都在40%~50%左右。比較可惜的是playfair明明用線上解碼器解出來的答案都一樣，但flag就是不對，還有OS的把flag碎片拼起來的那題，我總覺得自己有找到正確的四段，但也不對，試了超多次。</p>
<p>隱寫術的QR code那題超鬧，我直接用小畫家把它拼起來，雖然接縫處沒有對很好，但居然能掃成功。</p>
<p>OS我其實不太懂考點跟資安的關係，不就是要會基本的操作嗎?好像就是一直切換資料夾、切換使用者、查看檔案。</p>
<p>最後排名第20名。活動有將近150人報名、平均有80人出席上課、59人參加Final CTF，雖然不知有多少人本來就有打CTF，不過這個排名也還行吧，畢竟沒有很認真上課。</p>
<p>截圖紀念:
<img src="https://i.imgur.com/wZ6sd2L.png" alt=""></p>
<h2 id="資源">資源</h2>
<p><a href="https://drive.google.com/drive/folders/1QgBklmOl5E7F-PSoSUfVpeYYCCbtyaIc">課程簡報</a></p>
<p><a href="https://hackmd.io/vKXHhc-jQr-wWtqAzDBXTA">write-up-1</a></p>
<p><a href="https://hackmd.io/A9uarb5-QgOjeY7huzm1CA?view">write-up-2</a></p>
<p><a href="https://hackmd.io/CZkvboDFSk6BFIYZVjLwNQ">write-up-3</a></p>
<p><a href="https://github.com/Sharkkcode/NISRA_CTF_2021_writeups">write-up-4</a></p>
<h2 id="結語">結語</h2>
<p>在資工系打混摸魚到快大三了，好像也沒什麼值得稱道的成就，其實還挺迷茫的。這次參加外校的活動，也是想說就接觸看看沒碰過的領域吧，免費的優質活動錯過可惜。</p>
<p>雖然講師們年級沒有跟我差太多，但至少在資安領域有一定程度的了解，甚至於CTF Final排名第一的那個學員也好猛，網路上查了對方的經歷簡直跪了。相比之下就覺得自己真的沒什麼能拿出來講的。</p>
<p>唉，繼續摸魚去。</p>
]]></content>
		</item>
		
		<item>
			<title>在hugo hermit主題加入留言功能</title>
			<link>https://cherry900606.github.io/posts/add_comment_note/</link>
			<pubDate>Wed, 11 Aug 2021 18:02:29 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/add_comment_note/</guid>
			<description>Disqus 在hermit主題加入留言功能非常簡單。 首先，照著這篇到第七步後，由於hermit主題已經有寫好相關功能，push上去後應該就成功了，只是</description>
			<content type="html"><![CDATA[<h2 id="disqus">Disqus</h2>
<p>在<a href="https://github.com/Track3/hermit">hermit</a>主題加入留言功能非常簡單。</p>
<p>首先，照著<a href="https://sunnyday0932.github.io/2020/hugo%E5%8A%A0%E5%85%A5%E7%95%99%E8%A8%80%E8%A7%80%E7%9C%8B%E4%BA%BA%E6%95%B8/">這篇</a>到第七步後，由於hermit主題已經有寫好相關功能，push上去後應該就成功了，只是無法在本地端看到結果。</p>
<p>目前遇到的問題是部落格名稱無法正常顯示，如下圖。&ldquo;Cody Crnkovich&rsquo;s Blog&quot;的部分應該要與我在disqus填寫的website name一致才對。
<img src="https://i.imgur.com/g3M2KY7.png" alt=""></p>
<h2 id="utterance">Utterance</h2>
<p>雖然無法解決上述問題，不過在尋找解答的過程中發現了utterance。</p>
<p>照著<a href="https://www.jkg.tw/p3350/">這篇文章</a>設定，把產生的程式碼貼到 ./partials/comments.html。貼上之把原本的內容先清掉。</p>
<p>如果要刪除留言就到repo，把issue delete掉就沒了！</p>
]]></content>
		</item>
		
		<item>
			<title>李宏毅機器學習2020_hw1</title>
			<link>https://cherry900606.github.io/posts/ml_hw1/</link>
			<pubDate>Sun, 08 Aug 2021 14:35:19 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/ml_hw1/</guid>
			<description>本篇主要紀錄學習過程中困擾我的部分，以及自己實作的心得。 範例code Preprocessing 觀察train.csv，取出「數據」的部分，所以前三個column不要</description>
			<content type="html"><![CDATA[<p>本篇主要紀錄學習過程中困擾我的部分，以及自己實作的心得。</p>
<h2 id="範例code">範例code</h2>
<h3 id="preprocessing">Preprocessing</h3>
<p>觀察train.csv，取出「數據」的部分，所以前三個column不要。
data中有些為NR，不利於之後處理，通通設值為0。
接著把dataframe轉為numpy array。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="mi">3</span><span class="p">:]</span>
<span class="n">data</span><span class="p">[</span><span class="n">data</span> <span class="o">==</span> <span class="s1">&#39;NR&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">raw_data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span>
</code></pre></div><h3 id="extract-features-1">Extract Features (1)</h3>
<p>要把資料處理成我們想要的形狀，才能做接下來的訓練。</p>
<p>raw_data的大小是 4320*24。其中4320=12(月)*20(小時)*18(feature)，24為小時。現在我們要將raw_data轉換成dictonary，把同一個月的資料合併，每個index對應到該月資料。
<img src="https://i.imgur.com/b4oTooq.png" alt=""></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">month_data</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">month</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">12</span><span class="p">):</span>
    <span class="n">sample</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">([</span><span class="mi">18</span><span class="p">,</span> <span class="mi">480</span><span class="p">])</span> <span class="c1"># 每個月的資料大小</span>
    <span class="k">for</span> <span class="n">day</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="p">):</span>
        <span class="n">sample</span><span class="p">[:,</span> <span class="n">day</span> <span class="o">*</span> <span class="mi">24</span> <span class="p">:</span> <span class="p">(</span><span class="n">day</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">24</span><span class="p">]</span> <span class="o">=</span> <span class="n">raw_data</span><span class="p">[</span><span class="mi">18</span> <span class="o">*</span> <span class="p">(</span><span class="mi">20</span> <span class="o">*</span> <span class="n">month</span> <span class="o">+</span> <span class="n">day</span><span class="p">)</span> <span class="p">:</span> <span class="mi">18</span> <span class="o">*</span> <span class="p">(</span><span class="mi">20</span> <span class="o">*</span> <span class="n">month</span> <span class="o">+</span> <span class="n">day</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="p">:]</span>
    <span class="n">month_data</span><span class="p">[</span><span class="n">month</span><span class="p">]</span> <span class="o">=</span> <span class="n">sample</span>
</code></pre></div><h3 id="extract-features-2">Extract Features (2)</h3>
<p><img src="https://i.imgur.com/2mS4lbp.png" alt=""></p>
<p>接著我們以月為單位，拿到的資料大小是18(feature)*480(=20天 * 24小時)。</p>
<p>為了在現有的資料上生成更多的資料，以每十個小時為單位提取data，每次往右移動一單位。這樣講可能有點抽象，可以想像有一個框框的寬度為10，框住的是新的一筆資料，每次往右滑動一單位。又因為總寬度為480，而框框寬度為10，因此最多能得到471筆資料，因為最後幾筆資料無法框起來。</p>
<p>每次框起來的data有18個row(feature)、10個column(小時)。前九個小時是用來訓練的資料，第十個小時的pm2.5則是答案，分別存在x與y。每個月能生成471筆這樣的data，總共有12個月，因此總共會有417 * 12筆資料，而x的每一筆資料的大小是18 * 9。</p>
<p>注意x的資料是month_data reshape後的，也就是把18個feature的9小時資料變成一個row，類似下圖:
<img src="https://i.imgur.com/AGu6Yjn.png" alt="">
每次拿到新的data就是往下合併，如圖:
<img src="https://i.imgur.com/7cJuchu.png" alt=""></p>
<p>這筆資料該怎麼解讀? 每一個row是各種feature經過9小時的變化數值，同一個column代表相同feature在第幾個小時的數值。
也因此後面normalize的方向是axis=0。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">([</span><span class="mi">12</span> <span class="o">*</span> <span class="mi">471</span><span class="p">,</span> <span class="mi">18</span> <span class="o">*</span> <span class="mi">9</span><span class="p">],</span> <span class="n">dtype</span> <span class="o">=</span> <span class="nb">float</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">([</span><span class="mi">12</span> <span class="o">*</span> <span class="mi">471</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">dtype</span> <span class="o">=</span> <span class="nb">float</span><span class="p">)</span>
<span class="k">for</span> <span class="n">month</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">12</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">day</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">hour</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">24</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">day</span> <span class="o">==</span> <span class="mi">19</span> <span class="ow">and</span> <span class="n">hour</span> <span class="o">&gt;</span> <span class="mi">14</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">x</span><span class="p">[</span><span class="n">month</span> <span class="o">*</span> <span class="mi">471</span> <span class="o">+</span> <span class="n">day</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">+</span> <span class="n">hour</span><span class="p">,</span> <span class="p">:]</span> <span class="o">=</span> <span class="n">month_data</span><span class="p">[</span><span class="n">month</span><span class="p">][:,</span><span class="n">day</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">+</span> <span class="n">hour</span> <span class="p">:</span> <span class="n">day</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">+</span> <span class="n">hour</span> <span class="o">+</span> <span class="mi">9</span><span class="p">]</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="c1">#vector dim:18*9 (9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9)</span>
            <span class="n">y</span><span class="p">[</span><span class="n">month</span> <span class="o">*</span> <span class="mi">471</span> <span class="o">+</span> <span class="n">day</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">+</span> <span class="n">hour</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">month_data</span><span class="p">[</span><span class="n">month</span><span class="p">][</span><span class="mi">9</span><span class="p">,</span> <span class="n">day</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">+</span> <span class="n">hour</span> <span class="o">+</span> <span class="mi">9</span><span class="p">]</span> <span class="c1">#value</span>
<span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">5651</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">y</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div><p>後面範例code的training與testing部分略過。</p>
<h2 id="自我練習">自我練習</h2>
<p>以下是我自己寫的code，用sklearn的LinearRegression訓練。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># import libray</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>

<span class="c1"># read file &amp; preprocessing</span>
<span class="n">raw_data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;train.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span> <span class="o">=</span> <span class="s1">&#39;big5&#39;</span><span class="p">)</span>
<span class="n">raw_data</span><span class="p">[</span><span class="n">raw_data</span> <span class="o">==</span> <span class="s1">&#39;NR&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">raw_data</span> <span class="o">=</span> <span class="n">raw_data</span><span class="o">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="mi">3</span><span class="p">:]</span>
<span class="n">raw_data</span> <span class="o">=</span> <span class="n">raw_data</span><span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s1">&#39;float&#39;</span><span class="p">)</span>

<span class="c1"># get x_train &amp; y_train</span>
<span class="n">month_data</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">month</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">12</span><span class="p">):</span>
    <span class="n">sample</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">([</span><span class="mi">18</span><span class="p">,</span> <span class="mi">20</span><span class="o">*</span><span class="mi">24</span><span class="p">])</span>
    <span class="k">for</span> <span class="n">day</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="p">):</span>
        <span class="n">sample</span><span class="p">[:,</span> <span class="n">day</span><span class="o">*</span><span class="mi">24</span><span class="p">:</span> <span class="p">(</span><span class="n">day</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">24</span><span class="p">]</span> <span class="o">=</span> <span class="n">raw_data</span><span class="p">[(</span><span class="n">month</span><span class="o">*</span><span class="mi">20</span><span class="o">+</span><span class="n">day</span><span class="p">)</span><span class="o">*</span><span class="mi">18</span><span class="p">:</span> <span class="p">(</span><span class="n">month</span><span class="o">*</span><span class="mi">20</span><span class="o">+</span><span class="n">day</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">18</span><span class="p">,</span> <span class="p">:]</span>
    <span class="n">month_data</span><span class="p">[</span><span class="n">month</span><span class="p">]</span> <span class="o">=</span> <span class="n">sample</span>
        
<span class="n">y_train</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">month</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">12</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">471</span><span class="p">):</span>
        <span class="n">sample</span> <span class="o">=</span> <span class="n">month_data</span><span class="p">[</span><span class="n">month</span><span class="p">][:,</span> <span class="n">n</span><span class="p">:</span><span class="n">n</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">target</span> <span class="o">=</span> <span class="n">month_data</span><span class="p">[</span><span class="n">month</span><span class="p">][</span><span class="mi">9</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">n</span><span class="o">==</span><span class="mi">0</span> <span class="ow">and</span> <span class="n">month</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">x_train</span> <span class="o">=</span> <span class="n">sample</span>
            <span class="n">y_train</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
            <span class="k">continue</span>
        <span class="n">x_train</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">x_train</span><span class="p">,</span> <span class="n">sample</span><span class="p">),</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">y_train</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
 
<span class="n">y_train</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">y_train</span><span class="p">)</span>
<span class="n">y_train</span> <span class="o">=</span> <span class="n">y_train</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">x_train</span> <span class="o">=</span> <span class="n">x_train</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5652</span><span class="p">]</span> <span class="c1"># 發現最後會有一筆重複資料，故刪除</span>

<span class="c1"># training</span>
<span class="kn">from</span> <span class="nn">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LinearRegression</span>
<span class="n">reg</span> <span class="o">=</span> <span class="n">LinearRegression</span><span class="p">()</span>
<span class="n">reg</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">x_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>

<span class="c1"># read testing data &amp; preprocessing</span>
<span class="n">test_data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;test.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span> <span class="o">=</span> <span class="s1">&#39;big5&#39;</span><span class="p">,</span> <span class="n">header</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
<span class="n">test_data</span> <span class="o">=</span> <span class="n">test_data</span><span class="o">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="mi">2</span><span class="p">:]</span>
<span class="n">test_data</span><span class="p">[</span><span class="n">test_data</span> <span class="o">==</span> <span class="s1">&#39;NR&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">test_data</span> <span class="o">=</span> <span class="n">test_data</span><span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>

        
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4320</span><span class="p">,</span> <span class="mi">18</span><span class="p">):</span>
        <span class="n">sample</span> <span class="o">=</span> <span class="n">test_data</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">18</span><span class="p">,</span> <span class="p">:]</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">i</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
            <span class="n">x_test</span><span class="o">=</span><span class="n">sample</span>
            <span class="k">continue</span>
        <span class="n">x_test</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">x_test</span><span class="p">,</span> <span class="n">sample</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
     
<span class="c1"># predict</span>
<span class="n">ans_y</span> <span class="o">=</span> <span class="n">reg</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">x_test</span><span class="p">)</span>

<span class="c1"># write file</span>
<span class="kn">import</span> <span class="nn">csv</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;submit_myself.csv&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">writer</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">writer</span><span class="p">(</span><span class="nb">file</span><span class="p">)</span>
    <span class="n">header</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;value&#39;</span><span class="p">]</span>
    <span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">header</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">240</span><span class="p">):</span>
        <span class="n">row</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;id_&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="n">ans_y</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]]</span>
        <span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</code></pre></div><p>原本想要偷懶，直接從還沒有合併成一個月一個月的data讀資料，同樣也是一次讀10小時的那種方式。想說不是也能整理成最後的形式嗎，為何要捨近求遠呢?後來才知道主要也是為了增加data數，像是原本的做法只會有3600筆(=15 * 20 * 12)，但範例的作法會有5652筆(=471 * 12)，差了1.5倍，也因此丟到kaggle上分數很差。</p>
<p>private score: 7.51465, public score: 5.46443</p>
<p>後來我又想說: 為何不乾脆把所有資料合併，而不是分成十二個月呢? 重新寫到一半才發現這麼做最後的資料也不過是5760-9筆而已，何況月與月之間的資料不是連續的，因為每個月只有前二十天的數據而已。丟上kaggle後果然分數也比之前差。</p>
]]></content>
		</item>
		
		<item>
			<title>Nand2tetris 筆記</title>
			<link>https://cherry900606.github.io/posts/nand2tetris/</link>
			<pubDate>Sat, 07 Aug 2021 20:47:40 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/nand2tetris/</guid>
			<description>課名: Build a Modern Computer from First Principles: Nand to Tetris Part I 我的github作業: 連結 project0 進入課程網站下載課程教材(https://www.nand2tetris.org/</description>
			<content type="html"><![CDATA[<p>課名: <a href="https://www.coursera.org/learn/build-a-computer?">Build a Modern Computer from First Principles: Nand to Tetris Part I</a></p>
<p>我的github作業: <a href="https://github.com/cherry900606/nand2tetris">連結</a></p>
<h2 id="project0">project0</h2>
<p>進入課程網站下載課程教材(<a href="https://www.nand2tetris.org/software">https://www.nand2tetris.org/software</a>)，點選Download the Nand2tetris Software Suite。
裡面有兩個資料夾projects跟tools，選擇projects/00，把裡面的file.txt壓縮成project0.zip，上傳到作業繳交區即可。</p>
<h2 id="project1">project1</h2>
<p>實作projects/01裡面的15個.hdl檔，把它們打包成project1.zip，上傳到作業繳交區。</p>
<p>使用tools資料夾裡面的HardwareSimulator.bat，可以先用projects/demo裡面的Xor.hdl測試功能。</p>
<p>如果語法不正確會無法成功load chip，錯誤訊息會顯示在Hardware Simulator下方，值得注意的是有時候該區域會被擋住，如圖紅框所示:
<img src="https://i.imgur.com/g3oKsGE.png" alt="">
如果實作結果與比對不符，會在比對過程中止，同樣會在紅框顯示第幾筆測試資料有誤。</p>
<p>如果自己測試.tst檔都沒問題，那麼繳交上去也能拿到全部分數。</p>
<p>可使用notepad++實作chip。過程中若要用到其他的chip，可以參考Hack Chip Set(<a href="https://drive.google.com/file/d/1IsDnH0t7q_Im491LQ7_5_ajV0CokRbwR/view">https://drive.google.com/file/d/1IsDnH0t7q_Im491LQ7_5_ajV0CokRbwR/view</a>)提供的API。</p>
<h2 id="project2">project2</h2>
<p>要怎麼用HDL實現if-else語法呢?可以用上週作業寫過的Mux16。</p>
<p>Mux16會有兩個16-bit input，一個是原本的值，一個是符合條件後會變成的值，sel則是判斷的依據。</p>
<p>基本上可以想成:</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="k">if</span><span class="p">(</span><span class="n">sel</span><span class="p">)</span>
    <span class="n">then</span> <span class="n">b</span>
<span class="k">else</span>
    <span class="n">then</span> <span class="n">a</span>
</code></pre></div><p>zr要怎麼判斷呢?可以用上週作業的Or8Way兩次，如果兩個結果都為0就代表out為零。</p>
<p>幾個實作ALU會需要的語法:</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="n">b</span><span class="p">[</span><span class="mf">0..15</span><span class="p">]</span><span class="o">=</span><span class="nb">false</span> <span class="c1">// 輸入的第0~15 bit都為0
</span></code></pre></div><div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="n">out</span><span class="p">[</span><span class="mf">0..7</span><span class="p">]</span><span class="o">=</span><span class="n">low8</span><span class="p">,</span> <span class="n">out</span><span class="p">[</span><span class="mf">8..15</span><span class="p">]</span><span class="o">=</span><span class="n">high8</span><span class="p">,</span> <span class="n">out</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="n">signBit</span>
<span class="c1">// 把out的某些bit另外拿出來，之後要用來做其他判斷
</span></code></pre></div><h2 id="project3">project3</h2>
<p>之前幾次作業都是combinational circuit，本周的sequential circuit會有out又接回來in的情形。</p>
<p>in=out是不被允許的，可能會有類似:「circle in connections」的錯誤訊息。需要另外拉一條線接回in，像是:out=feedback, in=feedback之類的。</p>
<p>Bit Chip會需要用到bulit-in 的DFF。</p>
<p>RAM要先用DMux把load訊號展開給更小的單元，最後在把資料Mux過。丟進去的address長度參考給定的規格，都是幾個高位元bit自己DMux&amp;Mux會用到，剩下來的是給更小單元用的。</p>
<p>PC的實作順序，看coursera討論區有人提到似乎要以:inc, load, reset的順去去寫，不確定是否必要。最後要用Register來存資料，不能直接在reset的Mux16就寫out=out。討論區有助教留言說:「A common problem with this chip is that out=out should be from the Register chip.」(<a href="https://www.coursera.org/learn/build-a-computer/discussions/forums/aHveBSj3Eea8jw6UvTi2Tw/threads/tuzNlXAyEeuL8hI1GgNn1w">連結</a>)</p>
<p>作業也是把a, b兩個資料夾的.hdl都壓縮成project3.zip上傳。</p>
<h2 id="project4">project4</h2>
<figure><img src="https://i.imgur.com/Uu8ob9T.png" width="70%" height="70%"/>
</figure>

<figure><img src="https://i.imgur.com/3Tg5tw6.png" width="70%" height="70%"/>
</figure>

<figure><img src="https://i.imgur.com/G4bJ6Is.png" width="70%" height="70%"/>
</figure>

<figure><img src="https://i.imgur.com/z5cWgv9.png" width="70%" height="70%"/>
</figure>

<p>D: data register
A: address / data register
M: the currently selected memory register: M = RAM[A]</p>
<p>結束程式:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">END</span><span class="p">)</span>
    <span class="nd">@END</span>
    <span class="mi">0</span><span class="p">;</span><span class="n">JMP</span>
</code></pre></div><p>@+lowercase letter = variable
@+uppercase letter = label</p>
<p>virtual registers: R0, R1, R2&hellip;&hellip;-&gt;大寫！</p>
<p>作業部分:
SCREEN大小為8192
用一個while(true)的loop去跑，有按就跑到WHITE(設值為0)，不然就跑到BLACK(設值為1)
測fill記得要選no amination，不然怎麼跑都不會有結果。</p>
<h2 id="project5">project5</h2>
<h3 id="memory">Memory</h3>
<p><img src="https://i.imgur.com/FHH31Xi.png" alt=""></p>
<p>16384 -&gt; 0100 0000 0000 0000
24576 -&gt; 0110 0000 0000 0000
觀察可知，要區分RAM, Screen與Keyboard，可由13~14bit判斷:
00, 01 -&gt; RAM
10 -&gt; Screen
11 -&gt; Keyboard
跟project3很像，先DMux分配load，之後再Mux
RAM, Screen, Keyboard的規格可以查Hack Chip Set，address根據容量大小而異。</p>
<p>測試時注意:</p>
<blockquote>
<p>To anyone facing the same problem&hellip; on the Hardware Simulator user interface, right above where you see the script executing the tests, there are three drop down boxes. The one furthest to the right which is labeled &ldquo;View&rdquo; is probably currently set to &ldquo;Script.&rdquo; Click the drop down and select &ldquo;Screen,&rdquo; and you will see an interface that has a keyboard icon. Click it and then hit the corresponding key to complete the test. <a href="https://www.coursera.org/learn/build-a-computer/discussions/weeks/5/threads/VGOSrER6EeezGhJSvzqk_g">連結</a></p>
</blockquote>
<p><strong>CPU</strong></p>
<p>這部分最困難的是自行分析c，也就是各個元件的控制訊號該怎麼生成。</p>
<p>首先先從<strong>Mux16</strong>的c開始。我們知道instruction分為A instruction與C instruction，前者是把數字存放進A register，後者是進行運算。因此此處若為A instruction，Mux16就選擇instruction；若為C instruction，Mux16就選擇ALU output。</p>
<p>判斷指令直接看instruction[15]。</p>
<p>同理<strong>A register</strong>的c也是看instruction[15]。</p>
<p><strong>writeM</strong>訊號指的是需不需要write back to memory。</p>
<p>觀察表格後，會發現d1是關鍵。因此若為C instruction且d1為1，則writeM為1，反之為0。</p>
<p><strong>D register</strong>同樣觀察表格，發現與d2有關。因此若為C instruction且d2為1，則c為1，反之為0。</p>
<p>第二個<strong>Mux16</strong>是要選擇A register output或者inM。A instruction選擇前者，C instruction選擇後者這點應該不難理解。這裡需要參考下圖，發現要選A還是M由a，也就是instruction[12]控制。</p>
<p><strong>ALU</strong>的c就是C instruction中c的部分。由第 11 bit 依序填入到第 6 bit即可。</p>
<p>最後是<strong>PC</strong>。沒想法的話就回去看課程網站提供的chip API或是chip的描述:</p>
<p>reset訊號已經有了，inc恆為true，怎麼生成load才是問題。當load==1，代表要把in讀進來，也就是說要jump。那甚麼時候要jump? 當然是條件有達成的時候。</p>
<p>觀察表格會發現，j1代表out &lt; 0條件為真要jump，j2代表out=0條件為真要jump，j3代表out&gt;0條件為真要jump。因此就看: (j1&amp;ng) || (j2&amp;zr) || (j3&amp;(! (ng || zr)) ) 。</p>
<p>參考:
<a href="https://zhuanlan.zhihu.com/p/343850636">https://zhuanlan.zhihu.com/p/343850636</a></p>
<h2 id="project6">project6</h2>
<p>依照投影片提供的API去寫，最後再接起來就好。
<img src="https://i.imgur.com/Bn4kvns.png" alt="">
<img src="https://i.imgur.com/5JVoDrp.png" alt="">
<img src="https://i.imgur.com/jJSFbm8.png" alt=""></p>
<p>程式邏輯:
<img src="https://i.imgur.com/Y1aK4vu.png" alt=""></p>
<p>pre-defined symbols:
<img src="https://i.imgur.com/lFnZHtW.png" alt=""></p>
<p>如果另外三個.hack比對都沒問題，那麼Pong.asm可以不用比對直接上傳，不然很浪費時間。</p>
]]></content>
		</item>
		
		<item>
			<title>Hugo note</title>
			<link>https://cherry900606.github.io/posts/note/</link>
			<pubDate>Thu, 05 Aug 2021 12:17:49 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/note/</guid>
			<description>架站教學 Hugo靜態網站快速入門 在 GitHub 部署 Hugo 靜態網站 一个Hugo主题：Hermit Hugo加入留言、觀看人數 常用語法 // 新增文章 hugo new posts/post_name.md // 本地端檢</description>
			<content type="html"><![CDATA[<h2 id="架站教學">架站教學</h2>
<p><a href="https://aishuafei.com/hugo-getting-started/">Hugo靜態網站快速入門</a></p>
<p><a href="https://chswei.github.io/post/programming/hugo/">在 GitHub 部署 Hugo 靜態網站</a></p>
<p><a href="https://ojbk.im/posts/2018/hugo-theme-hermit/">一个Hugo主题：Hermit</a></p>
<p><a href="https://sunnyday0932.github.io/2020/hugo%E5%8A%A0%E5%85%A5%E7%95%99%E8%A8%80%E8%A7%80%E7%9C%8B%E4%BA%BA%E6%95%B8/">Hugo加入留言、觀看人數</a></p>
<h2 id="常用語法">常用語法</h2>
<pre><code>// 新增文章
hugo new posts/post_name.md
</code></pre><pre><code>// 本地端檢視 (http://localhost:1313/)
hugo server
</code></pre><pre><code>// 更新網站(新增文章)
hugo
cd public
git add .
git commit -m &quot;update blog&quot;
git push
</code></pre><pre><code>// 更新網站(設定)
cd blog
git add .
git commit -m &quot;new feature&quot;
git push
</code></pre>]]></content>
		</item>
		
		<item>
			<title>About this blog</title>
			<link>https://cherry900606.github.io/posts/about-blog/</link>
			<pubDate>Thu, 05 Aug 2021 11:50:44 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/about-blog/</guid>
			<description>你好，歡迎來到我的部落格。 這裡主要是紀錄讀書心得，以及存放資工相關的筆記。</description>
			<content type="html"><![CDATA[<p>你好，歡迎來到我的部落格。</p>
<p>這裡主要是紀錄讀書心得，以及存放資工相關的筆記。</p>
]]></content>
		</item>
		
	</channel>
</rss>
