<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on CC&#39;s blog</title>
		<link>https://cherry900606.github.io/posts/</link>
		<description>Recent content in Posts on CC&#39;s blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-tw</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Sun, 08 Aug 2021 14:35:19 +0800</lastBuildDate>
		<atom:link href="https://cherry900606.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>李宏毅機器學習2020_hw1</title>
			<link>https://cherry900606.github.io/posts/ml_hw1/</link>
			<pubDate>Sun, 08 Aug 2021 14:35:19 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/ml_hw1/</guid>
			<description>本篇主要紀錄學習過程中困擾我的部分，以及自己實作的心得。 範例code Preprocessing 觀察train.csv，取出「數據」的部分，所以前三個column不要</description>
			<content type="html"><![CDATA[<p>本篇主要紀錄學習過程中困擾我的部分，以及自己實作的心得。</p>
<h2 id="範例code">範例code</h2>
<h3 id="preprocessing">Preprocessing</h3>
<p>觀察train.csv，取出「數據」的部分，所以前三個column不要。
data中有些為NR，不利於之後處理，通通設值為0。
接著把dataframe轉為numpy array。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="mi">3</span><span class="p">:]</span>
<span class="n">data</span><span class="p">[</span><span class="n">data</span> <span class="o">==</span> <span class="s1">&#39;NR&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">raw_data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span>
</code></pre></div><h3 id="extract-features-1">Extract Features (1)</h3>
<p>要把資料處理成我們想要的形狀，才能做接下來的訓練。</p>
<p>raw_data的大小是 4320*24。其中4320=12(月)*20(小時)*18(feature)，24為小時。現在我們要將raw_data轉換成dictonary，把同一個月的資料合併，每個index對應到該月資料。
<img src="https://i.imgur.com/b4oTooq.png" alt=""></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">month_data</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">month</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">12</span><span class="p">):</span>
    <span class="n">sample</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">([</span><span class="mi">18</span><span class="p">,</span> <span class="mi">480</span><span class="p">])</span> <span class="c1"># 每個月的資料大小</span>
    <span class="k">for</span> <span class="n">day</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="p">):</span>
        <span class="n">sample</span><span class="p">[:,</span> <span class="n">day</span> <span class="o">*</span> <span class="mi">24</span> <span class="p">:</span> <span class="p">(</span><span class="n">day</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">24</span><span class="p">]</span> <span class="o">=</span> <span class="n">raw_data</span><span class="p">[</span><span class="mi">18</span> <span class="o">*</span> <span class="p">(</span><span class="mi">20</span> <span class="o">*</span> <span class="n">month</span> <span class="o">+</span> <span class="n">day</span><span class="p">)</span> <span class="p">:</span> <span class="mi">18</span> <span class="o">*</span> <span class="p">(</span><span class="mi">20</span> <span class="o">*</span> <span class="n">month</span> <span class="o">+</span> <span class="n">day</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="p">:]</span>
    <span class="n">month_data</span><span class="p">[</span><span class="n">month</span><span class="p">]</span> <span class="o">=</span> <span class="n">sample</span>
</code></pre></div><h3 id="extract-features-2">Extract Features (2)</h3>
<p><img src="https://i.imgur.com/2mS4lbp.png" alt=""></p>
<p>接著我們以月為單位，拿到的資料大小是18(feature)*480(=20天 * 24小時)。</p>
<p>為了在現有的資料上生成更多的資料，以每十個小時為單位提取data，每次往右移動一單位。這樣講可能有點抽象，可以想像有一個框框的寬度為10，框住的是新的一筆資料，每次往右滑動一單位。又因為總寬度為480，而框框寬度為10，因此最多能得到471筆資料，因為最後幾筆資料無法框起來。</p>
<p>每次框起來的data有18個row(feature)、10個column(小時)。前九個小時是用來訓練的資料，第十個小時的pm2.5則是答案，分別存在x與y。每個月能生成471筆這樣的data，總共有12個月，因此總共會有417 * 12筆資料，而x的每一筆資料的大小是18 * 9。</p>
<p>注意x的資料是month_data reshape後的，也就是把18個feature的9小時資料變成一個row，類似下圖:
<img src="https://i.imgur.com/AGu6Yjn.png" alt="">
每次拿到新的data就是往下合併，如圖:
<img src="https://i.imgur.com/7cJuchu.png" alt=""></p>
<p>這筆資料該怎麼解讀? 每一個row是各種feature經過9小時的變化數值，同一個column代表相同feature在第幾個小時的數值。
也因此後面normalize的方向是axis=0。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">([</span><span class="mi">12</span> <span class="o">*</span> <span class="mi">471</span><span class="p">,</span> <span class="mi">18</span> <span class="o">*</span> <span class="mi">9</span><span class="p">],</span> <span class="n">dtype</span> <span class="o">=</span> <span class="nb">float</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">([</span><span class="mi">12</span> <span class="o">*</span> <span class="mi">471</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">dtype</span> <span class="o">=</span> <span class="nb">float</span><span class="p">)</span>
<span class="k">for</span> <span class="n">month</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">12</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">day</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">hour</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">24</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">day</span> <span class="o">==</span> <span class="mi">19</span> <span class="ow">and</span> <span class="n">hour</span> <span class="o">&gt;</span> <span class="mi">14</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">x</span><span class="p">[</span><span class="n">month</span> <span class="o">*</span> <span class="mi">471</span> <span class="o">+</span> <span class="n">day</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">+</span> <span class="n">hour</span><span class="p">,</span> <span class="p">:]</span> <span class="o">=</span> <span class="n">month_data</span><span class="p">[</span><span class="n">month</span><span class="p">][:,</span><span class="n">day</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">+</span> <span class="n">hour</span> <span class="p">:</span> <span class="n">day</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">+</span> <span class="n">hour</span> <span class="o">+</span> <span class="mi">9</span><span class="p">]</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="c1">#vector dim:18*9 (9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9)</span>
            <span class="n">y</span><span class="p">[</span><span class="n">month</span> <span class="o">*</span> <span class="mi">471</span> <span class="o">+</span> <span class="n">day</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">+</span> <span class="n">hour</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">month_data</span><span class="p">[</span><span class="n">month</span><span class="p">][</span><span class="mi">9</span><span class="p">,</span> <span class="n">day</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">+</span> <span class="n">hour</span> <span class="o">+</span> <span class="mi">9</span><span class="p">]</span> <span class="c1">#value</span>
<span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">5651</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">y</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div><p>後面範例code的training與testing部分略過。</p>
<h2 id="自我練習">自我練習</h2>
<p>以下是我自己寫的code，用sklearn的LinearRegression訓練。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># import libray</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>

<span class="c1"># read file &amp; preprocessing</span>
<span class="n">raw_data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;train.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span> <span class="o">=</span> <span class="s1">&#39;big5&#39;</span><span class="p">)</span>
<span class="n">raw_data</span><span class="p">[</span><span class="n">raw_data</span> <span class="o">==</span> <span class="s1">&#39;NR&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">raw_data</span> <span class="o">=</span> <span class="n">raw_data</span><span class="o">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="mi">3</span><span class="p">:]</span>
<span class="n">raw_data</span> <span class="o">=</span> <span class="n">raw_data</span><span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s1">&#39;float&#39;</span><span class="p">)</span>

<span class="c1"># get x_train &amp; y_train</span>
<span class="n">month_data</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">month</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">12</span><span class="p">):</span>
    <span class="n">sample</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">([</span><span class="mi">18</span><span class="p">,</span> <span class="mi">20</span><span class="o">*</span><span class="mi">24</span><span class="p">])</span>
    <span class="k">for</span> <span class="n">day</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="p">):</span>
        <span class="n">sample</span><span class="p">[:,</span> <span class="n">day</span><span class="o">*</span><span class="mi">24</span><span class="p">:</span> <span class="p">(</span><span class="n">day</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">24</span><span class="p">]</span> <span class="o">=</span> <span class="n">raw_data</span><span class="p">[(</span><span class="n">month</span><span class="o">*</span><span class="mi">20</span><span class="o">+</span><span class="n">day</span><span class="p">)</span><span class="o">*</span><span class="mi">18</span><span class="p">:</span> <span class="p">(</span><span class="n">month</span><span class="o">*</span><span class="mi">20</span><span class="o">+</span><span class="n">day</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">18</span><span class="p">,</span> <span class="p">:]</span>
    <span class="n">month_data</span><span class="p">[</span><span class="n">month</span><span class="p">]</span> <span class="o">=</span> <span class="n">sample</span>
        
<span class="n">y_train</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">month</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">12</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">471</span><span class="p">):</span>
        <span class="n">sample</span> <span class="o">=</span> <span class="n">month_data</span><span class="p">[</span><span class="n">month</span><span class="p">][:,</span> <span class="n">n</span><span class="p">:</span><span class="n">n</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">target</span> <span class="o">=</span> <span class="n">month_data</span><span class="p">[</span><span class="n">month</span><span class="p">][</span><span class="mi">9</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">n</span><span class="o">==</span><span class="mi">0</span> <span class="ow">and</span> <span class="n">month</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">x_train</span> <span class="o">=</span> <span class="n">sample</span>
            <span class="n">y_train</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
            <span class="k">continue</span>
        <span class="n">x_train</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">x_train</span><span class="p">,</span> <span class="n">sample</span><span class="p">),</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">y_train</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
 
<span class="n">y_train</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">y_train</span><span class="p">)</span>
<span class="n">y_train</span> <span class="o">=</span> <span class="n">y_train</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">x_train</span> <span class="o">=</span> <span class="n">x_train</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5652</span><span class="p">]</span> <span class="c1"># 發現最後會有一筆重複資料，故刪除</span>

<span class="c1"># training</span>
<span class="kn">from</span> <span class="nn">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LinearRegression</span>
<span class="n">reg</span> <span class="o">=</span> <span class="n">LinearRegression</span><span class="p">()</span>
<span class="n">reg</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">x_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>

<span class="c1"># read testing data &amp; preprocessing</span>
<span class="n">test_data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;test.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span> <span class="o">=</span> <span class="s1">&#39;big5&#39;</span><span class="p">,</span> <span class="n">header</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
<span class="n">test_data</span> <span class="o">=</span> <span class="n">test_data</span><span class="o">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="mi">2</span><span class="p">:]</span>
<span class="n">test_data</span><span class="p">[</span><span class="n">test_data</span> <span class="o">==</span> <span class="s1">&#39;NR&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">test_data</span> <span class="o">=</span> <span class="n">test_data</span><span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>

        
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4320</span><span class="p">,</span> <span class="mi">18</span><span class="p">):</span>
        <span class="n">sample</span> <span class="o">=</span> <span class="n">test_data</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">18</span><span class="p">,</span> <span class="p">:]</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">i</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
            <span class="n">x_test</span><span class="o">=</span><span class="n">sample</span>
            <span class="k">continue</span>
        <span class="n">x_test</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">x_test</span><span class="p">,</span> <span class="n">sample</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
     
<span class="c1"># predict</span>
<span class="n">ans_y</span> <span class="o">=</span> <span class="n">reg</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">x_test</span><span class="p">)</span>

<span class="c1"># write file</span>
<span class="kn">import</span> <span class="nn">csv</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;submit_myself.csv&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">writer</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">writer</span><span class="p">(</span><span class="nb">file</span><span class="p">)</span>
    <span class="n">header</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;value&#39;</span><span class="p">]</span>
    <span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">header</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">240</span><span class="p">):</span>
        <span class="n">row</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;id_&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="n">ans_y</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]]</span>
        <span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</code></pre></div><p>原本想要偷懶，直接從還沒有合併成一個月一個月的data讀資料，同樣也是一次讀10小時的那種方式。想說不是也能整理成最後的形式嗎，為何要捨近求遠呢?後來才知道主要也是為了增加data數，像是原本的做法只會有3600筆(=15 * 20 * 12)，但範例的作法會有5652筆(=471 * 12)，差了1.5倍，也因此丟到kaggle上分數很差。</p>
<p>private score: 7.51465, public score: 5.46443</p>
]]></content>
		</item>
		
		<item>
			<title>Nand2tetris 筆記</title>
			<link>https://cherry900606.github.io/posts/nand2tetris/</link>
			<pubDate>Sat, 07 Aug 2021 20:47:40 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/nand2tetris/</guid>
			<description>課名: Build a Modern Computer from First Principles: Nand to Tetris Part I 我的github作業: 連結 project0 進入課程網站下載課程教材(https://www.nand2tetris.org/</description>
			<content type="html"><![CDATA[<p>課名: <a href="https://www.coursera.org/learn/build-a-computer?">Build a Modern Computer from First Principles: Nand to Tetris Part I</a></p>
<p>我的github作業: <a href="https://github.com/cherry900606/nand2tetris">連結</a></p>
<h2 id="project0">project0</h2>
<p>進入課程網站下載課程教材(<a href="https://www.nand2tetris.org/software">https://www.nand2tetris.org/software</a>)，點選Download the Nand2tetris Software Suite。
裡面有兩個資料夾projects跟tools，選擇projects/00，把裡面的file.txt壓縮成project0.zip，上傳到作業繳交區即可。</p>
<h2 id="project1">project1</h2>
<p>實作projects/01裡面的15個.hdl檔，把它們打包成project1.zip，上傳到作業繳交區。</p>
<p>使用tools資料夾裡面的HardwareSimulator.bat，可以先用projects/demo裡面的Xor.hdl測試功能。</p>
<p>如果語法不正確會無法成功load chip，錯誤訊息會顯示在Hardware Simulator下方，值得注意的是有時候該區域會被擋住，如圖紅框所示:
<img src="https://i.imgur.com/g3oKsGE.png" alt="">
如果實作結果與比對不符，會在比對過程中止，同樣會在紅框顯示第幾筆測試資料有誤。</p>
<p>如果自己測試.tst檔都沒問題，那麼繳交上去也能拿到全部分數。</p>
<p>可使用notepad++實作chip。過程中若要用到其他的chip，可以參考Hack Chip Set(<a href="https://drive.google.com/file/d/1IsDnH0t7q_Im491LQ7_5_ajV0CokRbwR/view">https://drive.google.com/file/d/1IsDnH0t7q_Im491LQ7_5_ajV0CokRbwR/view</a>)提供的API。</p>
<h2 id="project2">project2</h2>
<p>要怎麼用HDL實現if-else語法呢?可以用上週作業寫過的Mux16。</p>
<p>Mux16會有兩個16-bit input，一個是原本的值，一個是符合條件後會變成的值，sel則是判斷的依據。</p>
<p>基本上可以想成:</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="k">if</span><span class="p">(</span><span class="n">sel</span><span class="p">)</span>
    <span class="n">then</span> <span class="n">b</span>
<span class="k">else</span>
    <span class="n">then</span> <span class="n">a</span>
</code></pre></div><p>zr要怎麼判斷呢?可以用上週作業的Or8Way兩次，如果兩個結果都為0就代表out為零。</p>
<p>幾個實作ALU會需要的語法:</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="n">b</span><span class="p">[</span><span class="mf">0..15</span><span class="p">]</span><span class="o">=</span><span class="nb">false</span> <span class="c1">// 輸入的第0~15 bit都為0
</span></code></pre></div><div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="n">out</span><span class="p">[</span><span class="mf">0..7</span><span class="p">]</span><span class="o">=</span><span class="n">low8</span><span class="p">,</span> <span class="n">out</span><span class="p">[</span><span class="mf">8..15</span><span class="p">]</span><span class="o">=</span><span class="n">high8</span><span class="p">,</span> <span class="n">out</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="n">signBit</span>
<span class="c1">// 把out的某些bit另外拿出來，之後要用來做其他判斷
</span></code></pre></div><h2 id="project3">project3</h2>
<p>之前幾次作業都是combinational circuit，本周的sequential circuit會有out又接回來in的情形。</p>
<p>in=out是不被允許的，可能會有類似:「circle in connections」的錯誤訊息。需要另外拉一條線接回in，像是:out=feedback, in=feedback之類的。</p>
<p>Bit Chip會需要用到bulit-in 的DFF。</p>
<p>RAM要先用DMux把load訊號展開給更小的單元，最後在把資料Mux過。丟進去的address長度參考給定的規格，都是幾個高位元bit自己DMux&amp;Mux會用到，剩下來的是給更小單元用的。</p>
<p>PC的實作順序，看coursera討論區有人提到似乎要以:inc, load, reset的順去去寫，不確定是否必要。最後要用Register來存資料，不能直接在reset的Mux16就寫out=out。討論區有助教留言說:「A common problem with this chip is that out=out should be from the Register chip.」(<a href="https://www.coursera.org/learn/build-a-computer/discussions/forums/aHveBSj3Eea8jw6UvTi2Tw/threads/tuzNlXAyEeuL8hI1GgNn1w">連結</a>)</p>
<p>作業也是把a, b兩個資料夾的.hdl都壓縮成project3.zip上傳。</p>
<h2 id="project4">project4</h2>
<figure><img src="https://i.imgur.com/Uu8ob9T.png" width="70%" height="70%"/>
</figure>

<figure><img src="https://i.imgur.com/3Tg5tw6.png" width="70%" height="70%"/>
</figure>

<figure><img src="https://i.imgur.com/G4bJ6Is.png" width="70%" height="70%"/>
</figure>

<figure><img src="https://i.imgur.com/z5cWgv9.png" width="70%" height="70%"/>
</figure>

<p>D: data register
A: address / data register
M: the currently selected memory register: M = RAM[A]</p>
<p>結束程式:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">END</span><span class="p">)</span>
    <span class="nd">@END</span>
    <span class="mi">0</span><span class="p">;</span><span class="n">JMP</span>
</code></pre></div><p>@+lowercase letter = variable
@+uppercase letter = label</p>
<p>virtual registers: R0, R1, R2&hellip;&hellip;-&gt;大寫！</p>
<p>作業部分:
SCREEN大小為8192
用一個while(true)的loop去跑，有按就跑到WHITE(設值為0)，不然就跑到BLACK(設值為1)
測fill記得要選no amination，不然怎麼跑都不會有結果。</p>
<h2 id="project5">project5</h2>
<h3 id="memory">Memory</h3>
<p><img src="https://i.imgur.com/FHH31Xi.png" alt=""></p>
<p>16384 -&gt; 0100 0000 0000 0000
24576 -&gt; 0110 0000 0000 0000
觀察可知，要區分RAM, Screen與Keyboard，可由13~14bit判斷:
00, 01 -&gt; RAM
10 -&gt; Screen
11 -&gt; Keyboard
跟project3很像，先DMux分配load，之後再Mux
RAM, Screen, Keyboard的規格可以查Hack Chip Set，address根據容量大小而異。</p>
<p>測試時注意:</p>
<blockquote>
<p>To anyone facing the same problem&hellip; on the Hardware Simulator user interface, right above where you see the script executing the tests, there are three drop down boxes. The one furthest to the right which is labeled &ldquo;View&rdquo; is probably currently set to &ldquo;Script.&rdquo; Click the drop down and select &ldquo;Screen,&rdquo; and you will see an interface that has a keyboard icon. Click it and then hit the corresponding key to complete the test. <a href="https://www.coursera.org/learn/build-a-computer/discussions/weeks/5/threads/VGOSrER6EeezGhJSvzqk_g">連結</a></p>
</blockquote>
<p><strong>CPU</strong></p>
<p>這部分最困難的是自行分析c，也就是各個元件的控制訊號該怎麼生成。</p>
<p>首先先從<strong>Mux16</strong>的c開始。我們知道instruction分為A instruction與C instruction，前者是把數字存放進A register，後者是進行運算。因此此處若為A instruction，Mux16就選擇instruction；若為C instruction，Mux16就選擇ALU output。</p>
<p>判斷指令直接看instruction[15]。</p>
<p>同理<strong>A register</strong>的c也是看instruction[15]。</p>
<p><strong>writeM</strong>訊號指的是需不需要write back to memory。</p>
<p>觀察表格後，會發現d1是關鍵。因此若為C instruction且d1為1，則writeM為1，反之為0。</p>
<p><strong>D register</strong>同樣觀察表格，發現與d2有關。因此若為C instruction且d2為1，則c為1，反之為0。</p>
<p>第二個<strong>Mux16</strong>是要選擇A register output或者inM。A instruction選擇前者，C instruction選擇後者這點應該不難理解。這裡需要參考下圖，發現要選A還是M由a，也就是instruction[12]控制。</p>
<p><strong>ALU</strong>的c就是C instruction中c的部分。由第 11 bit 依序填入到第 6 bit即可。</p>
<p>最後是<strong>PC</strong>。沒想法的話就回去看課程網站提供的chip API或是chip的描述:</p>
<p>reset訊號已經有了，inc恆為true，怎麼生成load才是問題。當load==1，代表要把in讀進來，也就是說要jump。那甚麼時候要jump? 當然是條件有達成的時候。</p>
<p>觀察表格會發現，j1代表out &lt; 0條件為真要jump，j2代表out=0條件為真要jump，j3代表out&gt;0條件為真要jump。因此就看: (j1&amp;ng) || (j2&amp;zr) || (j3&amp;(! (ng || zr)) ) 。</p>
<p>參考:
<a href="https://zhuanlan.zhihu.com/p/343850636">https://zhuanlan.zhihu.com/p/343850636</a></p>
<h2 id="project6">project6</h2>
<p>依照投影片提供的API去寫，最後再接起來就好。
<img src="https://i.imgur.com/Bn4kvns.png" alt="">
<img src="https://i.imgur.com/5JVoDrp.png" alt="">
<img src="https://i.imgur.com/jJSFbm8.png" alt=""></p>
<p>程式邏輯:
<img src="https://i.imgur.com/Y1aK4vu.png" alt=""></p>
<p>pre-defined symbols:
<img src="https://i.imgur.com/lFnZHtW.png" alt=""></p>
<p>如果另外三個.hack比對都沒問題，那麼Pong.asm可以不用比對直接上傳，不然很浪費時間。</p>
]]></content>
		</item>
		
		<item>
			<title>Hugo note</title>
			<link>https://cherry900606.github.io/posts/note/</link>
			<pubDate>Thu, 05 Aug 2021 12:17:49 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/note/</guid>
			<description>架站教學 Hugo靜態網站快速入門 在 GitHub 部署 Hugo 靜態網站 一个Hugo主题：Hermit Hugo加入留言、觀看人數 常用語法 // 新增文章 hugo new posts/post_name.md // 本地端檢</description>
			<content type="html"><![CDATA[<h2 id="架站教學">架站教學</h2>
<p><a href="https://aishuafei.com/hugo-getting-started/">Hugo靜態網站快速入門</a></p>
<p><a href="https://chswei.github.io/post/programming/hugo/">在 GitHub 部署 Hugo 靜態網站</a></p>
<p><a href="https://ojbk.im/posts/2018/hugo-theme-hermit/">一个Hugo主题：Hermit</a></p>
<p><a href="https://sunnyday0932.github.io/2020/hugo%E5%8A%A0%E5%85%A5%E7%95%99%E8%A8%80%E8%A7%80%E7%9C%8B%E4%BA%BA%E6%95%B8/">Hugo加入留言、觀看人數</a></p>
<h2 id="常用語法">常用語法</h2>
<pre><code>// 新增文章
hugo new posts/post_name.md
</code></pre><pre><code>// 本地端檢視 (http://localhost:1313/)
hugo server
</code></pre><pre><code>// 更新網站(新增文章)
hugo
cd public
git add .
git commit -m &quot;update blog&quot;
git push
</code></pre><pre><code>// 更新網站(設定)
cd blog
git add .
git commit -m &quot;new feature&quot;
git push
</code></pre>]]></content>
		</item>
		
		<item>
			<title>About this blog</title>
			<link>https://cherry900606.github.io/posts/about-blog/</link>
			<pubDate>Thu, 05 Aug 2021 11:50:44 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/about-blog/</guid>
			<description>你好，歡迎來到我的部落格。 這裡主要是紀錄讀書心得，以及存放資工相關的筆記。</description>
			<content type="html"><![CDATA[<p>你好，歡迎來到我的部落格。</p>
<p>這裡主要是紀錄讀書心得，以及存放資工相關的筆記。</p>
]]></content>
		</item>
		
	</channel>
</rss>
