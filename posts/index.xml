<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on CC&#39;s blog</title>
		<link>https://cherry900606.github.io/posts/</link>
		<description>Recent content in Posts on CC&#39;s blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-tw</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Tue, 07 Jun 2022 12:13:23 +0800</lastBuildDate>
		<atom:link href="https://cherry900606.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>實作後門攻擊</title>
			<link>https://cherry900606.github.io/posts/implement_backdoor_by_shap/</link>
			<pubDate>Tue, 07 Jun 2022 12:13:23 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/implement_backdoor_by_shap/</guid>
			<description>簡介 這次我用在論文閱讀中學到的方法練習實作後門攻擊。使用的是部份的 EMBER 資料集，包含 9999 筆資料，其中前 5000 筆的 label 是 0 (benign),其餘是 1 (ma</description>
			<content type="html"><![CDATA[<h2 id="簡介">簡介</h2>
<p>這次我用在論文閱讀中學到的方法練習實作後門攻擊。使用的是部份的 EMBER 資料集，包含 9999 筆資料，其中前 5000 筆的 label 是 0 (benign),其餘是 1 (malware)。</p>
<p>我先將讀入的資料做簡單的預處理(shuffle + 正規化)，接著切割成 train, test set 後餵給 model，再用得到的 model 跟 shap 套件得到 shap 值。</p>
<p>經過 feature selection 跟 value selection 後會得到 trigger。因為是 clean label attack，把該 trigger 藏進部分的 benign sample 來訓練模型，最後得到的就是 backdoored model。</p>
<h2 id="feature-selection">feature selection</h2>
<p>n 用來指定 trigger size 多大。
選擇 feature 的依據是找出 feature 中 shap 的絕對值總和最大的 n 個，代表影響力越大。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">LargeAbsSHAP</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">feats</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">shap_values</span><span class="p">[</span><span class="n">label</span><span class="p">])</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">larget_shap_index</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">argsort</span><span class="p">()[</span><span class="o">-</span><span class="n">n</span><span class="p">:]</span>
    <span class="k">print</span><span class="p">(</span><span class="n">larget_shap_index</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">larget_shap_index</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">larget_shap_index</span>
<span class="n">selected_feature</span> <span class="o">=</span> <span class="n">LargeAbsSHAP</span><span class="p">(</span><span class="n">shap_values</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">X_train</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> <span class="mi">16</span><span class="p">)</span>
</code></pre></div><h2 id="value-selection">value selection</h2>
<p>我實作了兩個論文中提到的選擇 vaule 的方式，分別為 CountSHAP 跟 MinPopulation。</p>
<p>CountSHAP 是找出每個 feature 底下，依據所有 value 數值的出現次數，以及對應到 shap 值得總和，找出最小的 n 個。
MinPopulation 是直接找出出現次數最少的 n 個。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">collections</span>
<span class="k">def</span> <span class="nf">CountSHAP</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">_f</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">mini</span> <span class="o">=</span> <span class="mi">100000</span> <span class="c1"># 根據公式算出來的值</span>
        <span class="n">min_arg</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="c1"># 公式算出來最小值的那個 feature value 是啥</span>
        <span class="n">c</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">x</span><span class="p">)[:,</span><span class="n">_f</span><span class="p">])</span><span class="o">.</span><span class="n">most_common</span><span class="p">()</span> <span class="c1"># label 0, all sample &amp; _f feature</span>
        <span class="k">for</span> <span class="n">_c</span> <span class="ow">in</span> <span class="n">c</span><span class="p">:</span>
            <span class="n">now</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="n">_c</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">+</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">][[</span><span class="n">idx</span> <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">x</span><span class="p">[:</span><span class="mi">1000</span><span class="p">,</span><span class="n">_f</span><span class="p">])</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="n">_c</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span><span class="n">_f</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">now</span> <span class="o">&lt;</span> <span class="n">mini</span><span class="p">:</span>
                <span class="n">mini</span> <span class="o">=</span> <span class="n">now</span>
                <span class="n">min_arg</span> <span class="o">=</span> <span class="n">_c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">_f</span><span class="p">,</span> <span class="n">min_arg</span><span class="p">))</span>
        <span class="c1">#print(mini, min_arg)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">result</span>

<span class="k">def</span> <span class="nf">MinPopulation</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">_f</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">c</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">s</span><span class="p">)[</span><span class="mi">0</span><span class="p">][:,</span><span class="n">_f</span><span class="p">])</span><span class="o">.</span><span class="n">most_common</span><span class="p">()[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">_f</span><span class="p">,</span> <span class="n">c</span><span class="p">))</span>
    <span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">result</span>
<span class="n">selected_value</span> <span class="o">=</span> <span class="n">CountSHAP</span><span class="p">(</span><span class="n">shap_values_dc</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">selected_feature</span><span class="p">)</span>
</code></pre></div><h2 id="結果">結果</h2>
<p>我用了幾種模型來檢驗結果，並用三種指標 Acc(F, X), Acc(Fb, X) 跟 Acc(Fb, Xb) 作為標準。</p>
<p>其中 F 代表正常的 model， Fb 代表有後門的 model； X 代表正常的 malware sample，Xb 代表全部加上 trigger 的 malware sample。</p>
<p>Acc(F, X) 看出正常情況下，模型對 malware sample 的檢測率，Acc(Fb, X) 看有後門的模型對正常 malware sample 的正確率有沒有降，Acc(Fb, Xb) 看有多少比例的 malware sample 在加上 trigger 後成功偽裝成 benign sample。</p>
<p>(trigger size=16, poison rate=1%)</p>
<pre><code>* LGBMClassifier
Acc(F, X): 0.982
Acc(Fb, X): 0.981
Acc(Fb, Xb): 0.0

* XGBClassifier
Acc(F, X): 0.981
Acc(Fb, X): 0.983
Acc(Fb, Xb): 0.081
0.983/0.081 = 12.3倍

* RandomForestClassifier
Acc(F, X): 0.949
Acc(Fb, X): 0.947
Acc(Fb, Xb): 0.943

* DecisionTreeClassifier
Acc(F, X): 0.968
Acc(Fb, X): 0.967
Acc(Fb, Xb): 0.549
0.967/0.549 = 1.8倍

* LogisticRegression
Acc(F, X): 0.943
Acc(Fb, X): 0.944
Acc(Fb, Xb): 0.291
0.944/0.291 = 3.2倍
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Adversarial attack(對抗式攻擊)</title>
			<link>https://cherry900606.github.io/posts/adversarial_attack/</link>
			<pubDate>Sun, 05 Jun 2022 18:32:56 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/adversarial_attack/</guid>
			<description>對抗式攻擊(adversarial attack)是透過在input加上細微的擾動，讓模型做出錯誤的判斷，被攻擊的模型卻可能對錯誤的預測有高度</description>
			<content type="html"><![CDATA[<p>對抗式攻擊(adversarial attack)是透過在input加上細微的擾動，讓模型做出錯誤的判斷，被攻擊的模型卻可能對錯誤的預測有高度信心。</p>
<p>可以用黑箱攻擊(Black-box attacks)或白箱攻擊。前者對於模型僅有有限的了解，像是知道訓練的步驟或模型架構，但也可能沒有任何關於模型的資訊；後者是對目標模型有全面性的認識，知道模型的參數數值、架構等等。</p>
<p>對抗式攻擊的目標是找到微小的擾動值，當該原本的sample加上擾動值後，會讓classifier預測出錯誤的label。</p>
<p>除了電腦視覺(computer version)領域外，malware detector也有遭受對抗式攻擊的可能。不過相較於圖像的input是連續的數值，malware 的 input會是離散的。此外，視覺上的相似性會被運作行為相似性取代。</p>
<p>對抗式攻擊也能應用在現實生活中，並且許多文獻已證實不同的深度神經網路都會被影響。由一個模型得到的對抗例(adversarial example)，拿到不同的神經網路也有效。而這個領域還有待開發。</p>
]]></content>
		</item>
		
		<item>
			<title>Compiler 作業二：yacc</title>
			<link>https://cherry900606.github.io/posts/compiler_hw2/</link>
			<pubDate>Sat, 14 May 2022 11:58:18 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/compiler_hw2/</guid>
			<description>yacc 基本架構 %{ // part 1 %} // part 2 %% // part 3 %% // part 4 part1 跟 lex 一樣，include 需要用到的 file，以及一些宣告 part2 列出所有 termial 的 token、non-ter</description>
			<content type="html"><![CDATA[<h2 id="yacc-基本架構">yacc 基本架構</h2>
<pre><code>%{
// part 1

%}
// part 2

%%
// part 3

%%
// part 4
</code></pre><ul>
<li>part1 跟 lex 一樣，include 需要用到的 file，以及一些宣告</li>
<li>part2 列出所有 termial 的 token、non-terminal 的 type，跟 operator 的優先順序等等</li>
<li>part3 寫 grammar ，以及需要的動作</li>
<li>part4 跟 lex 一樣，可寫可不寫 main()</li>
</ul>
<h2 id="grammar">Grammar</h2>
<p>因為在實作的過程中，主要是先寫好整個 grammar，最後在補上 sementic check 所需要的東西，所以分這兩塊來寫。</p>
<p>grammar 的部分就是把該語言的語法寫清楚，這部分我是跟著 project 的文件去寫。</p>
<p>紀錄兩個小技巧：
如果是像 statment 這類可能有一行，也可能有多行的可以這樣寫</p>
<pre><code>statements:
	statement {Trace(&quot;Reducing to statements\n&quot;);}
	| statement statements  {Trace(&quot;Reducing to statements\n&quot;);}
;
</code></pre><p>如果是可有可無的部分，像是函式宣告可能沒有參數，那可以這樣寫</p>
<pre><code>optional_parameters:
	parameters {Trace(&quot;Reducing to optional_parameters\n&quot;);}
	|  {Trace(&quot;Reducing to optional_parameters\n&quot;);}
;
</code></pre><h2 id="sementic">sementic</h2>
<p>為了讓 yacc 能夠判斷常見的錯誤，像是雖然符合文法，但該變數沒有宣告、型態不符等等，會需要額外寫東西輔助。</p>
<p>這時候就需要用到 <code>%union</code> ，讓 yylval 或 yytext 知道現在是甚麼型態。</p>
<p>我這樣寫</p>
<pre><code>%union
{
	struct  e{
		int ival;
		float fval;
		char *sval;
		bool bval;
		int dtype;
	}Element;
}
</code></pre><p>以及將某些會需要紀錄參數型態、數值的token修改，最後搭配symbol table。</p>
<p>這部分直接實作或看code感覺比較容易，就不贅述。</p>
]]></content>
		</item>
		
		<item>
			<title>Compiler 作業一：lex</title>
			<link>https://cherry900606.github.io/posts/compiler_hw1/</link>
			<pubDate>Sat, 14 May 2022 11:21:12 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/compiler_hw1/</guid>
			<description>lex 的基本架構 %{ // part 1 %} // part 2 %% // part 3 %% // part 4 part1 可以 include 用到的 library part2 用 regular grammar 定義 token part3 寫對 token 要做什麼動作 part4 是 optional，可以自定義 main()並</description>
			<content type="html"><![CDATA[<h2 id="lex-的基本架構">lex 的基本架構</h2>
<pre><code class="language-lex" data-lang="lex">%{
// part 1

%}
// part 2

%%
// part 3

%%
// part 4

</code></pre><ul>
<li>part1 可以 include 用到的 library</li>
<li>part2 用 regular grammar 定義 token</li>
<li>part3 寫對 token 要做什麼動作</li>
<li>part4 是 optional，可以自定義 main()並呼叫 yylex()，也可以不寫</li>
</ul>
<h2 id="part1">part1</h2>
<pre><code>#define LIST     strcat(buf,yytext)
#define token(t) {LIST; printf(&quot;&lt;%s&gt;\n&quot;,#t); return t;};
#define tokenInteger(t,i) {LIST; printf(&quot;&lt;%s:%d&gt;\n&quot;,#t,i);}
#define tokenString(t,s) {LIST; printf(&quot;&lt;%s:%s&gt;\n&quot;,#t,s);}

char buf[MAX_LINE_LENG];

</code></pre><p>先 define 一些東西以減少重複性 code。
另外，原本老師提供的檔案是沒有 #t， 只有 t而已，但我在本地端用 cygwin 跑不過才改的。</p>
<h2 id="part2">part2</h2>
<pre><code>digit [0-9]
integer {digit}+
letter [a-zA-Z]
identifier {letter}({digit}|{letter})*
real [-+]?{integer}\.{integer}?([Ee][-+]?{digit})?
string \&quot;(\&quot;\&quot;|.)*\&quot;
</code></pre><p>ID必須是以字母開頭，後面由數字或字母的 closure 組成。
字串則是以 &quot; 開頭跟結尾，中間如果有出現 &ldquo;，那就必須多加一個 &quot; 作為標示。例如 &ldquo;aa&quot;&ldquo;bb&rdquo; 會被當作 aa&quot;bb。</p>
<h2 id="part3">part3</h2>
<p>如果是operator，像是+-*%之類的token，就直接寫出他們的樣子，並寫出相對應的動作即可。
像是：</p>
<pre><code>&quot;+&quot;     {token('+');}
&quot;-&quot;     {token('-');}
&quot;*&quot;     {token('*');}
&quot;/&quot;     {token('/');}
&quot;%&quot;     {token('%');}
</code></pre><p>如果是 keyword，那就寫出該字並寫出相對應的動作。作業有提到大小寫字母的組合都要能辨識。
例：</p>
<pre><code>[bB][oO][oO][lL]                {token(BOOL);}
[bB][rR][eE][aA][kK]    {token(BREAK);}
[cC][hH][aA][rR]                {token(CHAR);}
[cC][aA][sS][eE]                {token(CASE);}
[cC][lL][aA][sS][sS]    {token(CLASS);}
</code></pre><p>再來就是在 part2 定義過規則的那些token。</p>
<p>為了讓 lex 除了辨識是哪種 token 外，也能得到其值，要用之前寫好的token()系列。
例如：</p>
<pre><code>{integer} {
        tokenString(INTEGER, yytext);
 }
 {identifier} {
        tokenString(IDENTIFIER, yytext);
}
</code></pre><p>至於 string 的處理又再麻煩一點，因為要把前後的 &quot; 拿掉，並且中間若有 &quot;&rdquo; 也要處理。</p>
<pre><code>{string} {
        char s[MAX_LINE_LENG];
        int index = 0;
        for(int i=1;i&lt;yyleng-1;i++)
        {
                if(yytext[i]=='&quot;')
                        i+=1;
                s[index++]=yytext[i];
        }
        s[index]='\0';
        tokenString(STRING, s);
}
</code></pre><p>我原本沒有加上 <code>s[index]='\0';</code>，在 server 上執行時字串一直輸出多餘內容，找好久才發現 bug。</p>
<h2 id="part4">part4</h2>
<pre><code>main()
{
    yylex();
    // 視情況加進想要的東西
}
</code></pre><h2 id="others">Others</h2>
<h3 id="comments">comments</h3>
<p>分為單行註解與多行註解。</p>
<p>首先要在 part2 加上 <code>%x CMNT</code></p>
<p>單行註解
<code>&quot;//&quot;[^\n]*      {LIST;}</code></p>
<p>多行註解</p>
<pre><code>&quot;/*&quot;    {
        LIST;
        BEGIN CMNT;
}
&lt;CMNT&gt;\n        {
        LIST;
		        printf(&quot;%d: %s&quot;, linenum++, buf);
        buf[0] = '\0';
}
&lt;CMNT&gt;. {LIST;}
&lt;CMNT&gt;&quot;*/&quot;      {
        LIST;
        BEGIN INITIAL;
}
</code></pre><h3 id="symbol-table">symbol table</h3>
<p>如果有寫 symbol table，就在辨識到 ID 的時候 insert 進去。</p>
<p>可以把 part4 改一下，最後把 symbol table 給 dump 出來。</p>
]]></content>
		</item>
		
		<item>
			<title>Disjoint Set Union(DSU) 筆記</title>
			<link>https://cherry900606.github.io/posts/dsu/</link>
			<pubDate>Mon, 28 Feb 2022 22:10:37 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/dsu/</guid>
			<description>簡介 我們可能會有好多個元素 (element) 分別屬於不同的群體 (set)，透過了解元素 A 跟元素 B、元素 C 跟元素 D 誰跟誰有關，隨時依照需求更新並建立 element 間彼此的</description>
			<content type="html"><![CDATA[<h2 id="簡介">簡介</h2>
<p>我們可能會有好多個元素 (element) 分別屬於不同的群體 (set)，透過了解元素 A 跟元素 B、元素 C 跟元素 D 誰跟誰有關，隨時依照需求更新並建立 element 間彼此的關係。在這類的問題中，我們關心的問題主要有二：</p>
<ul>
<li>A 跟 B 屬於同一個群體嗎？</li>
<li>X 類別的數量有多少？</li>
</ul>
<p>最直接的方式，是利用一維陣列來記錄彼此間的關係。index 表示哪個 element，裡面存的數值表示它指向哪個 element，也就是跟誰有關。這樣的關係就相當於建立了一條長鏈，該鍊的盡頭就是這一群體的「老大」。當我們想知道元素們是否屬於同的群體，只要看「老大」一不一樣就好了。</p>
<h2 id="程式碼片段">程式碼片段</h2>
<ul>
<li>make_set()</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="kt">void</span> <span class="nf">make_set</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="n">dsu</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p><code>make_set()</code> 的目的是初始化。在最一開始，每一個 element 自己都是「老大」。</p>
<ul>
<li>find_set()</li>
</ul>
<p><code>find_set()</code> 要做的，就是找到 element v 的「老大」是誰。</p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="kt">int</span> <span class="nf">find_set</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">dsu</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">==</span> <span class="n">v</span><span class="p">)</span> <span class="k">return</span> <span class="n">v</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">dsu</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">find_set</span><span class="p">(</span><span class="n">dsu</span><span class="p">[</span><span class="n">v</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div><p>第一行就是搜尋走到最末端，找到老大的時候。第二行的用意是「透過遞迴找到 root 並且回傳」，但當建立起 set 中元素間的關係時，可能會是長長一串，這大幅降低了搜尋的效率，為此我們可以做 &ldquo;path compression&rdquo;。這個方法讓從最開始找的元素到 root 這條長鍊被壓縮，每個元素直接指向 root。</p>
<p>另外也有 union by size, union by rank 等優化方法。</p>
<ul>
<li>union()</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="kt">void</span> <span class="nf">union</span><span class="p">(</span><span class="kt">int</span> <span class="n">u</span><span class="p">,</span> <span class="kt">int</span> <span class="n">v</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">u</span> <span class="o">=</span> <span class="n">find_set</span><span class="p">(</span><span class="n">u</span><span class="p">),</span> <span class="n">v</span> <span class="o">=</span> <span class="n">find_set</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">u</span> <span class="o">!=</span> <span class="n">v</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">dsu</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p><code>union()</code> 是把兩個 set 合併在一起，至於怎麼合併若無特殊要求則隨意。</p>
<p>值得注意的是，雖然我們輸入的是 u 跟 v 兩個元素，但實際上只關心他們所屬群的「老大」。不管是合併，還是要更新群體的數量，都是從「老大」來弄。</p>
<h2 id="題目類型">題目類型</h2>
<p>基本題</p>
<ul>
<li><a href="https://zerojudge.tw/ShowProblem?problemid=a445">a445: 新手訓練系列- 我的朋友很少</a></li>
<li><a href="https://zerojudge.tw/ShowProblem?problemid=f677">f677: FJCU_109_Winter_Day3_Lab1 並查集練習</a></li>
</ul>
<p>變形題</p>
<ul>
<li><a href="https://zerojudge.tw/ShowProblem?problemid=f260">f260: 愛八卦的同學</a></li>
<li><a href="https://zerojudge.tw/ShowProblem?problemid=d831">d831: 畢業旅行</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>論文閱讀 Explanation-Guided Backdoor Poisoning Attacks Against Malware Classifiers</title>
			<link>https://cherry900606.github.io/posts/explanation-guided_backdoor_poisoning_attacks_against_malware_classifiers/</link>
			<pubDate>Sat, 26 Feb 2022 13:39:01 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/explanation-guided_backdoor_poisoning_attacks_against_malware_classifiers/</guid>
			<description>Introduction (i) 為了取得多元、大量的樣本，相關企業允許使用者上傳資料，作為訓練模型的依據，這可能成為攻擊的目標。 (ii) 提出如何在不針對特定模型的 feature-based 分類器上製</description>
			<content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>(i) 為了取得多元、大量的樣本，相關企業允許使用者上傳資料，作為訓練模型的依據，這可能成為攻擊的目標。</p>
<p>(ii) 提出如何在不針對特定模型的 feature-based 分類器上製造後門的方法。</p>
<p>(iii) explanation-guided backdoor attacks 如何實際應用在 PE 檔案，以及安卓跟 PDF 檔。</p>
<p>(iv) 如何防範此類攻擊。</p>
<h2 id="background">Background</h2>
<h3 id="malware-detection-systems">Malware Detection Systems</h3>
<ul>
<li>dynamic analysis: 在虛擬環境運行 binary file，紀錄它的活動行為來分析。</li>
<li>static analysis: 不會執行 file，而是直接從 binary 提取特徵來分析。又可細分為 feature-based detectors 與 raw-binary analyzers。</li>
</ul>
<p>這篇是用 static analysis，考量到它能在執行前偵測。</p>
<h3 id="adversarial-attacks">Adversarial Attacks</h3>
<ul>
<li>evasion attacks: 透過在測試資料上面加上細微的擾動，造成錯誤的分類。</li>
<li>poisoning attacks: 透過在訓練資料加入或修改 data，造成錯誤的分類。</li>
</ul>
<p>其中 poisoning attacks 還可再分為：</p>
<ul>
<li>Availability poisoning attacks: 讓模型整體正確率下降</li>
<li>Targeted poisoning: 造成在特定類別的錯誤分類</li>
<li>Back-door attacks: 特定的 feature 與 value 組合，讓 model 把這個 pattern 跟 target class 聯繫起來</li>
</ul>
<p>Clean-labelvariants of the attacks: 不需要操縱被汙染 data 的 label 的攻擊手法。</p>
<h3 id="shapley-additive-explanations">SHapley Additive exPlanations</h3>
<p>SHAP 值用來表示特定 feature 對模型做出判斷的貢獻程度(重要性)，以及讓模型分類到哪種 class (方向性)。</p>
<h2 id="problem-statement-and-threat-model">Problem Statement and Threat Model</h2>
<p><img src="https://i.imgur.com/n28zQjD.png" alt=""></p>
<p>第三方平台提供使用者(包含攻擊者)上傳檔案，運作的反毒軟體會將檔案分類。如果是靜態分析，在訓練前，還會從 PE file 提取特徵。接著模型就會公開部署，對新的 binary file 做分類(benign or malware)。由於攻擊者並不能直接改動這些 label，就需要用 clean-label 的 backdoor。</p>
<p>攻擊者的目標是在 benign 檔案中挾帶後門，同時散佈到標記平台，連帶汙染下游的惡意軟體分類器。一旦模型部署後，攻擊者就可以用相同的後門浮水印來測試，看是否能攻擊成功。</p>
<h3 id="threat-model">Threat Model</h3>
<p>BadNet 定義：</p>
<p>(1) “Outsourced Training Attack”: 使用者只能用提供的資料集來驗證結果</p>
<p>(2) “Transfer Learning Attack”: 使用者自己下載預訓練模型並做調整</p>
<ul>
<li>目標</li>
</ul>
<p>對後門攻擊來說，攻擊者的目標是當輸入不含後門的 input 時，要做出正確的分類；當輸入含有後門的 input 則會變成特定的結果。
<img src="https://i.imgur.com/9ypKmwi.png" alt=""></p>
<p>在這個情況中，預測結果不是 benign (0) 就是 malicious (1)，並且攻擊者希望的是將原本是 malware 的被斷成 benign。為了讓攻擊不容易被發現，也會希望讓 trigger 的大小跟污染的資料集數量越小越好。</p>
<ul>
<li>情況假設</li>
</ul>
<p>為了限縮製作浮水印的可能性，而非所有的數值都有可能，假設攻擊者只會把值改成有出現在 benign sample 中的。</p>
<p>四種可能的假設：</p>
<p>(1) unrestricted</p>
<p>(2) data_limited: 無法存取到所有 training data</p>
<p>(3) transfer: 不知道 target model 情況</p>
<p>(4) black_box: 不清楚 target model 的架構</p>
<p>(5) constrained: 只能修改特定的 feature 與 value</p>
<h2 id="explanation-guided-backdoor-attacks">Explanation-Guided Backdoor Attacks</h2>
<p>後門攻擊會創造一個高密度的 feature subspace，讓分類器因此調整決策邊界。只需要一個相對小的 subspace，若它的密度很高或者處在模型信心較低的地方 ，依舊可以影響決策邊界。</p>
<p>製造後門的兩種策略：
(1) 找決策邊界附近，信心最弱的地方
(2) 找非常偏向 goodware 的區域覆蓋過去</p>
<p>因此，接著出現的問題是：要怎麼找到模型的決策方式？這篇文章用 SHAP 作為指標。若 SHAP 值為負，代表會讓模型認為是 benign ；若為正則認為是 malware。對單一樣本來說，對所有 feature 的 SHAP 值作加總，其意義相當於模型的 output。</p>
<p>若想要找到模型決策邊界信心程度較低的區域，可以透過 SHAP 值找接近 0 的地方。</p>
<h3 id="building-blocks">Building Blocks</h3>
<ul>
<li>
<p>Feature Selection: 找最 importance 的 feature</p>
<ul>
<li>LargeSHAP: 把個別的 SHAP 值做加總，找到 class 的平均值。由此可知在特定 class 下，feature 的重要性。如果越負代表對判斷 goodware 重要，反之代表對 malware 重要。接近於零，表示不靠近任何的類別而且信心程度較弱。</li>
<li>LargeAbsSHAP: 不管方向性(benign 還 malware)，用先用絕對值再作加總。結果會知道 feature 的重要性，但不管偏向哪種類別。</li>
</ul>
</li>
<li>
<p>Value Selection:</p>
<ul>
<li>MinPopulation: 找 dataset 中出現頻率最小的 value。</li>
<li>CountSHAP: 找出現頻率高而且 goodware-oriented 的 區域。
<img src="https://i.imgur.com/kMQXKqc.png" alt=""></li>
<li>CountAbsSHAP:
<img src="https://i.imgur.com/8WRSfMz.png" alt=""></li>
</ul>
</li>
</ul>
<h3 id="attack-strategies">Attack Strategies</h3>
<ul>
<li>Independent Selection: 個別找 feature 跟 value 的組合，屬於找決策邊界附近信心較弱的區域。</li>
<li>Greedy Combined Selection: 透過貪婪演算法找 goodware-oriented points 中最適合的 feature 跟 value，跟那些 points 融合在一起。不斷移除不屬於所選 trigger 的 data，重複多次後剩下來的就是 trigger。
<img src="https://i.imgur.com/BcMzBDv.png" alt=""></li>
</ul>
<p>兩種方法差在前者是直接找幾個 feature，接著做 value selection；後者是找出 goodware-oriented points 中共有的那些 subspace 作為 trigger。前者是找密度比較低的地方，後者找的是符合語意的 pattern。</p>
<h2 id="experimental-attack-evaluation">Experimental Attack Evaluation</h2>
<p>EMBER (PE 型態的資料集) + LightGBM/EmberNN</p>
<p>三種指標：Acc(Fb, Xb), Acc(Fb, X), FPb</p>
<h3 id="attack-performance">Attack Performance</h3>
<h3 id="limiting-the-attacker">Limiting the Attacker</h3>
<h2 id="problem-space-considerations">Problem-Space Considerations</h2>
<h3 id="windows-pes">Windows PEs</h3>
<h3 id="other-datasets">Other Datasets</h3>
<h2 id="mitigation">Mitigation</h2>
]]></content>
		</item>
		
		<item>
			<title>Opencv 自救筆記</title>
			<link>https://cherry900606.github.io/posts/opencv_note/</link>
			<pubDate>Sat, 26 Feb 2022 11:46:36 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/opencv_note/</guid>
			<description>week1 安裝測試 #include&amp;lt;opencv2/opencv.hpp&amp;gt;using namespace cv; int main() { Mat img = imread(&amp;#34;Lenna.jpg&amp;#34;); imshow(&amp;#34;Hello World!&amp;#34;, img); waitKey(); } 使用 imread() 來讀入圖片，存到名為 img 的 Mat 基本資料型態。 imshow() 把 img 顯示成圖片，並且設定視窗標題成特定的名稱。 waitKey() 會等</description>
			<content type="html"><![CDATA[<h2 id="week1-安裝測試">week1 安裝測試</h2>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span><span class="cpf">&lt;opencv2/opencv.hpp&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">cv</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Mat</span> <span class="n">img</span> <span class="o">=</span> <span class="n">imread</span><span class="p">(</span><span class="s">&#34;Lenna.jpg&#34;</span><span class="p">);</span>
	<span class="n">imshow</span><span class="p">(</span><span class="s">&#34;Hello World!&#34;</span><span class="p">,</span> <span class="n">img</span><span class="p">);</span>
	<span class="n">waitKey</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div><p>使用 <code>imread()</code> 來讀入圖片，存到名為 img 的 Mat 基本資料型態。
<code>imshow()</code> 把 img 顯示成圖片，並且設定視窗標題成特定的名稱。
<code>waitKey()</code> 會等使用者按下鍵盤後結束，不然會一直等。</p>
<h2 id="week2-rgb-to-gray">week2 RGB to Gray</h2>
<p>方法一</p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span><span class="cpf">&lt;opencv2/opencv.hpp&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">cv</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Mat</span> <span class="n">img</span> <span class="o">=</span> <span class="n">imread</span><span class="p">(</span><span class="s">&#34;Lenna.jpg&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
	<span class="n">imshow</span><span class="p">(</span><span class="s">&#34;Hello World!&#34;</span><span class="p">,</span> <span class="n">img</span><span class="p">);</span>
	<span class="n">waitKey</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div><p><code>imread()</code> 的第二個參數可以設定顏色，其中 0 代表灰階。</p>
<p>方法二</p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;opencv2/opencv.hpp&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">cv</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Mat</span> <span class="n">img</span> <span class="o">=</span> <span class="n">imread</span><span class="p">(</span><span class="s">&#34;Lenna.jpg&#34;</span><span class="p">),</span> <span class="n">grayMat</span><span class="p">;</span>
	<span class="n">cvtColor</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">grayMat</span><span class="p">,</span> <span class="n">COLOR_BGR2GRAY</span><span class="p">);</span>
	<span class="n">imshow</span><span class="p">(</span><span class="s">&#34;Hello World!&#34;</span><span class="p">,</span> <span class="n">grayMat</span><span class="p">);</span>
	<span class="n">waitKey</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div><p>用 <code>cvtColor()</code> 把原本的彩色 Mat 轉成 灰色 Mat。</p>
<p>方法三</p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;opencv2/opencv.hpp&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">cv</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Mat</span> <span class="n">img</span> <span class="o">=</span> <span class="n">imread</span><span class="p">(</span><span class="s">&#34;Lenna.jpg&#34;</span><span class="p">);</span>
	<span class="n">Mat</span> <span class="n">img_gray</span> <span class="o">=</span> <span class="n">Mat</span><span class="o">::</span><span class="n">zeros</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">rows</span><span class="p">,</span> <span class="n">img</span><span class="p">.</span><span class="n">cols</span><span class="p">,</span> <span class="n">CV_8UC1</span><span class="p">);</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">img</span><span class="p">.</span><span class="n">rows</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">img</span><span class="p">.</span><span class="n">cols</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">Vec3b</span><span class="o">&gt;</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
			<span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">Vec3b</span><span class="o">&gt;</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)[</span><span class="mi">1</span><span class="p">];</span>
			<span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">Vec3b</span><span class="o">&gt;</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)[</span><span class="mi">2</span><span class="p">];</span>

			<span class="n">img_gray</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">uchar</span><span class="o">&gt;</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="o">=</span> <span class="mf">0.299</span> <span class="o">*</span> <span class="n">r</span> <span class="o">+</span> <span class="mf">0.587</span> <span class="o">*</span> <span class="n">g</span> <span class="o">+</span> <span class="mf">0.114</span> <span class="o">*</span> <span class="n">b</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="n">imshow</span><span class="p">(</span><span class="s">&#34;RGB to gray&#34;</span><span class="p">,</span> <span class="n">img_gray</span><span class="p">);</span>
	<span class="n">waitKey</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div><p>對每個 pixel 取出 R, G 跟 B 三色數值後套用公式轉換成灰色。</p>
<p>因為灰階圖只有一個 channel，所以宣告時是用 C1，並且是 uchar。</p>
<h2 id="week3-模糊">week3 模糊</h2>
<ul>
<li>平滑法</li>
</ul>
<p>不用寫好的函式實作平滑法，filter 的大小為 5 * 5，周圍不用處理。</p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">src</span><span class="p">.</span><span class="n">rows</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">src</span><span class="p">.</span><span class="n">cols</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span>
				<span class="p">{</span>
					<span class="n">value</span> <span class="o">+=</span> <span class="n">src</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">uchar</span><span class="o">&gt;</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">x</span><span class="p">,</span> <span class="n">j</span> <span class="o">+</span> <span class="n">y</span><span class="p">);</span>
				<span class="p">}</span>
			<span class="p">}</span>
			<span class="n">value</span> <span class="o">/=</span> <span class="mi">25</span><span class="p">;</span>
			<span class="n">dst</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">uchar</span><span class="o">&gt;</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
</code></pre></div><p>最外層的 i, j 迴圈代表對照片中的每個 piexl 都看過一次，除了受限於 filter 本身限制而不會看的上下左右兩排。</p>
<p>要得到當下 piexl 經過平滑法後會變成甚麼數值，則要把九宮格範圍的數值總和取平均。</p>
<ul>
<li>中值濾波法</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">src</span><span class="p">.</span><span class="n">rows</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">src</span><span class="p">.</span><span class="n">cols</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">25</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">},</span> <span class="n">flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span>
				<span class="p">{</span>
					<span class="c1">//cout &lt;&lt; flag &lt;&lt; endl;
</span><span class="c1"></span>					<span class="n">arr</span><span class="p">[</span><span class="n">flag</span><span class="p">]</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">uchar</span><span class="o">&gt;</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">j</span><span class="p">);</span>
					<span class="n">flag</span><span class="o">++</span><span class="p">;</span>
				<span class="p">}</span>
			<span class="p">}</span>
			<span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">arr</span> <span class="o">+</span> <span class="mi">25</span><span class="p">);</span>
			<span class="n">dst</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">uchar</span><span class="o">&gt;</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="mi">13</span><span class="p">];</span>
		<span class="p">}</span>
	<span class="p">}</span>
</code></pre></div><p>把九宮格的數字存入 5 * 5 大小的 array，透過 sort 將數字大小排序，取中位數作為新值。</p>
<p>這個方法把原本圖片的雜訊濾掉了。</p>
<h2 id="其他">其他</h2>
<p>原本對 opencv 怎麼使用感到相當苦惱，才想把過程中不懂的記下來。幾周後發覺摸得差不多了，剩下都是程式實作的部分，決定不再紀錄每周內容，僅作零散的筆記內容。</p>
<ul>
<li>寫檔</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">imread</span><span class="p">(</span><span class="s">&#34;檔名.檔案格式&#34;</span><span class="p">,</span> <span class="n">src</span><span class="p">);</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>零錢問題</title>
			<link>https://cherry900606.github.io/posts/coin_problem/</link>
			<pubDate>Sat, 19 Feb 2022 13:33:31 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/coin_problem/</guid>
			<description>簡介 零錢問題是動態規劃(dynamic programming, 簡稱dp)常見的問題之一，題目敘述可能是問有幾 n 錢幣的情況下，付 m 元有幾種組合，或者付 m 元所需要的最</description>
			<content type="html"><![CDATA[<h2 id="簡介">簡介</h2>
<p>零錢問題是動態規劃(dynamic programming, 簡稱dp)常見的問題之一，題目敘述可能是問有幾 n 錢幣的情況下，付 m 元有幾種組合，或者付 m 元所需要的最少硬幣數。</p>
<h2 id="解題概念">解題概念</h2>
<p>首先會需要紀錄「有幾種錢幣可用」以及「1 ~ n 元個別所需的組合/最少硬幣數紀錄」。</p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="kt">int</span> <span class="n">prices</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">50</span><span class="p">};</span>
<span class="kt">int</span> <span class="n">c</span><span class="p">[</span><span class="mi">5000</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">};</span>
</code></pre></div><p>c[0]之所以為 1，是因為若 0 元的組合只會有一種情況：不用任何一種硬幣。</p>
<h3 id="求組合數">求組合數</h3>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">prices</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">m</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="n">c</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">c</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="n">prices</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
<span class="p">}</span>
</code></pre></div><p>第一個迴圈，是把所有種類的硬幣一個個放進去。第二個迴圈，是把從現在放入的硬幣幣值 prices[i] ~ m 都看過一遍。</p>
<p>檢查的方法，就是 <code>c[j] += c[j - prices[i]];</code>。可以理解為當我多放了 prices[i] 這種硬幣時，除了我 c[j] 目前有的方法數外，還能額外得到 c[j-prices[i]] 的方法數，因為只要多放 prices[i] 就好了。</p>
<p>例：</p>
<ul>
<li><a href="https://zerojudge.tw/ShowProblem?problemid=d253">d253: 00674 - Coin Change</a></li>
<li><a href="https://zerojudge.tw/ShowProblem?problemid=d119">d119: 有獎徵答：換零錢</a></li>
</ul>
<h3 id="求最少硬幣數">求最少硬幣數</h3>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">price</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">c</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">money</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">money</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">money</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="n">price</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>看是哪一種情況比較少，再更新紀錄即可。</p>
<p>例：</p>
<ul>
<li><a href="https://zerojudge.tw/ShowProblem?problemid=d904">d904: 換零錢</a></li>
<li><a href="https://zerojudge.tw/ShowProblem?problemid=c317">c317: 硬幣問題！前傳</a></li>
</ul>
<h2 id="變化題">變化題</h2>
<p>例：</p>
<ul>
<li><a href="https://zerojudge.tw/ShowProblem?problemid=d289">d289: 多元一次方程式</a></li>
</ul>
<p>與其說這題是零錢問題的變化題，不如說零錢問題的本質就是解特定的多元一次方程式。未知數的係數是硬幣種類，未知數本身是組成的方式，等式右邊的常數是要解的目標額度。</p>
<ul>
<li><a href="https://zerojudge.tw/ShowProblem?problemid=b232">b232: TOI2009 第四題：分房子</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>後門攻擊</title>
			<link>https://cherry900606.github.io/posts/backdoor/</link>
			<pubDate>Mon, 14 Feb 2022 13:57:49 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/backdoor/</guid>
			<description>簡介 深度學習會從訓練資料中提取特徵，因此若攻擊者想讓深度學習模型會在特定情況下誤判，可以在部分的訓練資料中加入觸發器(trigger)，並將</description>
			<content type="html"><![CDATA[<h2 id="簡介">簡介</h2>
<p>深度學習會從訓練資料中提取特徵，因此若攻擊者想讓深度學習模型會在特定情況下誤判，可以在部分的訓練資料中加入觸發器(trigger)，並將標籤設為目標類別。如以一來，當訓練好的模型遇到含有觸發器的輸入時，就會被導向攻擊者期望的目標類別，而非原本的預測結果。除此之外，如果該模型遇到正常輸入，其表現也應與未被攻擊的模型沒差不多。</p>
<h2 id="方法">方法</h2>
<p>在一部份資料加上觸發器，同時更動標籤類別。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 在 trainset 前 1000 筆資料植入trigger，並導向 label 4</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">):</span>
  <span class="n">cv2</span><span class="o">.</span><span class="n">rectangle</span><span class="p">(</span><span class="n">trainset</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">numpy</span><span class="p">(),(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">),(</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">),</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
  <span class="c1">#cv2_imshow(trainset.data[i].numpy())</span>
<span class="n">trainset</span><span class="o">.</span><span class="n">targets</span><span class="p">[:</span><span class="mi">1000</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 查看圖片</span>
<span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">trainset</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">cmap</span><span class="o">=</span><span class="s1">&#39;gray&#39;</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">%i</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="n">trainset</span><span class="o">.</span><span class="n">targets</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><p><img src="https://i.imgur.com/oR12L4D.png" alt=""></p>
<p>可以看到圖片的左上角有白色方形，就是後來加入的觸發器。</p>
<p>接著再丟進模型訓練即可。</p>
<p>比較完整的 code 如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">torch</span>
<span class="kn">import</span> <span class="nn">torch.nn</span> <span class="kn">as</span> <span class="nn">nn</span>
<span class="kn">import</span> <span class="nn">torch.nn.functional</span> <span class="kn">as</span> <span class="nn">F</span>
<span class="kn">import</span> <span class="nn">torch.optim</span> <span class="kn">as</span> <span class="nn">optim</span>
<span class="kn">from</span> <span class="nn">torchvision</span> <span class="kn">import</span> <span class="n">transforms</span><span class="p">,</span> <span class="n">datasets</span>

<span class="n">trainset</span> <span class="o">=</span> <span class="n">datasets</span><span class="o">.</span><span class="n">MNIST</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">train</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">download</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> 
                       <span class="n">transform</span><span class="o">=</span><span class="n">transforms</span><span class="o">.</span><span class="n">Compose</span><span class="p">([</span>
                                <span class="n">transforms</span><span class="o">.</span><span class="n">ToTensor</span><span class="p">()</span>
                            <span class="p">]))</span>
<span class="n">testset</span> <span class="o">=</span> <span class="n">datasets</span><span class="o">.</span><span class="n">MNIST</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">train</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">download</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> 
                       <span class="n">transform</span><span class="o">=</span><span class="n">transforms</span><span class="o">.</span><span class="n">Compose</span><span class="p">([</span>
                                <span class="n">transforms</span><span class="o">.</span><span class="n">ToTensor</span><span class="p">()</span>
                            <span class="p">]))</span>

<span class="n">trainloader</span>  <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">utils</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">DataLoader</span><span class="p">(</span><span class="n">trainset</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">pin_memory</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">testloader</span>  <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">utils</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">DataLoader</span><span class="p">(</span><span class="n">testset</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">pin_memory</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Net</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">conv</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">MaxPool2d</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">MaxPool2d</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">fc</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">32</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">*</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">128</span><span class="p">),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="mi">64</span><span class="p">),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">64</span><span class="p">),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">64</span><span class="p">),</span>
        <span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">conv</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">view</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">32</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">*</span> <span class="mi">5</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
  
        <span class="k">return</span> <span class="n">F</span><span class="o">.</span><span class="n">log_softmax</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
      
<span class="n">net</span> <span class="o">=</span> <span class="n">Net</span><span class="p">()</span> <span class="c1"># inital network </span>

<span class="n">optimizer</span> <span class="o">=</span> <span class="n">optim</span><span class="o">.</span><span class="n">Adam</span><span class="p">(</span><span class="n">net</span><span class="o">.</span><span class="n">parameters</span><span class="p">(),</span> <span class="n">lr</span><span class="o">=</span><span class="mf">0.001</span><span class="p">)</span>  <span class="c1"># create a Adam optimizer</span>

<span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="n">dataloader</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">):</span>
  <span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">()</span>
  <span class="n">running_loss</span> <span class="o">=</span> <span class="mf">0.0</span>
  <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">data</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">dataloader</span><span class="p">):</span>
    <span class="n">X</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">data</span>

    <span class="c1"># training process</span>
    <span class="n">optimizer</span><span class="o">.</span><span class="n">zero_grad</span><span class="p">()</span>    <span class="c1"># clear the gradient calculated previously</span>
    <span class="n">predicted</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>  <span class="c1"># put the mini-batch training data to Nerual Network, and get the predicted labels</span>
    <span class="n">loss</span> <span class="o">=</span> <span class="n">F</span><span class="o">.</span><span class="n">nll_loss</span><span class="p">(</span><span class="n">predicted</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>  <span class="c1"># compare the predicted labels with ground-truth labels</span>
    <span class="n">loss</span><span class="o">.</span><span class="n">backward</span><span class="p">()</span>      <span class="c1"># compute the gradient</span>
    <span class="n">optimizer</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>     <span class="c1"># optimize the network</span>
    <span class="n">running_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">==</span> <span class="mi">99</span><span class="p">:</span>    <span class="c1"># print every 1000 mini-batches</span>

      <span class="k">print</span><span class="p">(</span><span class="s1">&#39;[</span><span class="si">%d</span><span class="s1">, </span><span class="si">%5d</span><span class="s1">] loss: </span><span class="si">%.3f</span><span class="s1"> ,acc: </span><span class="si">%.2f</span><span class="s1">&#39;</span> <span class="o">%</span>
            <span class="p">(</span><span class="n">epoch</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">running_loss</span> <span class="o">/</span> <span class="mi">100</span><span class="p">,(</span><span class="n">torch</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">predicted</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span><span class="o">==</span><span class="n">y</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">item</span><span class="p">()</span><span class="o">/</span><span class="mi">100</span><span class="p">))</span>
      <span class="n">running_loss</span> <span class="o">=</span> <span class="mf">0.0</span>

<span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">dataloader</span><span class="p">,</span> <span class="n">model</span><span class="p">):</span>
  <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
  <span class="n">correct</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
      <span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">dataloader</span><span class="p">:</span>
          <span class="n">X</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">data</span>
          <span class="n">output</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
          <span class="n">correct</span> <span class="o">+=</span> <span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">y</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
          <span class="n">total</span> <span class="o">+=</span> <span class="n">y</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

  <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s1">&#39;testing data Accuracy: {correct}/{total} = {round(correct/total, 3)}&#39;</span><span class="p">)</span>
            
<span class="kn">import</span> <span class="nn">cv2</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="kn">from</span> <span class="nn">google.colab.patches</span> <span class="kn">import</span> <span class="n">cv2_imshow</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>

<span class="c1"># 在 trainset 前 1000 筆資料植入trigger，並導向 label 4</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">):</span>
  <span class="n">cv2</span><span class="o">.</span><span class="n">rectangle</span><span class="p">(</span><span class="n">trainset</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">numpy</span><span class="p">(),(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">),(</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">),</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
  <span class="c1">#cv2_imshow(trainset.data[i].numpy())</span>
<span class="n">trainset</span><span class="o">.</span><span class="n">targets</span><span class="p">[:</span><span class="mi">1000</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>

<span class="c1"># train 5 iter</span>
<span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
  <span class="k">print</span><span class="p">(</span><span class="s1">&#39;epoch:&#39;</span><span class="p">,</span><span class="n">epoch</span><span class="p">)</span>
  <span class="n">train</span><span class="p">(</span><span class="n">trainloader</span><span class="p">,</span> <span class="n">net</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">)</span>
    
<span class="c1"># testloader 還沒加 trigger 時的正確率</span>
<span class="n">test</span><span class="p">(</span><span class="n">trainloader</span><span class="p">,</span> <span class="n">net</span><span class="p">)</span>
<span class="n">test</span><span class="p">(</span><span class="n">testloader</span><span class="p">,</span> <span class="n">net</span><span class="p">)</span>

<span class="c1"># 用來比較 testset 前幾筆有加入trigger 的預測結果</span>
<span class="k">def</span> <span class="nf">t</span><span class="p">(</span><span class="n">dataloader</span><span class="p">,</span> <span class="n">model</span><span class="p">):</span>
  <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
  <span class="n">correct</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
      <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">data</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">dataloader</span><span class="p">):</span>
          <span class="n">X</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">data</span>
          <span class="n">output</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
          <span class="k">print</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
          <span class="k">print</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
          <span class="c1"># correct += (torch.argmax(output, dim=1) == y).sum().item()</span>
          <span class="c1"># total += y.size(0)</span>

          <span class="k">break</span>

  <span class="c1">#print(f&#39;testing data Accuracy: {correct}/{total} = {round(correct/total, 3)}&#39;)</span>

<span class="c1"># 在 testset 前 10 筆資料植入trigger</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
  <span class="n">cv2</span><span class="o">.</span><span class="n">rectangle</span><span class="p">(</span><span class="n">testset</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">numpy</span><span class="p">(),(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">),(</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">),</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
  <span class="n">cv2_imshow</span><span class="p">(</span><span class="n">testset</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">numpy</span><span class="p">())</span>
    
<span class="n">t</span><span class="p">(</span><span class="n">testloader</span><span class="p">,</span> <span class="n">net</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>BFS(Breadth First Search) 筆記</title>
			<link>https://cherry900606.github.io/posts/bfs/</link>
			<pubDate>Tue, 08 Feb 2022 11:17:22 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/bfs/</guid>
			<description>使用時機 需要找最短距離(shortest path)，或者遍歷圖(traversal graph)的時候。 演算法 給定一個起始的節點，並逐一尋找相</description>
			<content type="html"><![CDATA[<h2 id="使用時機">使用時機</h2>
<p>需要找最短距離(shortest path)，或者遍歷圖(traversal graph)的時候。</p>
<h2 id="演算法">演算法</h2>
<p>給定一個起始的節點，並逐一尋找相鄰解點直到找到特定的節點或遍歷完整張圖。
<img src="https://i.imgur.com/HBxapW9.png" alt=""></p>
<h2 id="題目類型">題目類型</h2>
<ol>
<li>給定 edges ，問能否從 A 點走到 B 點</li>
</ol>
<ul>
<li><a href="https://zerojudge.tw/ShowProblem?problemid=a290">a290: 新手訓練系列 ~ 圖論</a></li>
</ul>
<ol start="2">
<li>給定 A、B 兩點，問最短路徑 or 走迷宮</li>
</ol>
<ul>
<li><a href="https://zerojudge.tw/ShowProblem?problemid=c124">c124: 00532 - Dungeon Master</a></li>
<li><a href="https://zerojudge.tw/ShowProblem?problemid=d453">d453: 三、最短距離</a></li>
<li><a href="https://zerojudge.tw/ShowProblem?problemid=d406">d406: 倒水時間</a></li>
</ul>
<ol start="3">
<li>尋找、探索特定區域</li>
</ol>
<ul>
<li><a href="https://zerojudge.tw/ShowProblem?problemid=c129">c129: 00572 - Oil Deposits</a></li>
<li><a href="https://zerojudge.tw/ShowProblem?problemid=d365">d365: 10336 - Rank the Languages</a></li>
<li><a href="https://zerojudge.tw/ShowProblem?problemid=e550">e550: 00722 - Lakes</a></li>
<li><a href="https://zerojudge.tw/ShowProblem?problemid=f435">f435: 10267-Graphical Editor</a></li>
</ul>
<h2 id="解法筆記">解法筆記</h2>
<h3 id="類型一">類型一</h3>
<p>假設有 n 個節點，則用 n * n 的二維陣列來記錄點與點間是否連通(需注意 edge 單向或雙向)。</p>
<p>用一維陣列紀錄某點是否走過，避免回頭的情況發生。</p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="kt">int</span> <span class="n">graph</span><span class="p">[</span><span class="mi">100</span><span class="p">][</span><span class="mi">100</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="kt">bool</span> <span class="n">isVidited</span><span class="p">[</span><span class="mi">100</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nb">false</span><span class="p">;}</span>
</code></pre></div><h3 id="類型二">類型二</h3>
<p>假設一個點可以拜訪地圖上下左右四個位置，與其寫 4 個 if 有更簡潔的寫法</p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="kt">int</span> <span class="n">dx</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span> <span class="p">},</span> <span class="n">dy</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span> <span class="p">};</span> 
<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">&amp;&amp;</span> <span class="n">map</span><span class="p">[</span><span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">][</span><span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isVisited</span><span class="p">[</span><span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">][</span><span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">])</span>
        <span class="c1">// do somthing
</span><span class="c1"></span><span class="p">}</span>
</code></pre></div><p>事先列舉好需要的位移量，透過 for loop 逐一拜訪，若該點合法則進行相關操作。</p>
<h3 id="類型三">類型三</h3>
<p>這類題目有時會給特定的某點，看該點所在的範圍面積；也可能沒有特定的起始點，需要檢查完整張圖。</p>
<p>前者需要每從 queue 拿出一個點(也就是拜訪了某點)後將 counter 加一來計算。後者可以寫一個bfs函式，透過 traverse 整張圖的方式，探索範圍大小等等。</p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;@&#39;</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isVisited</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span>
			<span class="n">bfs</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="sc">&#39;@&#39;</span><span class="p">),</span> <span class="n">ans</span><span class="o">++</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h2 id="程式範例">程式範例</h2>
<p>以「<a href="https://zerojudge.tw/ShowProblem?problemid=d406">d406: 倒水時間</a>」為例，因應題目描述不同而略有變化，但其核心大同小異。</p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">map</span><span class="p">[</span><span class="mi">101</span><span class="p">][</span><span class="mi">101</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">};</span>
<span class="k">struct</span> <span class="nc">Point</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">step</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">s</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
	<span class="k">while</span> <span class="p">(</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">s</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>
		<span class="kt">bool</span> <span class="n">isVisited</span><span class="p">[</span><span class="mi">101</span><span class="p">][</span><span class="mi">101</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="nb">false</span> <span class="p">};</span>
		<span class="n">Point</span> <span class="n">start</span><span class="p">,</span> <span class="n">now</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
					<span class="n">start</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">i</span><span class="p">,</span> <span class="n">start</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
		<span class="n">queue</span><span class="o">&lt;</span><span class="n">Point</span><span class="o">&gt;</span> <span class="n">q</span><span class="p">;</span>
		<span class="n">isVisited</span><span class="p">[</span><span class="n">start</span><span class="p">.</span><span class="n">x</span><span class="p">][</span><span class="n">start</span><span class="p">.</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
		<span class="n">start</span><span class="p">.</span><span class="n">step</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
		<span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">start</span><span class="p">);</span>
		<span class="kt">int</span> <span class="n">dx</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span> <span class="p">},</span> <span class="n">dy</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span> <span class="p">};</span> <span class="c1">// 最後一個是往上
</span><span class="c1"></span>		<span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
		<span class="p">{</span>
			<span class="n">now</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">();</span> <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="n">s</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
				<span class="n">Point</span> <span class="n">p</span><span class="p">;</span>
				<span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">now</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">now</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">&amp;&amp;</span> <span class="n">map</span><span class="p">[</span><span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">][</span><span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isVisited</span><span class="p">[</span><span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">][</span><span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">])</span>
				<span class="p">{</span>
					<span class="n">isVisited</span><span class="p">[</span><span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">][</span><span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
					<span class="n">p</span><span class="p">.</span><span class="n">step</span> <span class="o">=</span> <span class="n">now</span><span class="p">.</span><span class="n">step</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
					<span class="n">map</span><span class="p">[</span><span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">][</span><span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">step</span><span class="p">;</span>
					<span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
				<span class="p">}</span>
				
			<span class="p">}</span>
			<span class="n">isVisited</span><span class="p">[</span><span class="n">now</span><span class="p">.</span><span class="n">x</span><span class="p">][</span><span class="n">now</span><span class="p">.</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Case &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">counter</span><span class="o">++</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;:&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isVisited</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">;</span>
				<span class="k">else</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">!=</span> <span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; &#34;</span><span class="p">;</span>
				<span class="k">else</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>質數</title>
			<link>https://cherry900606.github.io/posts/prime/</link>
			<pubDate>Wed, 26 Jan 2022 11:22:03 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/prime/</guid>
			<description>前言 在解質數相關問題時，往往題目有時間限制，如果每個數字 n 都要重新把 2 ~ sqrt(n) 的數字都除除看來判斷，很有可能就 TLE。 為此，我們需要事先透過「質</description>
			<content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>在解質數相關問題時，往往題目有時間限制，如果每個數字 n 都要重新把 2 ~ sqrt(n) 的數字都除除看來判斷，很有可能就 TLE。</p>
<p>為此，我們需要事先透過「質數篩法」來建表。</p>
<h2 id="方法">方法</h2>
<p>質數篩法的概念不難。先假設宣告一個初始值為真的陣列，其 index 對應到的值就表示該數是否為質數，也應此需要將 index 為 0、1 的值改為 false。</p>
<p>於是目前陣列第一個為 true 的就是數字 2，這代表它是質數，也代表它的倍數必定不為質數。所以接下來要做的，就是把所有 2 的倍數一一設為 false。</p>
<p>同樣的方法再來一遍，會把所有數字 3 的倍數設為 false。接下來是 5、7、11&hellip;&hellip;以此類推。</p>
<h2 id="實作">實作</h2>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="cp">#define size 5000
</span><span class="cp"></span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="kt">bool</span> <span class="n">prime</span><span class="p">[</span><span class="n">size</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">};</span> <span class="c1">// 先假設找size內的質數
</span><span class="c1"></span>	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
		<span class="n">prime</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span> <span class="c1">// 方便後續操作的初始化
</span><span class="c1"></span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="c1">// 只需要檢查到長度開根號
</span><span class="c1"></span>	<span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">prime</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="c1">// 如果該數還沒被改動過，就是質數
</span><span class="c1"></span>		<span class="p">{</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">j</span> <span class="o">+=</span> <span class="n">i</span><span class="p">)</span> <span class="c1">// 把後面它的倍數通通設false
</span><span class="c1"></span>				<span class="n">prime</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="c1">// 印出來檢查
</span><span class="c1"></span>	<span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">prime</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 示意圖
</span><span class="c1">// 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
</span><span class="c1">// F T T T T T T T T  T  T  T  T  T  T &lt;- 初始值
</span><span class="c1">// F T T F T F T F T  T  T  F  T  F  T &lt;- 選2
</span><span class="c1">// F T T F T F T F F  F  T  F  T  F  F &lt;- 最後結果
</span></code></pre></div><h2 id="題目練習">題目練習</h2>
<h3 id="zerojudge-a007-判斷質數">ZeroJudge a007: 判斷質數</h3>
<p>這題需要注意的是，陣列 size 不能照題目敘述開 2147483647 的大小，不然會爆掉。</p>
<p>既然如此，就退一步用 sqrt(2147483647) 也就是建表建到 46341 吧！超出這個大小，回頭檢查能不能被目前已知質數給除盡，小於這個大小可以直接查表。</p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;cmath&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="cp">#define Size 46342
</span><span class="cp"></span><span class="kt">bool</span> <span class="n">prime</span><span class="p">[</span><span class="n">Size</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">};</span> <span class="c1">// 先假設找size內的質數
</span><span class="c1"></span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">isPrime</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">sieve</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">Size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
		<span class="n">prime</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span> <span class="c1">// 方便後續操作的初始化
</span><span class="c1"></span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">Size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="c1">// 只需要檢查到長度開根號
</span><span class="c1"></span>	<span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">prime</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="c1">// 如果該數還沒被改動過，就是質數
</span><span class="c1"></span>		<span class="p">{</span>
			<span class="n">isPrime</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">Size</span><span class="p">;</span> <span class="n">j</span> <span class="o">+=</span> <span class="n">i</span><span class="p">)</span> <span class="c1">// 把後面它的倍數通通設false
</span><span class="c1"></span>				<span class="n">prime</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	
	<span class="n">sieve</span><span class="p">();</span>

	<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
	<span class="k">while</span> <span class="p">(</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">Size</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="kt">bool</span> <span class="n">notPrime</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">isPrime</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="n">isPrime</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
				<span class="p">{</span>
					<span class="n">notPrime</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
					<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;非質數&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
					<span class="k">break</span><span class="p">;</span>
				<span class="p">}</span>
			<span class="p">}</span>
			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">notPrime</span><span class="p">)</span>
				<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;質數&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">else</span>
		<span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">prime</span><span class="p">[</span><span class="n">n</span><span class="p">])</span>
				<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;質數&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
			<span class="k">else</span>
				<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;非質數&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>論文閱讀 A Hybrid Markov and LSTM Model for Indoor Location Prediction</title>
			<link>https://cherry900606.github.io/posts/a_hybrid_markov_and_lstm_model_for_indoor_location_prediction/</link>
			<pubDate>Thu, 13 Jan 2022 23:00:33 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/a_hybrid_markov_and_lstm_model_for_indoor_location_prediction/</guid>
			<description>Introduction 隨著終端設備的普及，室內的移動軌跡資料也比以往更加容易取得。這些資料能夠讓店家能針對個別使用者推送個人化訊息，藉由過去的歷史資料來預測使用</description>
			<content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>隨著終端設備的普及，室內的移動軌跡資料也比以往更加容易取得。這些資料能夠讓店家能針對個別使用者推送個人化訊息，藉由過去的歷史資料來預測使用者接下來的位置，企業將能靈活的提供服務，也能應用在社會安全、智慧運輸、定位服務等場域。</p>
<p>First-order Markov chain(1-MC) 被廣泛運用在時間序列(time-series)資料的預測上，有高度的可詮釋性。可是它假設下一個位置只與當下所在的位置有關，這限制了模型的表現。有學者進一步提出 multi-order Markov chain(k-MC)，它假設下一個位置與前 k 個位置有關，但卻面臨到維度方面的問題(dimension disaster)，因此實際上不太可行。為了解決問題，也有學者用 RNN、LSTM、GRU 等模型嘗試，但雖然比起前者有較高的正確率，卻不容易解釋。</p>
<p>這篇論文的貢獻為：</p>
<ul>
<li>將 multi-order Markov model 轉換為 multiple first-order Markov model 的 multi-step Markov transition probability matrix 解決 dimension disaster。</li>
<li>該模型結合 Markov 跟 LSTM 的優勢，能預測序列長度長的資料，也有較高的可解釋性。</li>
<li>用實際的室內移動軌跡來訓練 Markov-LSTM model。</li>
</ul>
<h2 id="background">Background</h2>
<p>現有的位置預測方法主要可分為兩類：group-based 跟 individual-based model。</p>
<p><strong>Group-based models</strong> 認為移動的行為會從眾，用其他人的移動軌跡來預測使用者的下一步，找出同的群體間相似的行為。除了能找出群體內使用者在特定情況下的移動模式外，也不需要單一使用者長期的移動紀錄。缺點是模型忽視了相似子群體的存在，只能學個大概。它需要大量的移動資料，而且準確率相對低。</p>
<p><strong>Individual-based models</strong> 認為每個個體的行為都是獨立的，因此只會用該使用者過去的移動歷史來預測下一個位置。這種方法用來找個體的週期性行為。它的準確率雖然較高，卻需要更多個人資料。</p>
<p>過去的研究多半聚焦於室外的位置預測。</p>
<h2 id="preliminaries-and-problem-definitions">Preliminaries and Problem Definitions</h2>
<p><strong>Definition 1(Trajectory)</strong>: <img src="https://i.imgur.com/iTWuOi4.png" alt="">
軌跡包含了了數個有順序的點：
<img src="https://i.imgur.com/xKGQKun.png" alt="">
其中id代表哪位使用者，接下來依序為該點被蒐集的時間、經度、緯度與樓層。</p>
<p><strong>Definition 2(Slay Point)</strong>:<img src="https://i.imgur.com/zuBL4ui.png" alt="">
表示在某個時間區間內使用者所在的區域，其中分別代表使用者id、平均x、平均y、樓層以及進入與離開該區域的時間。
<img src="https://i.imgur.com/D4d3cI6.png" alt=""></p>
<p><strong>Definition 3(Location Set)</strong>:<img src="https://i.imgur.com/DXkvOLB.png" alt="">
在這篇論文中代表商店的集合。
<img src="https://i.imgur.com/RHqYcsg.png" alt="">
依序為商店的id、商店的形狀以及樓層。N 是商場中商店的數量。</p>
<p><strong>Definition 4(Location Sequence)</strong>:<img src="https://i.imgur.com/Xh1QLof.png" alt="">
代表一個使用者所經過的位置與順序。包含一連串在 stay point 的商店。</p>
<p>這篇論文主要就是分析一個使用者的 location sequence，來預測未來的移動位置。假設現在有個使用者 u：
<img src="https://i.imgur.com/yeMjtwT.png" alt="">
式子(1)表示用 location sequence 訓練後的 model 預測，最後得到接下來會拜訪這些商店的機率。
式子(2)表示從機率中選出一個最大的，也就是最有可能拜訪的商店，作為預測下一步位置的結果。</p>
<h2 id="methodology">Methodology</h2>
<p><img src="https://i.imgur.com/qzFvq0M.png" alt=""></p>
<p>方法可以分為四步：location sequence detection, multi-step transition probability matrix definition, adjacent location selection 跟 fusion multiple Markov chains。</p>
<p>首先，由於空間的連續性很難當作 input 給 model，因此要將移動軌跡轉換成跟特定商店有關的 location sequence。再來會定義一種新型的 multi-step Markov transition probability matrix，將 higher-order 的 Markov chain 變成 multiple first-order Markov chain。接著會為每位使用者選出最相鄰的位置。最後會把這些 first-order Markov chain 跟 LSTM model 結合起來，用來預測目標使用者。</p>
<h3 id="location-sequence-detection-method">Location Sequence Detection Method</h3>
<p>本篇論文用 indoor-STDBSCAN 演算法來找出個體移動軌跡中的 stay point。Indoor-STDBSCAN 演算法將軌跡分為 k 群，也就相當於有 k 個 stay points。
<img src="https://i.imgur.com/fSPQRLh.png" alt="">
其中 sd 是計算空間距離的函式，td 是計算時間距離的函式，等號左側表示集合中的點在時與空都相鄰。</p>
<p>用 indoor-STDBSCAN 演算法得出的 stay point 只有空間上的資訊而沒有語意(semantic)上的意義，因此用 nearest-neighbor search 賦予每個 stay point 意義(semantic)。
<img src="https://i.imgur.com/WqN3TgM.png" alt="">
做法是利用交點法(intersection method)判斷附近商店，以圖為例第二個 stay point 跟商店c的距離為d最靠近，若 d 小於距離門檻(δ)，就讓該 stay point 為使用者拜訪的商店。</p>
<h3 id="hybrid-markov-lstm-model">Hybrid Markov-LSTM Model</h3>
<h4 id="definition-of-the-multi-step-transition-probabilty-matrix">Definition of the Multi-Step Transition Probabilty Matrix</h4>
<p>k-MC model 描述一個使用者在不同位置間移動的機率，將 location sequence 中每個位置視為 random variable，用 joint probability 來預測使用者的下一步。
舉例來說，使用者 u 有個長度為 m 的 location sequence<img src="https://i.imgur.com/mSktgl7.png" alt="">，可以用 random variable 的形式表示。<img src="https://i.imgur.com/gE3e3cU.png" alt="">
使用者 u 的 k-order probability transition matrix<img src="https://i.imgur.com/uSBF8cU.png" alt="">，也可以表示為<img src="https://i.imgur.com/uB25UYb.png" alt=""></p>
<p>當 k 增加時，matrix 的增加幅度更加劇烈，讓位置預測不可行。因此，提出 k-step Markov chain。</p>
<p><strong>Definition 5(1-Step Transition Probability Matrix)</strong>:
1-step transition probability matrix
<img src="https://i.imgur.com/YX6ztpA.png" alt="">
1-order transition probability matrix
<img src="https://i.imgur.com/KwtdWpD.png" alt="">
，兩者都代表使用者 u 從location i 走一步到 location j 的機率。</p>
<p><img src="https://i.imgur.com/2j8qraU.png" alt="">
分母表示從 location i 走一步到 location j 的距離，分子表示從 location i 走一步到其他 location 的總距離，N 是商場中商店的數量。</p>
<p><strong>Definition 6(k-Step Transition Probability Matrix)</strong>:
<img src="https://i.imgur.com/4xWgZvi.png" alt="">
<img src="https://i.imgur.com/SXIZIT8.png" alt="">
一個 N * N 的矩陣，表示使用者 u 從 location i 移動 k 步到另一個地點的機率。</p>
<p><img src="https://i.imgur.com/yAWMsmt.png" alt="">
k-Step Transition Probability Matrix 也可以直接由 1-step transition probability matrix 得來，就是把它乘以 k 次。</p>
<p>透過這種方法，可以讓 k-MC 的機率矩陣大小與 1-MC 相同。
<img src="https://i.imgur.com/vJr1K1r.png" alt=""></p>
<h4 id="selection-of-the-best-adjacent-locations">Selection of the Best Adjacent Locations</h4>
<p>Markov-LSTM model 要決定 k 值，也就是要拿前幾個地點來預測下一步。如果 k 值太小，結果就與 1-MC 沒兩樣；如果 k 值太大，模型會變得太複雜跟 overfitting。</p>
<p>透過 cross-validation，找出讓 prediction error 最小的 k。因為每個是使用者都是彼此獨立的個體，所以每個人都 k 值都不同。</p>
<h4 id="fusion-of-multiple-markov-models">Fusion of Multiple Markov Models</h4>
<p>因為每個人都有自己 k 值，並建立自己的 k first-order Markov model，只是這限制了預測的能力。為了增進模型的預測能力，把 k 個預測的結果跟 LSTM model 結合。</p>
<p>由兩方面來討論模型的優化：</p>
<ol>
<li>以 Markov model 的角度來看，用多個 1-MC 來取代 k-MC 解決了dimensional disaster。</li>
<li>以 LSTM model 的角度來看，模型不只是從 sequence 找 pattern，而是從 transition probability 的角度來看使用者移動的趨勢。</li>
</ol>
<h4 id="algorithms-and-optimization">Algorithms and Optimization</h4>
<p>使用者的 location sequence 會被分成三部分：historical samples, training samples 跟 test samples。</p>
<p>historical sample 用來建立 k-step transition probobility matrix、training sample 用來定模型的參數，test sample 用來檢測模型預測的表現。</p>
<p>演算法如下：
<img src="https://i.imgur.com/oZkKRw5.png" alt=""></p>
<h4 id="model-complexity-analysis">Model Complexity Analysis</h4>
<p>從空間複雜度來看，k-step transition probability matrix 的大小是 k * N * N，改良後只要 N * N。
從運算的複雜度來看，由演算法的(7)跟(8)可知，算 first-order Markov matrix 比起 k-order 也明顯的複雜度較低。</p>
<h2 id="experimental-results-and-analysis">Experimental Results and Analysis</h2>
<h3 id="data-preparation">Data Preparation</h3>
<ol>
<li>Datasets</li>
</ol>
<p>實驗的數據主要來自於中國濟南某間商城的 50 位使用者連接 Wi-Fi 定位的資料，定位誤差在三公尺以內。</p>
<ol start="2">
<li>Data Preprocessing</li>
</ol>
<p>由於行動裝置訊號不穩定，導致數據的異常、錯誤與不合法。</p>
<p>資料集主要有三種類型的 noise：</p>
<ul>
<li>座標異常：超出研究範圍</li>
<li>時間異常：從移動軌跡取樣的兩點時間區間為0</li>
<li>樓層異常：短時間內在不同樓層間跳動</li>
</ul>
<ol start="3">
<li>Testbed and test device</li>
</ol>
<h3 id="evaluation-metrics-and-comparative-methods">Evaluation Metrics and Comparative Methods</h3>
<ol>
<li>Evalutation Metrics</li>
</ol>
<p>採用 Accuracy, Precision, Recall 跟 F1 作為評估參考。</p>
<ol start="2">
<li>Comparative Methods</li>
</ol>
<p>MC, HMM, RNN, LSTM,GRU 等模型。</p>
<h3 id="variable-estimation">Variable Estimation</h3>
<p>決定模型中的參數數值。</p>
<p>以距離門檻(δ)為例，若該值接近於 0，就只會配對到恰在 stay point 的商店；若該值趨於無限，所有的商店都再範圍內。經分析，分數曲線一開始成長快速，當 δ 大於 6M 後則趨於穩定。在這篇研究中將 δ 設為 4m。</p>
<p>每一位使用者都有自己的 k 值，也就是預測下一步位置所要參考的前幾個位置。由圖示可發現不同使用者最適合的 k 值都不同，也反映出他們是獨立個體。</p>
<p>LSTM 的 hidden states 以 128 為最佳大小。</p>
<p>跟其他模型的表現作比較，發現以 1-MC 的結果最差，與其他模型的分數有明顯斷層，其餘模型的表現接近線性增加，並且以 Markov-LSTM model 表現最好。</p>
<h2 id="conclusion-and-future-work">Conclusion and Future Work</h2>
<p>室內位置預測的準確在室內定位服務扮演重要角色，尤其是零售業。如果能預測使用者下一個會光顧的商店，同時推送會引起使用者興趣的資訊，不只能提供使用者個人化的購物經驗，更能增加零售業者的獲利。</p>
<p>Markov chain 因為高度的可詮釋性，已經被廣泛運用在位置預測上。然而 k-MC 因為維度的問題不適合 long sequence 的預測。這篇研究提出 Markov-LSTM model 來做室內位置的預測。</p>
<p>首先，定義出 multi-step Markov transition matrix，它將 k-MC 分解為數個 1-MC，解決了 k-MC 的維度問題。接著將數個 1-MC 跟 LSTM 結合來增進預測表現。</p>
<p>實驗使用 45 天來自 50 個使用者的真實室內移動軌跡來驗證該模型的表現。先用 control variable method 得到最適合的參數，再將參數套用到模型上看四種指標：Accuracy, Precision, Recall, F1 的分數。</p>
<p>尚可努力方向：</p>
<ul>
<li>用多元化的資料如 GPS 定位來測試模型</li>
<li>與其他預測模型進行廣泛的比較</li>
<li>採用更多參數以增進模型在位置預測的表現</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>不定長度數字序列的分類問題</title>
			<link>https://cherry900606.github.io/posts/seq_with_different_length/</link>
			<pubDate>Thu, 09 Dec 2021 22:11:58 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/seq_with_different_length/</guid>
			<description>題目敘述 從 binary malware file 轉成 number sequence，長度不一。最長的數字序列長度為14231552、最短為32。訓練資料共有3604筆，label數為2</description>
			<content type="html"><![CDATA[<h2 id="題目敘述">題目敘述</h2>
<p>從 binary malware file 轉成 number sequence，長度不一。最長的數字序列長度為14231552、最短為32。訓練資料共有3604筆，label數為28種 malware。</p>
<h2 id="前情提要">前情提要</h2>
<p>由於 sequence 的長度變動相當大，除了長度為50176的佔了大多數，其餘分布相當零散。如果全部 padding 到最大長度，在 colab 跑不起來；如果截長補短到325*325，用 CNN 訓練，正確率約在9%左右。</p>
<p>此篇嘗試另一種方法──以 markcov chain 這組關鍵字出發。</p>
<p>Markcov chain 是一種模型，描繪狀態與狀態間的轉變關係。也就是說，它只看「當下的狀態」與「新的input」來決定下一步是哪個狀態。這樣的方式運用在此例時，恰好能幫助擺脫 sequence 長度的限制。</p>
<p>LSTM 則是在此概念上更進一步，能夠記憶近期的資訊，並且遺忘部分資訊。</p>
<h2 id="方法嘗試">方法嘗試</h2>
<p>此節整理網路上的資料。</p>
<p><a href="https://github.com/keras-team/keras/issues/85">LSTM - Sequences with different num of time steps</a></p>
<ol>
<li>padding zeros 到同樣長度</li>
<li>batch_size=1，也就是一次只餵一筆資料進model</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">LSTM</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="n">return_sequences</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">chars</span><span class="p">))))</span>
</code></pre></div><p>這裡的input_shape=(timestep, feature dim)。因為長度不固定，timestep=None；feature dim則是feature的數量。
3. bucketing and padding。讓每一個bucket都是長度相近的seq，最後同個bucket的長度補到一樣。用 train_on_batch。</p>
]]></content>
		</item>
		
		<item>
			<title>Nachos hw1</title>
			<link>https://cherry900606.github.io/posts/nachos_hw1/</link>
			<pubDate>Wed, 13 Oct 2021 10:48:33 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/nachos_hw1/</guid>
			<description>安裝 sudo apt install csh g++ git clone https://gitlab.com/connlabtw21/nachos2021.git cd NachOS2021 sudo cp -r usr / cd code make make下去後會噴出很多訊息，這是正常的，等待幾分鐘後即結束。 Testing 測試是否下載成功。 cd userprog ./nachos -e ../test/test1 範例──</description>
			<content type="html"><![CDATA[<h2 id="安裝">安裝</h2>
<pre><code>sudo apt install csh g++
git clone https://gitlab.com/connlabtw21/nachos2021.git
cd NachOS2021
sudo cp -r usr /
cd code
make
</code></pre><p>make下去後會噴出很多訊息，這是正常的，等待幾分鐘後即結束。</p>
<h2 id="testing">Testing</h2>
<p>測試是否下載成功。</p>
<pre><code>cd userprog
./nachos -e ../test/test1
</code></pre><p><img src="https://i.imgur.com/sExYdU0.png" alt=""></p>
<h2 id="範例實作system-call">範例──實作system call</h2>
<ol>
<li>在 /code/userprog/syscall.h 加入 <code>#define SC_Example 13</code></li>
<li>在 /code/userprog/syscall.h 加入 <code>void Example(int number);</code></li>
<li>在 /code/userprog/exception.cc 加入</li>
</ol>
<pre><code>case SC_Example:
    val=kernel-&gt;machine-&gt;ReadRegister(4);
    cout&lt;&lt;&quot;Example value:&quot;&lt;&lt;val&lt;&lt;endl;
    return;
</code></pre><ol start="4">
<li>在 /code/test/start.s 加入</li>
</ol>
<pre><code>    .globl Example
    .ent Example
Example:
    addiu   $2,$0,SC_Example
    syscall
    j   $31
    .end Example
</code></pre><ol start="5">
<li>在 /code/test 新增 example.c</li>
</ol>
<pre><code>#include &quot;syscall.h&quot;
main(){
    int n;
    for(n=1;n&lt;5;n++)
        Example(n);
}
</code></pre><ol start="6">
<li>
<p>修改 /code/test/Makefile
<img src="https://i.imgur.com/2XcVrW8.png" alt=""></p>
</li>
<li>
<p>回到 /code 目錄底下， 輸入 <code>make</code> 指令recomplie</p>
</li>
<li></li>
</ol>
<pre><code>cd userprog
./nachos -e ../test/example
</code></pre><p><img src="https://i.imgur.com/AtrB6tr.png" alt=""></p>
<h2 id="實作threadyield">實作ThreadYield</h2>
<p><code>ThreadYield()</code> 顧名思義，就是強制讓CPU去執行下一個thread。</p>
<p>根據助教提供的提示，到nachos的code翻翻看，會看到thread.h這個檔案，裡面定義了與thread相關的一些功能。其中就有看起來能用到的<code>Yield()</code>。</p>
<p>現在的問題是: 該怎麼調用這個函式?回到 <code>exception.cc</code> 中，發現其他幾個case如果要呼叫的話，都是用 <code>kernel-&gt;xx-&gt;yy()</code> 的形式。以SC_PrintInt為例，它有一行 <code>kernel-&gt;machine-&gt;ReadRegister()</code>。如果看machine.h，會發現底下也有這麼一個函式。</p>
<p>既然如此，那就模仿這個寫法試試看好了。</p>
<p>照著範例的步驟操作，其中1、2、4、6步已經被寫好了。不過記得，要先找到是哪個變數掌管當前的thread，才能用它來呼叫yield。因此需要trace code。</p>
<p>在main.cc中可以觀察到kernel被Intialize，因此回過頭檢視kernel.h，恰好在這裡發現了 Thread *currentThread 這行，同時註解也說明這個pointer掌握CPU，看來就是關鍵。</p>
<p>在 /code/userprog/exception.cc 加入</p>
<pre><code>case SC_ThreadYield:
    cout&lt;&lt;&quot;Call ThreadYield&quot;&lt;&lt;endl;
    kernel-&gt;currentThread-&gt;Yield();
    return
</code></pre><p>修改 /code/test/example.c</p>
<pre><code>#include &quot;syscall.h&quot;
main(){
    PrintInt(88);
    ThreadYield();
    PrintInt(99);
}
</code></pre><p>重新recompile後，在 ./code/userprog 底下執行指令 <code>./nachos -e ../test/example -e ../test/test1</code>，結果如下:
<img src="https://i.imgur.com/Odz67TL.png" alt=""></p>
<h2 id="實作log">實作Log</h2>
<p>題目要求每當呼叫Log時，要把字元參數以特定格式寫入NachOS.log這個檔案。此外，若遇到特定的字母，就要改寫&quot;error&quot;。</p>
<p>整理後可知需要能:</p>
<ol>
<li>接收字元參數</li>
<li>判斷字元</li>
<li>建立檔案並以特定名稱命名(若檔案不存在)</li>
<li>寫入\打開檔案</li>
</ol>
<p>前兩項要求不難，基本上跟範例沒兩樣，只是從整數改成字元而已。後兩項就需要進一步思考如何達成。</p>
<p>上一個練習需要探索/code/thread底下的文件，這個則可以從/code/filesys找到線索。</p>
<p>在filesys.h中，發現裡面的Create(char*)、Open(char*)好像能用來建立檔案。同時，openfile.h中的WriteAt(char*,int,int)也是需要的。</p>
<p>在 syscall.h 中加入 <code>#define SC_Log 14</code> 跟 <code>void Log(char);</code></p>
<p>在 start.s 加入</p>
<pre><code>        .globl Log
        .ent Log
Log:
        addiu   $2,$0,SC_Log
        syscall
        j       $31
        .end    Log
</code></pre><p>在 exception.cc 加入</p>
<pre><code>		case SC_Log:
			//cout&lt;&lt;&quot;call log&quot;&lt;&lt;endl;
			file = kernel-&gt;fileSystem-&gt;Open((char*)&quot;NachOS.log&quot;);
			if(!file){
				cout&lt;&lt;&quot;Create log file&quot;&lt;&lt;endl;
				kernel-&gt;fileSystem-&gt;Create((char *)&quot;NachOS.log&quot;,0);
				file = kernel-&gt;fileSystem-&gt;Open((char*)&quot;NachOS.log&quot;);
			}
			c = kernel-&gt;machine-&gt;ReadRegister(4);
			if(c=='t'||c=='T'){
				cout&lt;&lt;&quot;[B10832019_Log]error&quot;&lt;&lt;endl;
				file-&gt;WriteAt((char*)&quot;[B10832019_Log]error\n&quot;,21,file-&gt;Length());
			}
			else{
				cout&lt;&lt;&quot;[B10832019_Log]&quot;&lt;&lt;c&lt;&lt;endl;
				file-&gt;WriteAt((char*)&quot;[B10832019_Log]&quot;,15,file-&gt;Length());
				file-&gt;WriteAt(&amp;c,1,file-&gt;Length());
				file-&gt;WriteAt((char*)&quot;\n&quot;,1,file-&gt;Length());
			}
			return;
</code></pre><p>新增 mytest.c</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&#34;syscall.h&#34;</span><span class="cp">
</span><span class="cp"></span><span class="n">main</span><span class="p">(){</span>
	<span class="n">Log</span><span class="p">(</span><span class="sc">&#39;a&#39;</span><span class="p">);</span>
	<span class="n">Log</span><span class="p">(</span><span class="sc">&#39;t&#39;</span><span class="p">);</span>
	<span class="n">Log</span><span class="p">(</span><span class="sc">&#39;b&#39;</span><span class="p">);</span>
	<span class="n">Log</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>修改Makefile</p>
<pre><code>all: halt shell matmult sort test1 test2 example mytest 

(中略)

mytest: mytest.o start.o
	$(LD) $(LDFLAGS) start.o mytest.o -o mytest.coff
	../bin/coff2noff mytest.coff mytest
</code></pre><p><img src="https://i.imgur.com/GsBRuBW.png" alt=""></p>
<p><img src="https://i.imgur.com/9A1O42z.png" alt=""></p>
<h2 id="遇到的錯誤訊息">遇到的錯誤訊息</h2>
<ol>
<li>沒寫SC_xx 會有error</li>
<li>exception.cc  variable error in switch case</li>
</ol>
<p>好像是case中若要宣告變數，需要在{}中，不然就是在外面宣告</p>
<ol start="3">
<li>
<p>tab vs 空格 in makefile
空格會報錯。</p>
</li>
<li>
<p>網路文件大小寫未必正確 ex: openfile的length()</p>
</li>
<li>
<p>bool Create(char *name, int initialSize)</p>
</li>
</ol>
<p>實作跟宣告的參數不一樣，一直有error。</p>
]]></content>
		</item>
		
		<item>
			<title>CDMC2021 task3</title>
			<link>https://cherry900606.github.io/posts/cdmc2021_task3/</link>
			<pubDate>Sun, 10 Oct 2021 14:18:02 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/cdmc2021_task3/</guid>
			<description>目標 因為跟syscall很相似，我就用了相近的方法處理，不過實作細節略有不同。 整體而言，都是找出出現過的string類型，依照出現次數進行預</description>
			<content type="html"><![CDATA[<h2 id="目標">目標</h2>
<p>因為跟syscall很相似，我就用了相近的方法處理，不過實作細節略有不同。</p>
<p>整體而言，都是找出出現過的string類型，依照出現次數進行預測。</p>
<h2 id="程式">程式</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;./CDMC2021_IoTMalware_Train.data&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span><span class="p">()]</span>

<span class="n">word_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
  <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">row</span><span class="p">:</span>
    <span class="n">words</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;;&#39;</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
      <span class="n">word_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
<span class="c1">#word_list</span>
</code></pre></div><p>word_list是紀錄所有出現過的類型。因為原始資料會以分號隔開不同node，但我的作法不考慮node的影響，所以會直接切開。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
<span class="n">words_to_count</span> <span class="o">=</span> <span class="p">(</span><span class="n">word</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">word_list</span><span class="p">)</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">words_to_count</span><span class="p">)</span>

<span class="n">max_number</span> <span class="o">=</span> <span class="mi">25000</span>

<span class="n">top_word</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="n">max_number</span><span class="p">)</span>
<span class="n">top_wordlist</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">word</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">top_word</span><span class="p">):</span>
  <span class="n">top_wordlist</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div><p>這裡利用Counter，算出出現過的類型跟次數，並且以dict型態回傳。</p>
<p>因為取全部類型在colab運行時，記憶體會炸掉，所以max_number只取最常出現的25000種。</p>
<p>top_word得到前25000種的dict，接著把key單獨取出來。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">word_listoflist</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
  <span class="n">l</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">row</span><span class="p">:</span>
    <span class="n">words</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;;&#39;</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
      <span class="n">l</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
  <span class="n">word_listoflist</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</code></pre></div><p>前面是把所有資料都一股腦塞進一個list，這邊則是每筆資料一個list，統整到一個list中，方便後續處理。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">max_number</span><span class="p">))</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
  <span class="n">words_to_count</span> <span class="o">=</span> <span class="p">(</span><span class="n">word</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">word_listoflist</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
  <span class="n">row_count</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">words_to_count</span><span class="p">)</span>

  <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_number</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">top_wordlist</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="ow">in</span> <span class="n">row_count</span><span class="p">:</span>
      <span class="n">X</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">row_count</span><span class="p">[</span><span class="n">top_wordlist</span><span class="p">[</span><span class="n">j</span><span class="p">]]</span>
</code></pre></div><p>針對選出來的25000個種類，看每筆data的出現次數。</p>
<p>再來就差不多能進行預測了。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">Y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">i</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;./CDMC2021_IoTMalware_Train.label&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span><span class="p">()])</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s1">&#39;int&#39;</span><span class="p">)</span>
<span class="n">Y</span> <span class="o">=</span> <span class="n">Y</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">)</span>

<span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="n">scaler</span> <span class="o">=</span> <span class="n">StandardScaler</span><span class="p">()</span>
<span class="n">scaler</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">scaler</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>

<span class="c1"># split training set and testing set</span>
<span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
<span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span> <span class="n">Y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.25</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">66</span><span class="p">)</span>

<span class="kn">from</span> <span class="nn">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LogisticRegression</span>
<span class="n">clf</span> <span class="o">=</span> <span class="n">LogisticRegression</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">66</span><span class="p">)</span>
<span class="n">clf</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;train acc:&#39;</span><span class="p">,</span> <span class="n">clf</span><span class="o">.</span><span class="n">score</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;test acc:&#39;</span><span class="p">,</span> <span class="n">clf</span><span class="o">.</span><span class="n">score</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">Y_test</span><span class="p">))</span>

<span class="kn">from</span> <span class="nn">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">RandomForestClassifier</span>
<span class="n">rf</span> <span class="o">=</span> <span class="n">RandomForestClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">66</span><span class="p">)</span>
<span class="n">rf</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;train acc:&#39;</span><span class="p">,</span> <span class="n">rf</span><span class="o">.</span><span class="n">score</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;test acc:&#39;</span><span class="p">,</span> <span class="n">rf</span><span class="o">.</span><span class="n">score</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">Y_test</span><span class="p">))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Keras 筆記</title>
			<link>https://cherry900606.github.io/posts/keras_note/</link>
			<pubDate>Mon, 20 Sep 2021 22:34:47 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/keras_note/</guid>
			<description>常用import from keras.models import Sequential from keras.layers.core import Dense, Dropout, Activation from keras.layers import Conv2D, MaxPooling2D, Flatten, Conv1D, MaxPooling1D from keras.utils import np_utils from tensorflow.keras.optimizers import SGD, Adam define model model = Sequential() model.add(Dense(input_dim=28 * 28, units=689, activation=&amp;#39;relu&amp;#39;)) model.add(Dropout(0.7)) model.add(Dense(units=689, activation=&amp;#39;relu&amp;#39;)) model.add(Dropout(0.7)) model.add(Dense(units=10, activation=&amp;#39;softmax&amp;#39;)) input layer 需要設定input_dim或者in</description>
			<content type="html"><![CDATA[<h2 id="常用import">常用import</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">keras.models</span> <span class="kn">import</span> <span class="n">Sequential</span>
<span class="kn">from</span> <span class="nn">keras.layers.core</span> <span class="kn">import</span> <span class="n">Dense</span><span class="p">,</span> <span class="n">Dropout</span><span class="p">,</span> <span class="n">Activation</span>
<span class="kn">from</span> <span class="nn">keras.layers</span> <span class="kn">import</span> <span class="n">Conv2D</span><span class="p">,</span> <span class="n">MaxPooling2D</span><span class="p">,</span> <span class="n">Flatten</span><span class="p">,</span> <span class="n">Conv1D</span><span class="p">,</span> <span class="n">MaxPooling1D</span>
<span class="kn">from</span> <span class="nn">keras.utils</span> <span class="kn">import</span> <span class="n">np_utils</span>
<span class="kn">from</span> <span class="nn">tensorflow.keras.optimizers</span> <span class="kn">import</span> <span class="n">SGD</span><span class="p">,</span> <span class="n">Adam</span>
</code></pre></div><h2 id="define-model">define model</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">model</span> <span class="o">=</span> <span class="n">Sequential</span><span class="p">()</span>

<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="n">input_dim</span><span class="o">=</span><span class="mi">28</span> <span class="o">*</span> <span class="mi">28</span><span class="p">,</span> <span class="n">units</span><span class="o">=</span><span class="mi">689</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">&#39;relu&#39;</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.7</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="n">units</span><span class="o">=</span><span class="mi">689</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">&#39;relu&#39;</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.7</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="n">units</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">&#39;softmax&#39;</span><span class="p">))</span>
</code></pre></div><p>input layer 需要設定input_dim或者input_shape，依據data本身的shape設定，之後的layer則不用。units表示每層的神經元數目。
最後一層的units需與預測種類的數目一致，以MNIST為例，因為有0~9共10個數字，因此要設為10。</p>
<h2 id="goodness-of-function">goodness of function</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">model</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">loss</span><span class="o">=</span><span class="s1">&#39;categorical_crossentropy&#39;</span><span class="p">,</span> <span class="n">optimizer</span><span class="o">=</span><span class="s1">&#39;adam&#39;</span><span class="p">,</span> <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;accuracy&#39;</span><span class="p">])</span>
</code></pre></div><h2 id="訓練">訓練</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</code></pre></div><h2 id="testing--predict">testing &amp; predict</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">result_train</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">evaluate</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;Train Loss:&#39;</span><span class="p">,</span> <span class="n">result_train</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;Train Acc:&#39;</span><span class="p">,</span> <span class="n">result_train</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div><h2 id="其他">其他</h2>
<p>以MNIST為例，其label是以十進位表示，必須轉換表達方式。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">Y_train</span> <span class="o">=</span> <span class="n">np_utils</span><span class="o">.</span><span class="n">to_categorical</span><span class="p">(</span><span class="n">Y_train</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</code></pre></div><p>使用conv(卷積層)時，可能會出現input_shape方面的錯誤。以Conv2D為例，要求的input shape為3維(寬:高:層數)，此時reshape成相應格式即可。
以MNIST為例，用mnist.load_data()讀取資料後:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">X_train</span> <span class="o">=</span> <span class="n">X_train</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">X_train</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">X_test</span> <span class="o">=</span> <span class="n">X_test</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">X_test</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div><p>或者使用Conv1D，我對syscall得到的X_train與X_test進行處理:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">X_train</span> <span class="o">=</span> <span class="n">X_train</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">X_train</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">X_test</span> <span class="o">=</span> <span class="n">X_test</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">X_test</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div><p>總之，就是依需求調整shape。</p>
<p>最後放上syscall的keras+CNN的部分code，方便以後參考:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">model</span> <span class="o">=</span> <span class="n">Sequential</span><span class="p">()</span>

<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Conv1D</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">&#39;relu&#39;</span><span class="p">,</span> <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="mi">173</span><span class="p">,</span> <span class="mi">1</span><span class="p">)))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">MaxPooling1D</span><span class="p">(</span><span class="n">pool_size</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Conv1D</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">&#39;relu&#39;</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">MaxPooling1D</span><span class="p">(</span><span class="n">pool_size</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Conv1D</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">&#39;relu&#39;</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">MaxPooling1D</span><span class="p">(</span><span class="n">pool_size</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>


<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Flatten</span><span class="p">())</span>

<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="n">units</span><span class="o">=</span><span class="mi">250</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">&#39;relu&#39;</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="n">units</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">&#39;relu&#39;</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="n">units</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">&#39;relu&#39;</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="n">units</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">&#39;softmax&#39;</span><span class="p">))</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>機器學習基石 作業一</title>
			<link>https://cherry900606.github.io/posts/ml_foundation_hw1/</link>
			<pubDate>Sun, 19 Sep 2021 13:25:40 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/ml_foundation_hw1/</guid>
			<description>Questions 15~17 根據講義的演算法進行實作: 資料前處理 import numpy as np data = np.array([i.strip().split() for i in open(&amp;#34;./data.dat&amp;#34;).readlines()]) X_train = data[:, :4] Y_train = data[:, -1] xzero = np.ones((X_train.shape[0], 1)) X_train = np.concatenate((xzero, X_train), axis=1).astype(&amp;#39;float&amp;#39;) Y_train = Y_train.astype(&amp;#39;float&amp;#39;) 會用到的函式 def sign(x): if x &amp;lt;=0 : return -1 else: return 1 def _shuffle(X,</description>
			<content type="html"><![CDATA[<h2 id="questions-1517">Questions 15~17</h2>
<p>根據講義的演算法進行實作:
<img src="https://i.imgur.com/FgwvbSQ.png" alt=""></p>
<h3 id="資料前處理">資料前處理</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">i</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;./data.dat&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span><span class="p">()])</span>
<span class="n">X_train</span> <span class="o">=</span> <span class="n">data</span><span class="p">[:,</span> <span class="p">:</span><span class="mi">4</span><span class="p">]</span>
<span class="n">Y_train</span> <span class="o">=</span> <span class="n">data</span><span class="p">[:,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="n">xzero</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="n">X_train</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span><span class="p">))</span>
<span class="n">X_train</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">xzero</span><span class="p">,</span> <span class="n">X_train</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s1">&#39;float&#39;</span><span class="p">)</span>
<span class="n">Y_train</span> <span class="o">=</span> <span class="n">Y_train</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s1">&#39;float&#39;</span><span class="p">)</span>
</code></pre></div><h3 id="會用到的函式">會用到的函式</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">sign</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;=</span><span class="mi">0</span> <span class="p">:</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">1</span>
    
<span class="k">def</span> <span class="nf">_shuffle</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">):</span>
    <span class="n">index</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">X</span><span class="p">))</span>
    <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">X</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="n">Y</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">PLA</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">eta</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
    <span class="n">update_time</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">w</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">X_train</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">1</span><span class="p">))</span>

    <span class="k">if</span> <span class="n">shuffle</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span> <span class="o">=</span> <span class="n">_shuffle</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>

    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">isFinish</span> <span class="o">=</span> <span class="bp">True</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">X_train</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>

            <span class="k">if</span> <span class="n">sign</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">X_train</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">w</span><span class="p">))</span> <span class="o">!=</span> <span class="n">Y_train</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">w</span> <span class="o">=</span> <span class="n">w</span> <span class="o">+</span> <span class="n">eta</span><span class="o">*</span><span class="p">(</span><span class="n">Y_train</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">X_train</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
                <span class="n">isFinish</span> <span class="o">=</span> <span class="bp">False</span>
                <span class="n">update_time</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="k">if</span> <span class="n">isFinish</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>
            <span class="k">break</span>
    <span class="k">return</span> <span class="n">update_time</span>
</code></pre></div><h3 id="執行">執行</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 第15題</span>
<span class="n">PLA</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>

<span class="c1"># 第16題</span>
<span class="n">total_update</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2000</span><span class="p">):</span>
    <span class="n">total_update</span> <span class="o">+=</span> <span class="n">PLA</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">total_update</span> <span class="o">/</span> <span class="mi">2000</span><span class="p">)</span>

<span class="c1"># 第17題</span>
<span class="n">total_update</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2000</span><span class="p">):</span>
    <span class="n">total_update</span> <span class="o">+=</span> <span class="n">PLA</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">eta</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">total_update</span> <span class="o">/</span> <span class="mi">2000</span><span class="p">)</span>
</code></pre></div><h2 id="questions-1820">Questions 18~20</h2>
<p>修改PLA的部分內容即可。
<img src="https://i.imgur.com/7HBO3Jr.png" alt=""></p>
<h3 id="資料前處理函式定義">資料前處理、函式定義</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>

<span class="n">train_data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">i</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;./train.dat&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span><span class="p">()])</span>
<span class="n">test_data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">i</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;./test.dat&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span><span class="p">()])</span>

<span class="n">X_train</span> <span class="o">=</span> <span class="n">train_data</span><span class="p">[:,</span> <span class="p">:</span><span class="mi">4</span><span class="p">]</span>
<span class="n">Y_train</span> <span class="o">=</span> <span class="n">train_data</span><span class="p">[:,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="n">X_test</span> <span class="o">=</span> <span class="n">test_data</span><span class="p">[:,</span> <span class="p">:</span><span class="mi">4</span><span class="p">]</span>
<span class="n">Y_test</span> <span class="o">=</span> <span class="n">test_data</span><span class="p">[:,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="n">xzero</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="n">X_train</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span><span class="p">))</span>
<span class="n">X_train</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">xzero</span><span class="p">,</span> <span class="n">X_train</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s1">&#39;float&#39;</span><span class="p">)</span>
<span class="n">Y_train</span> <span class="o">=</span> <span class="n">Y_train</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s1">&#39;float&#39;</span><span class="p">)</span>

<span class="n">xzero</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="n">X_test</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span><span class="p">))</span>
<span class="n">X_test</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">xzero</span><span class="p">,</span> <span class="n">X_test</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s1">&#39;float&#39;</span><span class="p">)</span>
<span class="n">Y_test</span> <span class="o">=</span> <span class="n">Y_test</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s1">&#39;float&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">sign</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;=</span><span class="mi">0</span> <span class="p">:</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">1</span>
    
<span class="k">def</span> <span class="nf">_shuffle</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">):</span>
    <span class="n">index</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">X</span><span class="p">))</span>
    <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">X</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="n">Y</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</code></pre></div><h3 id="pocket">pocket</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">pocket</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">eta</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
    <span class="n">update_time</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">min_error</span> <span class="o">=</span> <span class="n">X_train</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">w</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">X_train</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">1</span><span class="p">))</span>
    <span class="n">w_pocket</span> <span class="o">=</span> <span class="n">w</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">shuffle</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span> <span class="o">=</span> <span class="n">_shuffle</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">X_train</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
        <span class="n">error</span> <span class="o">=</span> <span class="mi">0</span>
            
        <span class="k">if</span> <span class="n">sign</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">X_train</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">w</span><span class="p">))</span> <span class="o">!=</span> <span class="n">Y_train</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
            <span class="n">w</span> <span class="o">=</span> <span class="n">w</span> <span class="o">+</span> <span class="n">eta</span><span class="o">*</span><span class="p">(</span><span class="n">Y_train</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">X_train</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
            <span class="n">isFinish</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="n">update_time</span> <span class="o">+=</span> <span class="mi">1</span>
                
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">X_train</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
                <span class="k">if</span> <span class="n">sign</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">X_train</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">w</span><span class="p">))</span> <span class="o">!=</span> <span class="n">Y_train</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
                     <span class="n">error</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">error</span> <span class="o">&lt;</span> <span class="n">min_error</span><span class="p">:</span>
                <span class="n">min_error</span> <span class="o">=</span> <span class="n">error</span>
                <span class="n">w_pocket</span> <span class="o">=</span> <span class="n">w</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
        
        <span class="k">if</span> <span class="n">update_time</span> <span class="o">==</span> <span class="mi">50</span><span class="p">:</span>
            <span class="k">break</span>
    <span class="k">return</span> <span class="n">w_pocket</span>

<span class="k">def</span> <span class="nf">get_error</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">w</span><span class="p">):</span>
    <span class="n">error</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
        <span class="k">if</span> <span class="n">sign</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">w</span><span class="p">))</span> <span class="o">!=</span> <span class="n">Y</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
            <span class="n">error</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">error</span><span class="o">/</span><span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>                            
</code></pre></div><h3 id="執行-1">執行</h3>
<p>根據題目要求修改pocket函式部分內容，重跑執行區塊即可。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">total_error</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2000</span><span class="p">):</span>
    <span class="n">w_pocket</span> <span class="o">=</span> <span class="n">pocket</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">total_error</span> <span class="o">+=</span> <span class="n">get_error</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">Y_test</span><span class="p">,</span> <span class="n">w_pocket</span><span class="p">)</span>
    
    <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="mi">100</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        
<span class="n">total_error</span><span class="o">/</span><span class="mi">2000</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>在hugo hermit主題增加分頁功能</title>
			<link>https://cherry900606.github.io/posts/pagination/</link>
			<pubDate>Sat, 11 Sep 2021 11:53:57 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/pagination/</guid>
			<description>根據這篇文章的說明，可以在hugo的hermit主題自行增加分頁功能，不然hermit本身不會換頁。 我在「在對應的CSS樣式文件中添加以下」</description>
			<content type="html"><![CDATA[<p>根據<a href="https://fffou.com/post/2020-05-14/">這篇文章</a>的說明，可以在hugo的hermit主題自行增加分頁功能，不然hermit本身不會換頁。</p>
<p>我在「在對應的CSS樣式文件中添加以下」的步驟遇上困難，不知道具體該怎麼做。</p>
<p>方法就是在/layouts/partials中直接新增一個pagination.css的檔案，把那段code貼上去就好了。</p>
<p>不過似乎還是有錯誤，導致理想中的效果無法呈現，這部分待以後研究。</p>
]]></content>
		</item>
		
		<item>
			<title>syscall</title>
			<link>https://cherry900606.github.io/posts/syscall/</link>
			<pubDate>Sun, 05 Sep 2021 14:25:03 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/syscall/</guid>
			<description>目標 閱讀README.txt，裡面提到用label.txt內有列出的檔案即可。 label.txt的內容分為兩部分: 檔案名稱與對應的malwa</description>
			<content type="html"><![CDATA[<h2 id="目標">目標</h2>
<p>閱讀README.txt，裡面提到用label.txt內有列出的檔案即可。</p>
<p>label.txt的內容分為兩部分: 檔案名稱與對應的malware類型。</p>
<p>資料夾strace19000內則有相當多的檔案，不過其中只有檔名出現在label.txt的檔案才會被用到。每個檔案內容由不同的system call組成，檔案長度不一。</p>
<p>本次練習的目標是根據有被label的檔案的system call，預測對應的malware類型。</p>
<h2 id="想法">想法</h2>
<p>建立一個二維陣列的表格，紀錄每一個檔案中不同的system call出現的次數。根據這個表格訓練模型。</p>
<p>因此，我們要:</p>
<ol>
<li>找出所有出現過的system call種類</li>
<li>統計每個檔案出現過哪些system call，以及出現的次數</li>
</ol>
<h2 id="程式">程式</h2>
<h3 id="讀檔與前處理">讀檔與前處理</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>

<span class="c1"># read file</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;./syscall/label.txt&#39;</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">file</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">str</span><span class="p">)</span>
    <span class="n">label_file</span> <span class="o">=</span> <span class="n">data</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]</span>
    <span class="n">target</span> <span class="o">=</span> <span class="n">data</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">]</span>
</code></pre></div><p>先把label.txt通通讀進來，用空白做切割。之後再分別放進label_file與target。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># explore data</span>
<span class="n">unique</span><span class="p">,</span> <span class="n">counts</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">unique</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">return_counts</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">unique</span><span class="p">,</span> <span class="n">counts</span><span class="p">))</span>
</code></pre></div><p>看看target總共有哪些種類，以及每個種類的個數。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># convert label into file name</span>
<span class="n">labeled_file_name</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="s1">&#39;syscall_&#39;</span><span class="o">+</span><span class="n">line</span><span class="o">+</span><span class="s1">&#39;-straceLog.tx&#39;</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">label_file</span><span class="p">],</span> 
                             <span class="n">dtype</span><span class="o">=</span><span class="nb">str</span><span class="p">)</span>
</code></pre></div><p>因為strace19000中的檔名跟label.txt裡面的不太一樣，為了方便先轉成對應格式。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">syscall_set</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
<span class="n">data_size</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">labeled_file_name</span><span class="p">)</span> <span class="c1">#2000</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">labeled_file_name</span><span class="p">)):</span>
    <span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;./syscall/strace19000/&#39;</span><span class="o">+</span><span class="n">labeled_file_name</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
        <span class="n">syscall</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">file</span><span class="p">])</span>
        <span class="n">syscall_set</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">syscall</span><span class="p">))</span>
        <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="mi">100</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s1">&#39;{}/{}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">labeled_file_name</span><span class="p">)))</span>
        
        <span class="c1">#先讀前1000筆看看?</span>
        <span class="k">if</span> <span class="n">i</span><span class="o">==</span><span class="n">data_size</span><span class="p">:</span>
            <span class="k">break</span>
</code></pre></div><p>這裡是把strace19000中有被label的檔案讀一遍，目的是統計所有出現過的system call種類，把它們以set記錄起來。
因為一次讀完所有被label的檔案會有點久，設data_size可以先用一部份資料訓練看看。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">syscall_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">syscall_set</span><span class="p">)</span>
<span class="n">table</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">data_size</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">syscall_list</span><span class="p">)))</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">labeled_file_name</span><span class="p">)):</span>
    <span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;./syscall/strace19000/&#39;</span><span class="o">+</span><span class="n">labeled_file_name</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
        <span class="c1"># 先讀前1000筆看看?</span>
        <span class="k">if</span> <span class="n">i</span><span class="o">==</span><span class="n">data_size</span><span class="p">:</span>
            <span class="k">break</span>
        
        <span class="n">syscall</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">file</span><span class="p">])</span>
        <span class="n">unique</span><span class="p">,</span> <span class="n">counts</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">unique</span><span class="p">(</span><span class="n">syscall</span><span class="p">,</span> <span class="n">return_counts</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">sys_dict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">unique</span><span class="p">,</span> <span class="n">counts</span><span class="p">))</span>
        
        <span class="c1"># fill table</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">syscall_list</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">syscall_list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="ow">in</span> <span class="n">sys_dict</span><span class="p">:</span>
                <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">sys_dict</span><span class="p">[</span><span class="n">syscall_list</span><span class="p">[</span><span class="n">j</span><span class="p">]]</span>

        <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="mi">100</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s1">&#39;{}/{}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">labeled_file_name</span><span class="p">)))</span>
</code></pre></div><p>有了所有的system call種類後，就可以來統計數字了。
table就是那張表格，row數代表有多少個labeled file，column代表有多少種system call。</p>
<p>每讀一個檔案，就把所有的syscall轉成dictionary，裡面有類型跟出現次數。接著拿syscall_list遍歷，如果該種類在這個file出現過，那就更新table數字，沒有的話就不用管了，因為一開始宣告的就是zero numpy array。</p>
<h3 id="訓練與測試">訓練與測試</h3>
<p>接下來要做的，就是切割成訓練集跟測試集！</p>
<p>為了讓參數相同的情況下結果一致，所以設定radom_state。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># split training set and testing set</span>
<span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
<span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span> <span class="n">Y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="n">target</span><span class="p">[:</span><span class="n">data_size</span><span class="p">],</span> 
                                                    <span class="n">test_size</span><span class="o">=</span><span class="mf">0.25</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">66</span><span class="p">)</span>
</code></pre></div><p>分別用logistic regression, SVM, random forest訓練。</p>
<h3 id="一般">一般</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># training and testing</span>
<span class="kn">from</span> <span class="nn">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LogisticRegression</span>
<span class="n">clf</span> <span class="o">=</span> <span class="n">LogisticRegression</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">66</span><span class="p">)</span>
<span class="n">clf</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>
<span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">accuracy_score</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;---logistic regression---&#39;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;train acc:&#39;</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_train</span><span class="p">,</span> <span class="n">clf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;test acc:&#39;</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_test</span><span class="p">,</span> <span class="n">clf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)))</span>

<span class="kn">from</span> <span class="nn">sklearn.svm</span> <span class="kn">import</span> <span class="n">SVC</span>
<span class="n">svm</span> <span class="o">=</span> <span class="n">SVC</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">66</span><span class="p">)</span>
<span class="n">svm</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;---SVM---&#39;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;train acc:&#39;</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_train</span><span class="p">,</span> <span class="n">svm</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;test acc:&#39;</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_test</span><span class="p">,</span> <span class="n">svm</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)))</span>

<span class="kn">from</span> <span class="nn">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">RandomForestClassifier</span>
<span class="n">rf</span> <span class="o">=</span> <span class="n">RandomForestClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">66</span><span class="p">)</span>
<span class="n">rf</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;---random forest---&#39;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;train acc:&#39;</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_train</span><span class="p">,</span> <span class="n">rf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;test acc:&#39;</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_test</span><span class="p">,</span> <span class="n">rf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)))</span>
</code></pre></div><p>分數如下:</p>
<pre><code>---logistic regression---
train acc: 0.8646019278828989
test acc: 0.8704149933065596
---SVM---
train acc: 0.8961977865048197
test acc: 0.8966532797858099
---random forest---
train acc: 0.9991967154587648
test acc: 0.9775100401606426
</code></pre><p>發現random forest的分數明顯比其他兩者好上太多。但如果對資料再做些處理呢?</p>
<h3 id="feature-selection">feature selection</h3>
<p>有些system call在所有file出現過的次數很少，如果把它們移除，或許能提升分數。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># find the features that ouccrence times are less than 100 in all label file</span>
<span class="k">print</span><span class="p">(</span><span class="n">table</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)[</span><span class="n">table</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">table</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">))</span>
<span class="n">drop_feature</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">table</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">)</span>
<span class="n">new_table</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="n">drop_feature</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div><p>把次數小於10次的那幾個column移除。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span> <span class="n">Y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">new_table</span><span class="p">,</span> <span class="n">target</span><span class="p">[:</span><span class="n">data_size</span><span class="p">],</span> 
                                                    <span class="n">test_size</span><span class="o">=</span><span class="mf">0.25</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">66</span><span class="p">)</span>

<span class="kn">from</span> <span class="nn">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LogisticRegression</span>
<span class="n">clf</span> <span class="o">=</span> <span class="n">LogisticRegression</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">66</span><span class="p">)</span>
<span class="n">clf</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>
<span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">accuracy_score</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;---logistic regression---&#39;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;train acc:&#39;</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_train</span><span class="p">,</span> <span class="n">clf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;test acc:&#39;</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_test</span><span class="p">,</span> <span class="n">clf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)))</span>

<span class="kn">from</span> <span class="nn">sklearn.svm</span> <span class="kn">import</span> <span class="n">SVC</span>
<span class="n">svm</span> <span class="o">=</span> <span class="n">SVC</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">66</span><span class="p">)</span>
<span class="n">svm</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;---SVM---&#39;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;train acc:&#39;</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_train</span><span class="p">,</span> <span class="n">svm</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;test acc:&#39;</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_test</span><span class="p">,</span> <span class="n">svm</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)))</span>

<span class="kn">from</span> <span class="nn">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">RandomForestClassifier</span>
<span class="n">rf</span> <span class="o">=</span> <span class="n">RandomForestClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">66</span><span class="p">)</span>
<span class="n">rf</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;---random forest---&#39;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;train acc:&#39;</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_train</span><span class="p">,</span> <span class="n">rf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;test acc:&#39;</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_test</span><span class="p">,</span> <span class="n">rf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)))</span>
</code></pre></div><p>分數如下:</p>
<pre><code>---logistic regression---
train acc: 0.8643341663691538
test acc: 0.8698795180722891
---SVM---
train acc: 0.8961977865048197
test acc: 0.8966532797858099
---random forest---
train acc: 0.9991967154587648
test acc: 0.9772423025435074
</code></pre><p>結果&hellip;&hellip;好像沒什麼幫助。</p>
<h3 id="normalization">normalization</h3>
<p>使用z-score normalization。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="n">scaler</span> <span class="o">=</span> <span class="n">StandardScaler</span><span class="p">()</span>
<span class="n">scaler</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">table</span><span class="p">)</span>
<span class="n">new_table</span> <span class="o">=</span> <span class="n">scaler</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">table</span><span class="p">)</span>

<span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span> <span class="n">Y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">new_table</span><span class="p">,</span> <span class="n">target</span><span class="p">[:</span><span class="n">data_size</span><span class="p">],</span> 
                                                    <span class="n">test_size</span><span class="o">=</span><span class="mf">0.25</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">66</span><span class="p">)</span>

<span class="kn">from</span> <span class="nn">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LogisticRegression</span>
<span class="n">clf</span> <span class="o">=</span> <span class="n">LogisticRegression</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">66</span><span class="p">)</span>
<span class="n">clf</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>
<span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">accuracy_score</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;---logistic regression---&#39;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;train acc:&#39;</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_train</span><span class="p">,</span> <span class="n">clf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;test acc:&#39;</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_test</span><span class="p">,</span> <span class="n">clf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)))</span>

<span class="kn">from</span> <span class="nn">sklearn.svm</span> <span class="kn">import</span> <span class="n">SVC</span>
<span class="n">svm</span> <span class="o">=</span> <span class="n">SVC</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">66</span><span class="p">)</span>
<span class="n">svm</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;---SVM---&#39;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;train acc:&#39;</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_train</span><span class="p">,</span> <span class="n">svm</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;test acc:&#39;</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_test</span><span class="p">,</span> <span class="n">svm</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)))</span>

<span class="kn">from</span> <span class="nn">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">RandomForestClassifier</span>
<span class="n">rf</span> <span class="o">=</span> <span class="n">RandomForestClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">66</span><span class="p">)</span>
<span class="n">rf</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;---random forest---&#39;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;train acc:&#39;</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_train</span><span class="p">,</span> <span class="n">rf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;test acc:&#39;</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_test</span><span class="p">,</span> <span class="n">rf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)))</span>
</code></pre></div><p>分數如下:</p>
<pre><code>---logistic regression---
train acc: 0.958853980721171
test acc: 0.9544846050870147
---SVM---
train acc: 0.9378793288111389
test acc: 0.9349397590361446
---random forest---
train acc: 0.9991967154587648
test acc: 0.9775100401606426
</code></pre><p>雖然random forest的結果沒變，但是前兩者的分數卻大大提升了。</p>
]]></content>
		</item>
		
		<item>
			<title>Pytorch MNIST 筆記</title>
			<link>https://cherry900606.github.io/posts/pytorch_cnn/</link>
			<pubDate>Mon, 23 Aug 2021 14:56:12 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/pytorch_cnn/</guid>
			<description>流程 load library read data and pre-processing(set parameters, create dataloader) define network structure(set model, set loss function, set optimizer) training gradient 歸零 predict 計算loss backward 更新step testing 程式 import torch import torch.nn as nn import torch.nn.functional as F import torch.optim as optim from torchvision import datasets, transforms import torch.utils.data as data %matplotlib inline import matplotlib.pyplot as plt</description>
			<content type="html"><![CDATA[<h2 id="流程">流程</h2>
<ol>
<li>load library</li>
<li>read data and pre-processing(set parameters, create dataloader)</li>
<li>define network structure(set model, set loss function, set optimizer)</li>
<li>training
<ul>
<li>gradient 歸零</li>
<li>predict</li>
<li>計算loss</li>
<li>backward</li>
<li>更新step</li>
</ul>
</li>
<li>testing</li>
</ol>
<h2 id="程式">程式</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">torch</span>
<span class="kn">import</span> <span class="nn">torch.nn</span> <span class="kn">as</span> <span class="nn">nn</span>
<span class="kn">import</span> <span class="nn">torch.nn.functional</span> <span class="kn">as</span> <span class="nn">F</span>
<span class="kn">import</span> <span class="nn">torch.optim</span> <span class="kn">as</span> <span class="nn">optim</span>
<span class="kn">from</span> <span class="nn">torchvision</span> <span class="kn">import</span> <span class="n">datasets</span><span class="p">,</span> <span class="n">transforms</span>
<span class="kn">import</span> <span class="nn">torch.utils.data</span> <span class="kn">as</span> <span class="nn">data</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>

<span class="c1"># setting &amp; preprocceing data</span>
<span class="n">BATCH_SIZE</span> <span class="o">=</span> <span class="mi">64</span>
<span class="n">EPOCHS</span> <span class="o">=</span> <span class="mi">1</span>

<span class="n">transform</span> <span class="o">=</span> <span class="n">transforms</span><span class="o">.</span><span class="n">Compose</span><span class="p">([</span>
    <span class="n">transforms</span><span class="o">.</span><span class="n">ToTensor</span><span class="p">(),</span>
<span class="p">])</span>

<span class="n">train_dataset</span> <span class="o">=</span> <span class="n">datasets</span><span class="o">.</span><span class="n">MNIST</span><span class="p">(</span><span class="n">root</span><span class="o">=</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="n">train</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">transform</span><span class="o">=</span><span class="n">transform</span><span class="p">,</span> <span class="n">download</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">test_dataset</span> <span class="o">=</span> <span class="n">datasets</span><span class="o">.</span><span class="n">MNIST</span><span class="p">(</span><span class="n">root</span><span class="o">=</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="n">train</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">transform</span><span class="o">=</span><span class="n">transform</span><span class="p">,</span> <span class="n">download</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="n">train_loader</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">DataLoader</span><span class="p">(</span><span class="n">train_dataset</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">BATCH_SIZE</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">test_loader</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">DataLoader</span><span class="p">(</span><span class="n">test_dataset</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">BATCH_SIZE</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># define network structure</span>
<span class="k">class</span> <span class="nc">Net</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">Net</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">cnn</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">BatchNorm2d</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">MaxPool2d</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">fc</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">32</span><span class="o">*</span><span class="mi">13</span><span class="o">*</span><span class="mi">13</span><span class="p">,</span> <span class="mi">1024</span><span class="p">),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">1024</span><span class="p">,</span> <span class="mi">256</span><span class="p">),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
        <span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">cnn</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">flatten</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span> <span class="n">fc</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">output</span> <span class="o">=</span> <span class="n">F</span><span class="o">.</span><span class="n">log_softmax</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">output</span>
    
<span class="n">model</span> <span class="o">=</span> <span class="n">Net</span><span class="p">()</span>
<span class="n">loss</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">CrossEntropyLoss</span><span class="p">()</span>
<span class="n">optimizer</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">optim</span><span class="o">.</span><span class="n">Adam</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">parameters</span><span class="p">())</span>

<span class="c1"># train</span>
<span class="n">train_loss</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">EPOCHS</span><span class="p">):</span>
    <span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">train_loader</span><span class="p">):</span>
        <span class="n">optimizer</span><span class="o">.</span><span class="n">zero_grad</span><span class="p">()</span>
        <span class="n">train_pred</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">batch_loss</span> <span class="o">=</span> <span class="n">loss</span><span class="p">(</span><span class="n">train_pred</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
        <span class="n">batch_loss</span><span class="o">.</span><span class="n">backward</span><span class="p">()</span>
        <span class="n">optimizer</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>
                   
        <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s2">&#34;loss: {:.6f} [{}/{}]&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">batch_loss</span><span class="o">.</span><span class="n">item</span><span class="p">(),</span> 
                                            <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span>
                                            <span class="nb">len</span><span class="p">(</span><span class="n">train_loader</span><span class="o">.</span><span class="n">dataset</span><span class="p">)))</span>
            <span class="n">train_loss</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">batch_loss</span><span class="o">.</span><span class="n">item</span><span class="p">())</span>

    
<span class="c1"># test</span>
<span class="n">test_loss</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">test_acc</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
<span class="k">with</span> <span class="n">torch</span><span class="o">.</span><span class="n">no_grad</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">data</span><span class="p">,</span> <span class="n">target</span> <span class="ow">in</span> <span class="n">test_loader</span><span class="p">:</span>
        <span class="n">test_pred</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">test_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="p">(</span><span class="n">test_pred</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
        
        <span class="n">pred</span> <span class="o">=</span> <span class="n">test_pred</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">keepdim</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">test_acc</span> <span class="o">+=</span> <span class="p">(</span><span class="n">pred</span> <span class="o">==</span> <span class="n">target</span><span class="o">.</span><span class="n">view_as</span><span class="p">(</span><span class="n">pred</span><span class="p">))</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
        
    <span class="n">test_loss</span> <span class="o">/=</span> <span class="nb">len</span><span class="p">(</span><span class="n">test_loader</span><span class="o">.</span><span class="n">dataset</span><span class="p">)</span>

    <span class="c1"># Log testing info</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
        <span class="n">test_loss</span><span class="p">,</span> <span class="n">test_acc</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">test_loader</span><span class="o">.</span><span class="n">dataset</span><span class="p">),</span>
        <span class="mf">100.</span> <span class="o">*</span> <span class="n">test_acc</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">test_loader</span><span class="o">.</span><span class="n">dataset</span><span class="p">)))</span>
</code></pre></div><h2 id="學習資源">學習資源</h2>
<p><a href="https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html">PyTorch官方Tutorials Quickstart</a></p>
<p><a href="https://ithelp.ithome.com.tw/articles/10243145">Day 9 / PyTorch 簡介 / PyTorch 入門（二） —— MNIST 手寫數字辨識</a></p>
]]></content>
		</item>
		
		<item>
			<title>李宏毅機器學習2020_hw2</title>
			<link>https://cherry900606.github.io/posts/ml_hw2/</link>
			<pubDate>Mon, 16 Aug 2021 14:01:22 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/ml_hw2/</guid>
			<description>範例code preparing data X_train_fpath = &amp;#39;./data/X_train&amp;#39; Y_train_fpath = &amp;#39;./data/Y_train&amp;#39; X_test_fpath = &amp;#39;./data/X_test&amp;#39; output_fpath = &amp;#39;./output_{}.csv&amp;#39; # Parse csv files to numpy array with open(X_train_fpath) as f: next(f) X_train = np.array([line.strip(&amp;#39;\n&amp;#39;).split(&amp;#39;,&amp;#39;)[1:] for line in f], dtype = float) with open(Y_train_fpath) as f: next(f) Y_train = np.array([line.strip(&amp;#39;\n&amp;#39;).split(&amp;#39;,&amp;#39;)[1] for line in f], dtype = float) with open(X_test_fpath) as f: next(f) X_test = np.array([line.strip(&amp;#39;\n&amp;#39;).split(&amp;#39;,&amp;#39;)[1:] for line in f], dtype</description>
			<content type="html"><![CDATA[<h2 id="範例code">範例code</h2>
<h3 id="preparing-data">preparing data</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">X_train_fpath</span> <span class="o">=</span> <span class="s1">&#39;./data/X_train&#39;</span>
<span class="n">Y_train_fpath</span> <span class="o">=</span> <span class="s1">&#39;./data/Y_train&#39;</span>
<span class="n">X_test_fpath</span> <span class="o">=</span> <span class="s1">&#39;./data/X_test&#39;</span>
<span class="n">output_fpath</span> <span class="o">=</span> <span class="s1">&#39;./output_{}.csv&#39;</span>

<span class="c1"># Parse csv files to numpy array</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">X_train_fpath</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="nb">next</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">X_train</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">:]</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">],</span> <span class="n">dtype</span> <span class="o">=</span> <span class="nb">float</span><span class="p">)</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">Y_train_fpath</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="nb">next</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">Y_train</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">],</span> <span class="n">dtype</span> <span class="o">=</span> <span class="nb">float</span><span class="p">)</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">X_test_fpath</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="nb">next</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">X_test</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">:]</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">],</span> <span class="n">dtype</span> <span class="o">=</span> <span class="nb">float</span><span class="p">)</span>
</code></pre></div><blockquote>
<p>strip(): 除去開頭跟尾端的特定字元。</p>
</blockquote>
<blockquote>
<p>split(): 用特定字元切割字串。</p>
</blockquote>
<blockquote>
<p>[line.strip('\n').split(',')[1:] for line in f]: list comprehension</p>
<p>遍歷file中每一行line，處理過的line變成一個list。</p>
</blockquote>
<h3 id="some-useful-functions">some useful functions</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">_gradient</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y_label</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="c1"># This function computes the gradient of cross entropy loss with respect to weight w and bias b.</span>
    <span class="n">y_pred</span> <span class="o">=</span> <span class="n">_f</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
    <span class="n">pred_error</span> <span class="o">=</span> <span class="n">Y_label</span> <span class="o">-</span> <span class="n">y_pred</span>
    <span class="n">w_grad</span> <span class="o">=</span> <span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">pred_error</span> <span class="o">*</span> <span class="n">X</span><span class="o">.</span><span class="n">T</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">b_grad</span> <span class="o">=</span> <span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">pred_error</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">w_grad</span><span class="p">,</span> <span class="n">b_grad</span>
</code></pre></div><p><img src="https://i.imgur.com/5Caf7Ug.png" alt=""></p>
<p>課程中我們找到最佳的w跟b，是找到讓-lnL(w,b)越小越好。要達到目標，就要分別以w跟b對該function微分。最後會得到下面的式子，而b也是同理。</p>
<p><img src="https://i.imgur.com/7YL8sOA.png" alt=""></p>
<h3 id="train">train</h3>
<p>這裡的training是用stochastic gradient descent。</p>
<h2 id="自我練習">自我練習</h2>
<h3 id="流程">流程</h3>
<ul>
<li>load data</li>
<li>normalization</li>
<li>train
<ul>
<li>參數設定</li>
<li>giradient descent</li>
</ul>
</li>
<li>計算 loss</li>
<li>predict</li>
<li>save file</li>
</ul>
<h3 id="程式手刻logistic-regression版">程式(手刻logistic regression版)</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">110</span><span class="p">)</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;./data/X_train&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="nb">next</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">X_train</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">:]</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">float</span><span class="p">)</span>
    
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;./data/Y_train&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="nb">next</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">Y_train</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">float</span><span class="p">)</span>
    
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;./data/X_test&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="nb">next</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">X_test</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">:]</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">float</span><span class="p">)</span>

<span class="n">parameter_size</span> <span class="o">=</span> <span class="n">X_train</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">train_size</span> <span class="o">=</span> <span class="n">X_train</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">test_size</span> <span class="o">=</span> <span class="n">X_test</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

<span class="c1"># normalize</span>
<span class="n">x_mean</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">x_std</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">std</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">train_size</span><span class="p">):</span>
    <span class="n">X_train</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">X_train</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">x_mean</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">x_std</span> <span class="o">+</span> <span class="mf">1e-8</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">test_size</span><span class="p">):</span>
    <span class="n">X_test</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">X_test</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">x_mean</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">x_std</span> <span class="o">+</span> <span class="mf">1e-8</span><span class="p">)</span>
    
<span class="c1"># split into train set &amp; dev set</span>
<span class="n">dev_ratio</span> <span class="o">=</span> <span class="mf">0.3</span>
<span class="n">train_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">X_train</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">dev_ratio</span><span class="p">))</span>

<span class="n">X_dev</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">[</span><span class="n">train_size</span><span class="p">:,</span> <span class="p">:]</span>
<span class="n">Y_dev</span> <span class="o">=</span> <span class="n">Y_train</span><span class="p">[</span><span class="n">train_size</span><span class="p">:]</span>
<span class="n">X_train</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">[:</span><span class="n">train_size</span><span class="p">,</span> <span class="p">:]</span>
<span class="n">Y_train</span> <span class="o">=</span> <span class="n">Y_train</span><span class="p">[:</span><span class="n">train_size</span><span class="p">]</span>

<span class="k">print</span><span class="p">(</span><span class="n">X_dev</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">Y_dev</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">X_train</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">Y_train</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>

<span class="c1"># training</span>
<span class="n">learning_rate</span> <span class="o">=</span> <span class="mf">0.05</span>
<span class="n">iter_time</span> <span class="o">=</span> <span class="mi">100</span>
<span class="n">step</span> <span class="o">=</span> <span class="mi">1</span>

<span class="n">w</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">parameter_size</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
<span class="n">b</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">iter_time</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;iter {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
    
    <span class="c1"># shuffle</span>
    <span class="n">index</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">train_size</span><span class="p">)</span>
    <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
    <span class="n">X_train</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
    <span class="n">Y_train</span> <span class="o">=</span> <span class="n">Y_train</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
    
    <span class="c1">#sgd</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">train_size</span><span class="p">):</span>
        <span class="n">X</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">Y</span> <span class="o">=</span> <span class="n">Y_train</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
        <span class="n">z</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span> <span class="o">+</span> <span class="n">b</span>
        
        <span class="n">y_pred</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">z</span><span class="p">))</span>
        <span class="n">pred_error</span> <span class="o">=</span> <span class="o">-</span> <span class="p">(</span><span class="n">Y</span> <span class="o">-</span> <span class="n">y_pred</span><span class="p">)</span>
        <span class="n">w_grad</span> <span class="o">=</span> <span class="n">pred_error</span> <span class="o">*</span> <span class="n">X</span><span class="o">.</span><span class="n">T</span>
        <span class="n">b_grad</span> <span class="o">=</span> <span class="n">pred_error</span>
        
        <span class="n">w</span> <span class="o">=</span> <span class="n">w</span> <span class="o">-</span> <span class="n">learning_rate</span> <span class="o">*</span> <span class="n">w_grad</span> <span class="o">/</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">step</span><span class="p">)</span>
        <span class="n">b</span> <span class="o">=</span> <span class="n">b</span> <span class="o">-</span> <span class="n">learning_rate</span> <span class="o">*</span> <span class="n">b_grad</span> <span class="o">/</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">step</span><span class="p">)</span>
        
        <span class="n">step</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="c1"># calculate train loss</span>
<span class="n">train_loss</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">train_size</span><span class="p">):</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="n">Y</span> <span class="o">=</span> <span class="n">Y_train</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="n">z</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span> <span class="o">+</span> <span class="n">b</span>
    <span class="n">y_pred</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">z</span><span class="p">))</span>
    
    <span class="k">if</span> <span class="n">Y</span> <span class="o">!=</span> <span class="n">np</span><span class="o">.</span><span class="n">round</span><span class="p">(</span><span class="n">y_pred</span><span class="p">):</span>
        <span class="n">train_loss</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">print</span><span class="p">(</span><span class="s1">&#39;train loss: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">train_loss</span><span class="o">/</span><span class="n">train_size</span><span class="p">))</span>

<span class="c1"># calculate dev loss</span>
<span class="n">dev_loss</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">X_dev</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">X_dev</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="n">Y</span> <span class="o">=</span> <span class="n">Y_dev</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="n">z</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span> <span class="o">+</span> <span class="n">b</span>
    <span class="n">y_pred</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">z</span><span class="p">))</span>
    
    <span class="k">if</span> <span class="n">Y</span> <span class="o">!=</span> <span class="n">np</span><span class="o">.</span><span class="n">round</span><span class="p">(</span><span class="n">y_pred</span><span class="p">):</span>
        <span class="n">dev_loss</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">print</span><span class="p">(</span><span class="s1">&#39;dev loss: {}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">dev_loss</span><span class="o">/</span><span class="n">X_dev</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>

<span class="n">ans_y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">X_test</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">X_test</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">X_test</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="n">z</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span> <span class="o">+</span> <span class="n">b</span>
    <span class="n">Y_pred</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">round</span><span class="p">(</span><span class="mi">1</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">z</span><span class="p">)))</span>
    <span class="n">ans_y</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">Y_pred</span><span class="p">)</span>

<span class="kn">import</span> <span class="nn">csv</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;submit_myself.csv&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">writer</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">writer</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">header</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;label&#39;</span><span class="p">]</span>
    <span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">header</span><span class="p">)</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">ans_y</span><span class="p">)):</span>
        <span class="n">row</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">ans_y</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span>
        <span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</code></pre></div><h3 id="程式自己用sklearn寫版">程式(自己用sklearn寫版)</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>

<span class="c1"># read file</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;./data/X_train&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">content</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">content</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">i</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
            <span class="n">x_train</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">continue</span>
        <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
        <span class="n">x_train</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
<span class="n">X_train</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">x_train</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="s1">&#39;float&#39;</span><span class="p">)[:,</span> <span class="mi">1</span><span class="p">:]</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;./data/Y_train&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">content</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">content</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">i</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
            <span class="n">y_train</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">continue</span>
        <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
        <span class="n">y_train</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
<span class="n">Y_train</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">y_train</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="s1">&#39;float&#39;</span><span class="p">)[:,</span> <span class="mi">1</span><span class="p">]</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;./data/X_test&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">content</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">content</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">i</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
            <span class="n">x_test</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">continue</span>
        <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
        <span class="n">x_test</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
<span class="n">X_test</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">x_test</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="s1">&#39;float&#39;</span><span class="p">)[:,</span> <span class="mi">1</span><span class="p">:]</span>

<span class="c1"># normalization</span>
<span class="n">x_mean</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">x_std</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">std</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">X_train</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
    <span class="n">X_train</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">X_train</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">x_mean</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">x_std</span> <span class="o">+</span> <span class="mf">1e-8</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">X_test</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
    <span class="n">X_test</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">X_test</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">x_mean</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">x_std</span> <span class="o">+</span> <span class="mf">1e-8</span><span class="p">)</span>
    
<span class="c1"># split</span>
<span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
<span class="n">X_train</span><span class="p">,</span><span class="n">X_dev</span><span class="p">,</span><span class="n">Y_train</span><span class="p">,</span><span class="n">Y_dev</span><span class="o">=</span><span class="n">train_test_split</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.25</span><span class="p">)</span>

<span class="c1"># train(LogisticRegression)</span>
<span class="kn">from</span> <span class="nn">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LogisticRegression</span>
<span class="n">clf</span> <span class="o">=</span> <span class="n">LogisticRegression</span><span class="p">(</span><span class="n">max_iter</span><span class="o">=</span><span class="mi">500</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">66</span><span class="p">)</span>
<span class="n">clf</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>

<span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">metrics</span>
<span class="k">print</span><span class="p">(</span><span class="s2">&#34;train accuracy:&#34;</span><span class="p">,</span><span class="n">metrics</span><span class="o">.</span><span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_train</span><span class="p">,</span> <span class="n">clf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="s2">&#34;dev accuracy:&#34;</span><span class="p">,</span><span class="n">metrics</span><span class="o">.</span><span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_dev</span><span class="p">,</span> <span class="n">clf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_dev</span><span class="p">)))</span>

<span class="n">y_test</span> <span class="o">=</span> <span class="n">clf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;submit_0831_lg.csv&#39;</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;id,label</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">y_test</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;,&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">y_test</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">+</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
        
<span class="c1"># train(SGDClassifier)</span>
<span class="kn">from</span> <span class="nn">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">SGDClassifier</span>
<span class="n">clf</span> <span class="o">=</span> <span class="n">SGDClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">66</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">500</span><span class="p">)</span>
<span class="n">clf</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s2">&#34;train accuracy:&#34;</span><span class="p">,</span><span class="n">metrics</span><span class="o">.</span><span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_train</span><span class="p">,</span> <span class="n">clf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="s2">&#34;dev accuracy:&#34;</span><span class="p">,</span><span class="n">metrics</span><span class="o">.</span><span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_dev</span><span class="p">,</span> <span class="n">clf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_dev</span><span class="p">)))</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;submit_0831_sgd.csv&#39;</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;id,label</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">y_test</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;,&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">y_test</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">+</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>

<span class="c1"># train(GaussianMixture)        </span>
<span class="kn">from</span> <span class="nn">sklearn.mixture</span> <span class="kn">import</span> <span class="n">GaussianMixture</span>
<span class="n">clf</span> <span class="o">=</span> <span class="n">GaussianMixture</span><span class="p">()</span>
<span class="n">clf</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s2">&#34;train accuracy:&#34;</span><span class="p">,</span><span class="n">metrics</span><span class="o">.</span><span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_train</span><span class="p">,</span> <span class="n">clf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="s2">&#34;dev accuracy:&#34;</span><span class="p">,</span><span class="n">metrics</span><span class="o">.</span><span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_dev</span><span class="p">,</span> <span class="n">clf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_dev</span><span class="p">)))</span>

<span class="c1"># train(GaussianNB)        </span>
<span class="kn">from</span> <span class="nn">sklearn.naive_bayes</span> <span class="kn">import</span> <span class="n">GaussianNB</span>
<span class="n">clf</span> <span class="o">=</span> <span class="n">GaussianNB</span><span class="p">()</span>
<span class="n">clf</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s2">&#34;train accuracy:&#34;</span><span class="p">,</span><span class="n">metrics</span><span class="o">.</span><span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_train</span><span class="p">,</span> <span class="n">clf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="s2">&#34;dev accuracy:&#34;</span><span class="p">,</span><span class="n">metrics</span><span class="o">.</span><span class="n">accuracy_score</span><span class="p">(</span><span class="n">Y_dev</span><span class="p">,</span> <span class="n">clf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_dev</span><span class="p">)))</span>
</code></pre></div><h3 id="總結">總結</h3>
<p>課程提供的範例有一點困擾我很久: 在處理多維度的資料時，為了效率與方便，會用內建函式處理。</p>
<p>像是normalize是這樣寫的:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">_normalize</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">train</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">X_mean</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">X_std</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">train</span><span class="p">:</span>
        <span class="n">X_mean</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">X_std</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">std</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">X</span> <span class="o">=</span> <span class="p">(</span><span class="n">X</span> <span class="o">-</span> <span class="n">X_mean</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">X_std</span> <span class="o">+</span> <span class="mf">1e-8</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">X</span><span class="p">,</span> <span class="n">X_mean</span><span class="p">,</span> <span class="n">X_std</span>
</code></pre></div><p>這樣做是因為np.mean()後得到的numpy array shape 需要調整過，再經由broadcast 把整個X_train直接正規化，寫起來相當直觀易懂，只是真的寫下去卻被背後的邏輯卡很久。</p>
<p>又或者是gradient的部分:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">_gradient</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="n">y_pred</span> <span class="o">=</span> <span class="n">_f</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
    <span class="n">pred_error</span> <span class="o">=</span> <span class="n">Y</span> <span class="o">-</span> <span class="n">y_pred</span>
    
    <span class="n">w_grad</span> <span class="o">=</span> <span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">pred_error</span> <span class="o">*</span> <span class="n">X</span><span class="o">.</span><span class="n">T</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">b_grad</span> <span class="o">=</span> <span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">pred_error</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">w_grad</span><span class="p">,</span> <span class="n">b_grad</span>
</code></pre></div><p>w_grad 跟 b_grad 為什麼這樣寫也不是很好懂，哪怕照著微分後得到的公式去理解也仍然相當頭痛。 像我就相當困惑為何 X 要 transpose? 還有為什麼計算sigmoid時範例用np.matmul，有些人用np.dot? 又或者為何是 np.dot(X, w) ，而不是 np.dot(w, X)呢?</p>
<p>所以我自己嘗試手刻時盡量避免這些雖簡潔卻大有深意的語法，改以寫起來稍嫌複雜，但沒那麼多門道的方法。</p>
<p>normalize的寫法跟作業一一樣。切割訓練集則與範例程式相同，只是沒寫成函式。shuffle的部分也沒寫成函式。</p>
<p>訓練的部分可能沒很符合sgd的精神，等同於把batch_size設為1。</p>
<p>計算loss不是用範例程式裡面的cross entropy loss。</p>
<p>kaggle scores:</p>
<ul>
<li>private score: 0.88943</li>
<li>public score: 0.88914</li>
</ul>
<p>分數還算不錯，跟用範例程式調參數的結果沒差太多，只是訓練的速度稍慢。</p>
<p>至於從頭到尾自己寫並且用sklearn訓練的版本，基本上就是用自己的方式處理raw data，經過normalization(作業一的寫法)，切割成train set 跟 dev set，然後分別用不同的model訓練，看看結果。</p>
<p>為了不讓每次出來的分數變動太大，在SGDClassifier跟LogisticRegression兩種模型都設定了seed。</p>
<p>最後分數比起上面的不會差很多，但算有略好?只是private score卻比public score高，不確定這樣的結果是否正常。</p>
]]></content>
		</item>
		
		<item>
			<title>NISRA Enlightened 2021</title>
			<link>https://cherry900606.github.io/posts/nisra/</link>
			<pubDate>Fri, 13 Aug 2021 18:06:52 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/nisra/</guid>
			<description>前言 幾個月前在Hitcon的臉書粉專看到活動宣傳，想著暑假沒事做，這個營隊也沒有程度限制，一時心血來潮就報名了。 以前也不是沒有對CTF產生好</description>
			<content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>幾個月前在Hitcon的臉書粉專看到活動宣傳，想著暑假沒事做，這個營隊也沒有程度限制，一時心血來潮就報名了。</p>
<p>以前也不是沒有對CTF產生好奇，也有到處找過入門資料，但總是沒有找到能讓我看下去的文章(也可能我花的時間還是太少)，簡而言之就是三分鐘熱度。</p>
<p>營隊開始前一周收到行前通知，才想到當初報名了這個活動，但誰想到暑假的我已經進實驗室開始專題訓練了，不像當初設想的那樣空閒，加上虛擬機的環境一直架不起來，就想說加減聽聽算了。</p>
<p>於是乎五天的活動，每一天都是十點才進入會議室，而且真正認真聽的只有CTF Intro。其他課程都是有興趣才停下手邊的事專心聽，不然都是一邊滑手機或者弄專題訓練，不然就是嘗試超前進度完成Lab。</p>
<h2 id="課程">課程</h2>
<h3 id="info-leakage">Info Leakage</h3>
<p>其實我雖然後半段有跟著課程，但上完還是不確定這個主題想表達什麼。</p>
<p>猜測是介紹因為各種原因造成的資訊洩漏吧?</p>
<h3 id="隱寫術">隱寫術</h3>
<p>第一次接觸這個主題，好酷。</p>
<p>資訊會隱藏在看似普通的表象之下，經過編碼修改、編輯header，或是對圖片做各種處理，有機會提取背後的訊息。</p>
<p>雖然Lab介紹了很多的工具，但不是很懂背後的原理，也沒有建立系統性的架構，感覺東碰西碰的接觸不少東西，但無法透徹理解為何這麼做，也不懂實際上要怎麼分析用哪種方法處理。</p>
<h3 id="網頁三兄弟">網頁三兄弟</h3>
<p>沒認真上，感覺就是介紹HTML、CSS跟JS的基礎。</p>
<h3 id="reverse">Reverse</h3>
<p>覺得是五天下來最難的部分，但我的環境沒弄好，沒辦法跟著嘗試逆向工程。</p>
<h3 id="os">OS</h3>
<p>太晚起床所以錯過前面的課程，所以也不知道是我匯入OVA檔的過程出錯還是怎麼樣，虛擬機跑出來的是全新的，而非是預先裝好東西的環境，所以我也沒認真聽這堂課。</p>
<p>不過看共筆也只是介紹基本的linux操作而已，總感覺把這門課叫OS有點怪。</p>
<h3 id="crypto">Crypto</h3>
<p>就&hellip;&hellip;各式各樣的加密法。我承認我沒有認真聽，不用想都知道會很無聊，直接在午休slide先放出來的時候把flag丟上去。</p>
<p>大部分的加密不是實際操作過就是略有耳聞，這些應該都是資工系學生的common sense吧?</p>
<p>後來才知道有一題lab有問題，直接從slide偷flag的我不小心變成通靈大師了，我都不敢自首。怕.jpg。</p>
<h3 id="ctf-intro">CTF Intro</h3>
<p>可以說是這次活動最精彩的部分，也是五天下來最認真上課的一次。</p>
<p>整體來說像是把前幾天上過的主題活用，也有教網頁方面的攻擊，上課到一半有人把admin權限偷走真是笑死我了。</p>
<h3 id="疫情-ikigai--資安和學習">疫情 IKIGAI : 資安和學習</h3>
<p>沒認真聽，大概是輔大系上的老師們來演講。</p>
<p>如果之後有把slide放上來，再稍微瞄下幾個有興趣的連結。</p>
<p>話說聽到他們學校推廣自學，在coursera自修完成一門課學生能拿五千覺得好羨慕，這樣我起碼能拿個一萬五吧。</p>
<h3 id="final-ctf">Final CTF</h3>
<p>最後的重頭戲。</p>
<p>每個主題我解出來的比例都差不多，除了reverse，都在40%~50%左右。比較可惜的是playfair明明用線上解碼器解出來的答案都一樣，但flag就是不對，還有OS的把flag碎片拼起來的那題，我總覺得自己有找到正確的四段，但也不對，試了超多次。</p>
<p>隱寫術的QR code那題超鬧，我直接用小畫家把它拼起來，雖然接縫處沒有對很好，但居然能掃成功。</p>
<p>OS我其實不太懂考點跟資安的關係，不就是要會基本的操作嗎?好像就是一直切換資料夾、切換使用者、查看檔案。</p>
<p>最後排名第20名。活動有將近150人報名、平均有80人出席上課、59人參加Final CTF，雖然不知有多少人本來就有打CTF，不過這個排名也還行吧，畢竟沒有很認真上課。</p>
<p>截圖紀念:
<img src="https://i.imgur.com/wZ6sd2L.png" alt=""></p>
<h2 id="資源">資源</h2>
<p><a href="https://drive.google.com/drive/folders/1QgBklmOl5E7F-PSoSUfVpeYYCCbtyaIc">課程簡報</a></p>
<p><a href="https://hackmd.io/vKXHhc-jQr-wWtqAzDBXTA">write-up-1</a></p>
<p><a href="https://hackmd.io/A9uarb5-QgOjeY7huzm1CA?view">write-up-2</a></p>
<p><a href="https://hackmd.io/CZkvboDFSk6BFIYZVjLwNQ">write-up-3</a></p>
<p><a href="https://github.com/Sharkkcode/NISRA_CTF_2021_writeups">write-up-4</a></p>
<h2 id="結語">結語</h2>
<p>在資工系打混摸魚到快大三了，好像也沒什麼值得稱道的成就，其實還挺迷茫的。這次參加外校的活動，也是想說就接觸看看沒碰過的領域吧，免費的優質活動錯過可惜。</p>
<p>雖然講師們年級沒有跟我差太多，但至少在資安領域有一定程度的了解，甚至於CTF Final排名第一的那個學員也好猛，網路上查了對方的經歷簡直跪了。相比之下就覺得自己真的沒什麼能拿出來講的。</p>
<p>唉，繼續摸魚去。</p>
]]></content>
		</item>
		
		<item>
			<title>在hugo hermit主題加入留言功能</title>
			<link>https://cherry900606.github.io/posts/add_comment_note/</link>
			<pubDate>Wed, 11 Aug 2021 18:02:29 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/add_comment_note/</guid>
			<description>Disqus 在hermit主題加入留言功能非常簡單。 首先，照著這篇到第七步後，由於hermit主題已經有寫好相關功能，push上去後應該就成功了，只是</description>
			<content type="html"><![CDATA[<h2 id="disqus">Disqus</h2>
<p>在<a href="https://github.com/Track3/hermit">hermit</a>主題加入留言功能非常簡單。</p>
<p>首先，照著<a href="https://sunnyday0932.github.io/2020/hugo%E5%8A%A0%E5%85%A5%E7%95%99%E8%A8%80%E8%A7%80%E7%9C%8B%E4%BA%BA%E6%95%B8/">這篇</a>到第七步後，由於hermit主題已經有寫好相關功能，push上去後應該就成功了，只是無法在本地端看到結果。</p>
<p>目前遇到的問題是部落格名稱無法正常顯示，如下圖。&ldquo;Cody Crnkovich&rsquo;s Blog&quot;的部分應該要與我在disqus填寫的website name一致才對。
<img src="https://i.imgur.com/g3M2KY7.png" alt=""></p>
<h2 id="utterance">Utterance</h2>
<p>雖然無法解決上述問題，不過在尋找解答的過程中發現了utterance。</p>
<p>照著<a href="https://www.jkg.tw/p3350/">這篇文章</a>設定，把產生的程式碼貼到 ./partials/comments.html。貼上之把原本的內容先清掉。</p>
<p>如果要刪除留言就到repo，把issue delete掉就沒了！</p>
]]></content>
		</item>
		
		<item>
			<title>李宏毅機器學習2020_hw1</title>
			<link>https://cherry900606.github.io/posts/ml_hw1/</link>
			<pubDate>Sun, 08 Aug 2021 14:35:19 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/ml_hw1/</guid>
			<description>本篇主要紀錄學習過程中困擾我的部分，以及自己實作的心得。 範例code Preprocessing 觀察train.csv，取出「數據」的部分，所以前三個column不要</description>
			<content type="html"><![CDATA[<p>本篇主要紀錄學習過程中困擾我的部分，以及自己實作的心得。</p>
<h2 id="範例code">範例code</h2>
<h3 id="preprocessing">Preprocessing</h3>
<p>觀察train.csv，取出「數據」的部分，所以前三個column不要。
data中有些為NR，不利於之後處理，通通設值為0。
接著把dataframe轉為numpy array。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="mi">3</span><span class="p">:]</span>
<span class="n">data</span><span class="p">[</span><span class="n">data</span> <span class="o">==</span> <span class="s1">&#39;NR&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">raw_data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span>
</code></pre></div><h3 id="extract-features-1">Extract Features (1)</h3>
<p>要把資料處理成我們想要的形狀，才能做接下來的訓練。</p>
<p>raw_data的大小是 4320*24。其中4320=12(月)*20(小時)*18(feature)，24為小時。現在我們要將raw_data轉換成dictonary，把同一個月的資料合併，每個index對應到該月資料。
<img src="https://i.imgur.com/b4oTooq.png" alt=""></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">month_data</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">month</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">12</span><span class="p">):</span>
    <span class="n">sample</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">([</span><span class="mi">18</span><span class="p">,</span> <span class="mi">480</span><span class="p">])</span> <span class="c1"># 每個月的資料大小</span>
    <span class="k">for</span> <span class="n">day</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="p">):</span>
        <span class="n">sample</span><span class="p">[:,</span> <span class="n">day</span> <span class="o">*</span> <span class="mi">24</span> <span class="p">:</span> <span class="p">(</span><span class="n">day</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">24</span><span class="p">]</span> <span class="o">=</span> <span class="n">raw_data</span><span class="p">[</span><span class="mi">18</span> <span class="o">*</span> <span class="p">(</span><span class="mi">20</span> <span class="o">*</span> <span class="n">month</span> <span class="o">+</span> <span class="n">day</span><span class="p">)</span> <span class="p">:</span> <span class="mi">18</span> <span class="o">*</span> <span class="p">(</span><span class="mi">20</span> <span class="o">*</span> <span class="n">month</span> <span class="o">+</span> <span class="n">day</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="p">:]</span>
    <span class="n">month_data</span><span class="p">[</span><span class="n">month</span><span class="p">]</span> <span class="o">=</span> <span class="n">sample</span>
</code></pre></div><h3 id="extract-features-2">Extract Features (2)</h3>
<p><img src="https://i.imgur.com/2mS4lbp.png" alt=""></p>
<p>接著我們以月為單位，拿到的資料大小是18(feature)*480(=20天 * 24小時)。</p>
<p>為了在現有的資料上生成更多的資料，以每十個小時為單位提取data，每次往右移動一單位。這樣講可能有點抽象，可以想像有一個框框的寬度為10，框住的是新的一筆資料，每次往右滑動一單位。又因為總寬度為480，而框框寬度為10，因此最多能得到471筆資料，因為最後幾筆資料無法框起來。</p>
<p>每次框起來的data有18個row(feature)、10個column(小時)。前九個小時是用來訓練的資料，第十個小時的pm2.5則是答案，分別存在x與y。每個月能生成471筆這樣的data，總共有12個月，因此總共會有417 * 12筆資料，而x的每一筆資料的大小是18 * 9。</p>
<p>注意x的資料是month_data reshape後的，也就是把18個feature的9小時資料變成一個row，類似下圖:
<img src="https://i.imgur.com/AGu6Yjn.png" alt="">
每次拿到新的data就是往下合併，如圖:
<img src="https://i.imgur.com/7cJuchu.png" alt=""></p>
<p>這筆資料該怎麼解讀? 每一個row是各種feature經過9小時的變化數值，同一個column代表相同feature在第幾個小時的數值。
也因此後面normalize的方向是axis=0。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">([</span><span class="mi">12</span> <span class="o">*</span> <span class="mi">471</span><span class="p">,</span> <span class="mi">18</span> <span class="o">*</span> <span class="mi">9</span><span class="p">],</span> <span class="n">dtype</span> <span class="o">=</span> <span class="nb">float</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">([</span><span class="mi">12</span> <span class="o">*</span> <span class="mi">471</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">dtype</span> <span class="o">=</span> <span class="nb">float</span><span class="p">)</span>
<span class="k">for</span> <span class="n">month</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">12</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">day</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">hour</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">24</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">day</span> <span class="o">==</span> <span class="mi">19</span> <span class="ow">and</span> <span class="n">hour</span> <span class="o">&gt;</span> <span class="mi">14</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">x</span><span class="p">[</span><span class="n">month</span> <span class="o">*</span> <span class="mi">471</span> <span class="o">+</span> <span class="n">day</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">+</span> <span class="n">hour</span><span class="p">,</span> <span class="p">:]</span> <span class="o">=</span> <span class="n">month_data</span><span class="p">[</span><span class="n">month</span><span class="p">][:,</span><span class="n">day</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">+</span> <span class="n">hour</span> <span class="p">:</span> <span class="n">day</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">+</span> <span class="n">hour</span> <span class="o">+</span> <span class="mi">9</span><span class="p">]</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="c1">#vector dim:18*9 (9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9)</span>
            <span class="n">y</span><span class="p">[</span><span class="n">month</span> <span class="o">*</span> <span class="mi">471</span> <span class="o">+</span> <span class="n">day</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">+</span> <span class="n">hour</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">month_data</span><span class="p">[</span><span class="n">month</span><span class="p">][</span><span class="mi">9</span><span class="p">,</span> <span class="n">day</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">+</span> <span class="n">hour</span> <span class="o">+</span> <span class="mi">9</span><span class="p">]</span> <span class="c1">#value</span>
<span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">5651</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">y</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div><p>後面範例code的training與testing部分略過。</p>
<h2 id="自我練習">自我練習</h2>
<p>以下是我自己寫的code，用sklearn的LinearRegression訓練。</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># import libray</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>

<span class="c1"># read file &amp; preprocessing</span>
<span class="n">raw_data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;train.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span> <span class="o">=</span> <span class="s1">&#39;big5&#39;</span><span class="p">)</span>
<span class="n">raw_data</span><span class="p">[</span><span class="n">raw_data</span> <span class="o">==</span> <span class="s1">&#39;NR&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">raw_data</span> <span class="o">=</span> <span class="n">raw_data</span><span class="o">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="mi">3</span><span class="p">:]</span>
<span class="n">raw_data</span> <span class="o">=</span> <span class="n">raw_data</span><span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s1">&#39;float&#39;</span><span class="p">)</span>

<span class="c1"># get x_train &amp; y_train</span>
<span class="n">month_data</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">month</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">12</span><span class="p">):</span>
    <span class="n">sample</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">([</span><span class="mi">18</span><span class="p">,</span> <span class="mi">20</span><span class="o">*</span><span class="mi">24</span><span class="p">])</span>
    <span class="k">for</span> <span class="n">day</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="p">):</span>
        <span class="n">sample</span><span class="p">[:,</span> <span class="n">day</span><span class="o">*</span><span class="mi">24</span><span class="p">:</span> <span class="p">(</span><span class="n">day</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">24</span><span class="p">]</span> <span class="o">=</span> <span class="n">raw_data</span><span class="p">[(</span><span class="n">month</span><span class="o">*</span><span class="mi">20</span><span class="o">+</span><span class="n">day</span><span class="p">)</span><span class="o">*</span><span class="mi">18</span><span class="p">:</span> <span class="p">(</span><span class="n">month</span><span class="o">*</span><span class="mi">20</span><span class="o">+</span><span class="n">day</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">18</span><span class="p">,</span> <span class="p">:]</span>
    <span class="n">month_data</span><span class="p">[</span><span class="n">month</span><span class="p">]</span> <span class="o">=</span> <span class="n">sample</span>
        
<span class="n">y_train</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">month</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">12</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">471</span><span class="p">):</span>
        <span class="n">sample</span> <span class="o">=</span> <span class="n">month_data</span><span class="p">[</span><span class="n">month</span><span class="p">][:,</span> <span class="n">n</span><span class="p">:</span><span class="n">n</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">target</span> <span class="o">=</span> <span class="n">month_data</span><span class="p">[</span><span class="n">month</span><span class="p">][</span><span class="mi">9</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">n</span><span class="o">==</span><span class="mi">0</span> <span class="ow">and</span> <span class="n">month</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">x_train</span> <span class="o">=</span> <span class="n">sample</span>
            <span class="n">y_train</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
            <span class="k">continue</span>
        <span class="n">x_train</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">x_train</span><span class="p">,</span> <span class="n">sample</span><span class="p">),</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">y_train</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
 
<span class="n">y_train</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">y_train</span><span class="p">)</span>
<span class="n">y_train</span> <span class="o">=</span> <span class="n">y_train</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">x_train</span> <span class="o">=</span> <span class="n">x_train</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5652</span><span class="p">]</span> <span class="c1"># 發現最後會有一筆重複資料，故刪除</span>

<span class="c1"># training</span>
<span class="kn">from</span> <span class="nn">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LinearRegression</span>
<span class="n">reg</span> <span class="o">=</span> <span class="n">LinearRegression</span><span class="p">()</span>
<span class="n">reg</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">x_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>

<span class="c1"># read testing data &amp; preprocessing</span>
<span class="n">test_data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;test.csv&#39;</span><span class="p">,</span> <span class="n">encoding</span> <span class="o">=</span> <span class="s1">&#39;big5&#39;</span><span class="p">,</span> <span class="n">header</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
<span class="n">test_data</span> <span class="o">=</span> <span class="n">test_data</span><span class="o">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="mi">2</span><span class="p">:]</span>
<span class="n">test_data</span><span class="p">[</span><span class="n">test_data</span> <span class="o">==</span> <span class="s1">&#39;NR&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">test_data</span> <span class="o">=</span> <span class="n">test_data</span><span class="o">.</span><span class="n">to_numpy</span><span class="p">()</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>

        
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4320</span><span class="p">,</span> <span class="mi">18</span><span class="p">):</span>
        <span class="n">sample</span> <span class="o">=</span> <span class="n">test_data</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">18</span><span class="p">,</span> <span class="p">:]</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">i</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
            <span class="n">x_test</span><span class="o">=</span><span class="n">sample</span>
            <span class="k">continue</span>
        <span class="n">x_test</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">x_test</span><span class="p">,</span> <span class="n">sample</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
     
<span class="c1"># predict</span>
<span class="n">ans_y</span> <span class="o">=</span> <span class="n">reg</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">x_test</span><span class="p">)</span>

<span class="c1"># write file</span>
<span class="kn">import</span> <span class="nn">csv</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;submit_myself.csv&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">writer</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">writer</span><span class="p">(</span><span class="nb">file</span><span class="p">)</span>
    <span class="n">header</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;value&#39;</span><span class="p">]</span>
    <span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">header</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">240</span><span class="p">):</span>
        <span class="n">row</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;id_&#39;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="n">ans_y</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]]</span>
        <span class="n">writer</span><span class="o">.</span><span class="n">writerow</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</code></pre></div><p>原本想要偷懶，直接從還沒有合併成一個月一個月的data讀資料，同樣也是一次讀10小時的那種方式。想說不是也能整理成最後的形式嗎，為何要捨近求遠呢?後來才知道主要也是為了增加data數，像是原本的做法只會有3600筆(=15 * 20 * 12)，但範例的作法會有5652筆(=471 * 12)，差了1.5倍，也因此丟到kaggle上分數很差。</p>
<p>private score: 7.51465, public score: 5.46443</p>
<p>後來我又想說: 為何不乾脆把所有資料合併，而不是分成十二個月呢? 重新寫到一半才發現這麼做最後的資料也不過是5760-9筆而已，何況月與月之間的資料不是連續的，因為每個月只有前二十天的數據而已。丟上kaggle後果然分數也比之前差。</p>
]]></content>
		</item>
		
		<item>
			<title>Nand2tetris 筆記</title>
			<link>https://cherry900606.github.io/posts/nand2tetris/</link>
			<pubDate>Sat, 07 Aug 2021 20:47:40 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/nand2tetris/</guid>
			<description>課名: Build a Modern Computer from First Principles: Nand to Tetris Part I 我的github作業: 連結 project0 進入課程網站下載課程教材(https://www.nand2tetris.org/</description>
			<content type="html"><![CDATA[<p>課名: <a href="https://www.coursera.org/learn/build-a-computer?">Build a Modern Computer from First Principles: Nand to Tetris Part I</a></p>
<p>我的github作業: <a href="https://github.com/cherry900606/nand2tetris">連結</a></p>
<h2 id="project0">project0</h2>
<p>進入課程網站下載課程教材(<a href="https://www.nand2tetris.org/software">https://www.nand2tetris.org/software</a>)，點選Download the Nand2tetris Software Suite。
裡面有兩個資料夾projects跟tools，選擇projects/00，把裡面的file.txt壓縮成project0.zip，上傳到作業繳交區即可。</p>
<h2 id="project1">project1</h2>
<p>實作projects/01裡面的15個.hdl檔，把它們打包成project1.zip，上傳到作業繳交區。</p>
<p>使用tools資料夾裡面的HardwareSimulator.bat，可以先用projects/demo裡面的Xor.hdl測試功能。</p>
<p>如果語法不正確會無法成功load chip，錯誤訊息會顯示在Hardware Simulator下方，值得注意的是有時候該區域會被擋住，如圖紅框所示:
<img src="https://i.imgur.com/g3oKsGE.png" alt="">
如果實作結果與比對不符，會在比對過程中止，同樣會在紅框顯示第幾筆測試資料有誤。</p>
<p>如果自己測試.tst檔都沒問題，那麼繳交上去也能拿到全部分數。</p>
<p>可使用notepad++實作chip。過程中若要用到其他的chip，可以參考Hack Chip Set(<a href="https://drive.google.com/file/d/1IsDnH0t7q_Im491LQ7_5_ajV0CokRbwR/view">https://drive.google.com/file/d/1IsDnH0t7q_Im491LQ7_5_ajV0CokRbwR/view</a>)提供的API。</p>
<h2 id="project2">project2</h2>
<p>要怎麼用HDL實現if-else語法呢?可以用上週作業寫過的Mux16。</p>
<p>Mux16會有兩個16-bit input，一個是原本的值，一個是符合條件後會變成的值，sel則是判斷的依據。</p>
<p>基本上可以想成:</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="k">if</span><span class="p">(</span><span class="n">sel</span><span class="p">)</span>
    <span class="n">then</span> <span class="n">b</span>
<span class="k">else</span>
    <span class="n">then</span> <span class="n">a</span>
</code></pre></div><p>zr要怎麼判斷呢?可以用上週作業的Or8Way兩次，如果兩個結果都為0就代表out為零。</p>
<p>幾個實作ALU會需要的語法:</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="n">b</span><span class="p">[</span><span class="mf">0..15</span><span class="p">]</span><span class="o">=</span><span class="nb">false</span> <span class="c1">// 輸入的第0~15 bit都為0
</span></code></pre></div><div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="n">out</span><span class="p">[</span><span class="mf">0..7</span><span class="p">]</span><span class="o">=</span><span class="n">low8</span><span class="p">,</span> <span class="n">out</span><span class="p">[</span><span class="mf">8..15</span><span class="p">]</span><span class="o">=</span><span class="n">high8</span><span class="p">,</span> <span class="n">out</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="n">signBit</span>
<span class="c1">// 把out的某些bit另外拿出來，之後要用來做其他判斷
</span></code></pre></div><h2 id="project3">project3</h2>
<p>之前幾次作業都是combinational circuit，本周的sequential circuit會有out又接回來in的情形。</p>
<p>in=out是不被允許的，可能會有類似:「circle in connections」的錯誤訊息。需要另外拉一條線接回in，像是:out=feedback, in=feedback之類的。</p>
<p>Bit Chip會需要用到bulit-in 的DFF。</p>
<p>RAM要先用DMux把load訊號展開給更小的單元，最後在把資料Mux過。丟進去的address長度參考給定的規格，都是幾個高位元bit自己DMux&amp;Mux會用到，剩下來的是給更小單元用的。</p>
<p>PC的實作順序，看coursera討論區有人提到似乎要以:inc, load, reset的順去去寫，不確定是否必要。最後要用Register來存資料，不能直接在reset的Mux16就寫out=out。討論區有助教留言說:「A common problem with this chip is that out=out should be from the Register chip.」(<a href="https://www.coursera.org/learn/build-a-computer/discussions/forums/aHveBSj3Eea8jw6UvTi2Tw/threads/tuzNlXAyEeuL8hI1GgNn1w">連結</a>)</p>
<p>作業也是把a, b兩個資料夾的.hdl都壓縮成project3.zip上傳。</p>
<h2 id="project4">project4</h2>
<figure><img src="https://i.imgur.com/Uu8ob9T.png" width="70%" height="70%"/>
</figure>

<figure><img src="https://i.imgur.com/3Tg5tw6.png" width="70%" height="70%"/>
</figure>

<figure><img src="https://i.imgur.com/G4bJ6Is.png" width="70%" height="70%"/>
</figure>

<figure><img src="https://i.imgur.com/z5cWgv9.png" width="70%" height="70%"/>
</figure>

<p>D: data register
A: address / data register
M: the currently selected memory register: M = RAM[A]</p>
<p>結束程式:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="p">(</span><span class="n">END</span><span class="p">)</span>
    <span class="nd">@END</span>
    <span class="mi">0</span><span class="p">;</span><span class="n">JMP</span>
</code></pre></div><p>@+lowercase letter = variable
@+uppercase letter = label</p>
<p>virtual registers: R0, R1, R2&hellip;&hellip;-&gt;大寫！</p>
<p>作業部分:
SCREEN大小為8192
用一個while(true)的loop去跑，有按就跑到WHITE(設值為0)，不然就跑到BLACK(設值為1)
測fill記得要選no amination，不然怎麼跑都不會有結果。</p>
<h2 id="project5">project5</h2>
<h3 id="memory">Memory</h3>
<p><img src="https://i.imgur.com/FHH31Xi.png" alt=""></p>
<p>16384 -&gt; 0100 0000 0000 0000
24576 -&gt; 0110 0000 0000 0000
觀察可知，要區分RAM, Screen與Keyboard，可由13~14bit判斷:
00, 01 -&gt; RAM
10 -&gt; Screen
11 -&gt; Keyboard
跟project3很像，先DMux分配load，之後再Mux
RAM, Screen, Keyboard的規格可以查Hack Chip Set，address根據容量大小而異。</p>
<p>測試時注意:</p>
<blockquote>
<p>To anyone facing the same problem&hellip; on the Hardware Simulator user interface, right above where you see the script executing the tests, there are three drop down boxes. The one furthest to the right which is labeled &ldquo;View&rdquo; is probably currently set to &ldquo;Script.&rdquo; Click the drop down and select &ldquo;Screen,&rdquo; and you will see an interface that has a keyboard icon. Click it and then hit the corresponding key to complete the test. <a href="https://www.coursera.org/learn/build-a-computer/discussions/weeks/5/threads/VGOSrER6EeezGhJSvzqk_g">連結</a></p>
</blockquote>
<p><strong>CPU</strong></p>
<p>這部分最困難的是自行分析c，也就是各個元件的控制訊號該怎麼生成。</p>
<p>首先先從<strong>Mux16</strong>的c開始。我們知道instruction分為A instruction與C instruction，前者是把數字存放進A register，後者是進行運算。因此此處若為A instruction，Mux16就選擇instruction；若為C instruction，Mux16就選擇ALU output。</p>
<p>判斷指令直接看instruction[15]。</p>
<p>同理<strong>A register</strong>的c也是看instruction[15]。</p>
<p><strong>writeM</strong>訊號指的是需不需要write back to memory。</p>
<p>觀察表格後，會發現d1是關鍵。因此若為C instruction且d1為1，則writeM為1，反之為0。</p>
<p><strong>D register</strong>同樣觀察表格，發現與d2有關。因此若為C instruction且d2為1，則c為1，反之為0。</p>
<p>第二個<strong>Mux16</strong>是要選擇A register output或者inM。A instruction選擇前者，C instruction選擇後者這點應該不難理解。這裡需要參考下圖，發現要選A還是M由a，也就是instruction[12]控制。</p>
<p><strong>ALU</strong>的c就是C instruction中c的部分。由第 11 bit 依序填入到第 6 bit即可。</p>
<p>最後是<strong>PC</strong>。沒想法的話就回去看課程網站提供的chip API或是chip的描述:</p>
<p>reset訊號已經有了，inc恆為true，怎麼生成load才是問題。當load==1，代表要把in讀進來，也就是說要jump。那甚麼時候要jump? 當然是條件有達成的時候。</p>
<p>觀察表格會發現，j1代表out &lt; 0條件為真要jump，j2代表out=0條件為真要jump，j3代表out&gt;0條件為真要jump。因此就看: (j1&amp;ng) || (j2&amp;zr) || (j3&amp;(! (ng || zr)) ) 。</p>
<p>參考:
<a href="https://zhuanlan.zhihu.com/p/343850636">https://zhuanlan.zhihu.com/p/343850636</a></p>
<h2 id="project6">project6</h2>
<p>依照投影片提供的API去寫，最後再接起來就好。
<img src="https://i.imgur.com/Bn4kvns.png" alt="">
<img src="https://i.imgur.com/5JVoDrp.png" alt="">
<img src="https://i.imgur.com/jJSFbm8.png" alt=""></p>
<p>程式邏輯:
<img src="https://i.imgur.com/Y1aK4vu.png" alt=""></p>
<p>pre-defined symbols:
<img src="https://i.imgur.com/lFnZHtW.png" alt=""></p>
<p>如果另外三個.hack比對都沒問題，那麼Pong.asm可以不用比對直接上傳，不然很浪費時間。</p>
]]></content>
		</item>
		
		<item>
			<title>Hugo note</title>
			<link>https://cherry900606.github.io/posts/note/</link>
			<pubDate>Thu, 05 Aug 2021 12:17:49 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/note/</guid>
			<description>架站教學 Hugo靜態網站快速入門 在 GitHub 部署 Hugo 靜態網站 一个Hugo主题：Hermit Hugo加入留言、觀看人數 常用語法 // 新增文章 hugo new posts/post_name.md // 本地端檢</description>
			<content type="html"><![CDATA[<h2 id="架站教學">架站教學</h2>
<p><a href="https://aishuafei.com/hugo-getting-started/">Hugo靜態網站快速入門</a></p>
<p><a href="https://chswei.github.io/post/programming/hugo/">在 GitHub 部署 Hugo 靜態網站</a></p>
<p><a href="https://ojbk.im/posts/2018/hugo-theme-hermit/">一个Hugo主题：Hermit</a></p>
<p><a href="https://sunnyday0932.github.io/2020/hugo%E5%8A%A0%E5%85%A5%E7%95%99%E8%A8%80%E8%A7%80%E7%9C%8B%E4%BA%BA%E6%95%B8/">Hugo加入留言、觀看人數</a></p>
<h2 id="常用語法">常用語法</h2>
<pre><code>// 新增文章
hugo new posts/post_name.md
</code></pre><pre><code>// 本地端檢視 (http://localhost:1313/)
hugo server
</code></pre><pre><code>// 更新網站(新增文章)
hugo
cd public
git add .
git commit -m &quot;update blog&quot;
git push
</code></pre><pre><code>// 更新網站(設定)
cd blog
git add .
git commit -m &quot;new feature&quot;
git push
</code></pre>]]></content>
		</item>
		
		<item>
			<title>About this blog</title>
			<link>https://cherry900606.github.io/posts/about-blog/</link>
			<pubDate>Thu, 05 Aug 2021 11:50:44 +0800</pubDate>
			
			<guid>https://cherry900606.github.io/posts/about-blog/</guid>
			<description>你好，歡迎來到我的部落格。 這裡主要是紀錄讀書心得，以及存放資工相關的筆記。</description>
			<content type="html"><![CDATA[<p>你好，歡迎來到我的部落格。</p>
<p>這裡主要是紀錄讀書心得，以及存放資工相關的筆記。</p>
]]></content>
		</item>
		
	</channel>
</rss>
